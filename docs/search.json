[{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/cell_covs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modeling continuous cell-level covariates","text":"Since read counts summed across cells pseudobulk approach, modeling continuous cell-level covariates also requires collapsing step. summarize values variable set cells using mean, store value cell type. Including variables regression formula uses summarized values corresponding cell type. demonstrate feature lightly modified analysis PBMCs 8 individuals stimulated interferon-β (Kang, et al, 2018, Nature Biotech).","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/cell_covs.html","id":"standard-processing","dir":"Articles","previous_headings":"","what":"Standard processing","title":"Modeling continuous cell-level covariates","text":"code main vignette: many datasets, continuous cell-level variables mapped reads, gene count, mitochondrial rate, etc. continuous cell-level variables dataset, can simulate two normal distribution:","code":"library(dreamlet) library(muscat) library(ExperimentHub) library(scater)  # Download data, specifying EH2259 for the Kang, et al study eh <- ExperimentHub() sce <- eh[[\"EH2259\"]]  # only keep singlet cells with sufficient reads sce <- sce[rowSums(counts(sce) > 0) > 0, ] sce <- sce[, colData(sce)$multiplets == \"singlet\"]  # compute QC metrics qc <- perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # set variable indicating stimulated (stim) or control (ctrl) sce$StimStatus <- sce$stim sce$value1 <- rnorm(ncol(sce)) sce$value2 <- rnorm(ncol(sce))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/cell_covs.html","id":"pseudobulk","dir":"Articles","previous_headings":"","what":"Pseudobulk","title":"Modeling continuous cell-level covariates","text":"Now compute pseudobulk using standard code: means per variable, cell type, sample stored pseudobulk SingleCellExperiment object:","code":"sce$id <- paste0(sce$StimStatus, sce$ind)  # Create pseudobulk pb <- aggregateToPseudoBulk(sce,   assay = \"counts\",   cluster_id = \"cell\",   sample_id = \"id\",   verbose = FALSE ) metadata(pb)$aggr_means ## # A tibble: 128 × 5 ## # Groups:   cell [8] ##    cell    id       cluster   value1   value2 ##    <fct>   <fct>      <dbl>    <dbl>    <dbl> ##  1 B cells ctrl101     3.96  0.127    0.0241  ##  2 B cells ctrl1015    4.00 -0.0539  -0.00302 ##  3 B cells ctrl1016    4     0.00571  0.0366  ##  4 B cells ctrl1039    4.04 -0.102   -0.0970  ##  5 B cells ctrl107     4     0.0438   0.0163  ##  6 B cells ctrl1244    4    -0.0928   0.138   ##  7 B cells ctrl1256    4.01  0.0344  -0.0432  ##  8 B cells ctrl1488    4.02 -0.0599  -0.00684 ##  9 B cells stim101     4.09  0.128    0.0350  ## 10 B cells stim1015    4.06  0.0267   0.0681  ## # ℹ 118 more rows"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/cell_covs.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Modeling continuous cell-level covariates","text":"Including variables regression formula uses summarized values corresponding cell type. happens behind scenes, user doesn’t need distinguish bewteen sample-level variables stored colData(pb) cell-level variables stored metadata(pb)$aggr_means. Variance partition hypothesis testing proceeds ususal:","code":"form <- ~ StimStatus + value1 + value2  # Normalize and apply voom/voomWithDreamWeights res.proc <- processAssays(pb, form, min.count = 5)  # run variance partitioning analysis vp.lst <- fitVarPart(res.proc, form)  # Summarize variance fractions genome-wide for each cell type plotVarPart(vp.lst, label.angle = 60) # Differential expression analysis within each assay res.dl <- dreamlet(res.proc, form)  # dreamlet results include coefficients for value1 and value2 res.dl ## class: dreamletResult  ## assays(8): B cells CD14+ Monocytes ... Megakaryocytes NK cells ## Genes: ##  min: 164  ##  max: 5262  ## details(7): assay n_retain ... n_errors error_initial ## coefNames(4): (Intercept) StimStatusstim value1 value2"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/cell_covs.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Modeling continuous cell-level covariates","text":"","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.5 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] muscData_1.14.0             scater_1.28.0               ##  [3] scuttle_1.10.1              ExperimentHub_2.8.1         ##  [5] AnnotationHub_3.8.0         BiocFileCache_2.8.0         ##  [7] dbplyr_2.3.2                muscat_1.14.0               ##  [9] dreamlet_1.1.5              SingleCellExperiment_1.22.0 ## [11] SummarizedExperiment_1.30.1 Biobase_2.60.0              ## [13] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1         ## [15] IRanges_2.34.1              S4Vectors_0.38.1            ## [17] BiocGenerics_0.46.0         MatrixGenerics_1.12.0       ## [19] matrixStats_1.0.0           variancePartition_1.33.2    ## [21] BiocParallel_1.34.2         limma_3.56.2                ## [23] ggplot2_3.4.4               BiocStyle_2.28.0            ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.2                      bitops_1.0-7                  ##   [3] httr_1.4.6                    RColorBrewer_1.1-3            ##   [5] doParallel_1.0.17             Rgraphviz_2.44.0              ##   [7] numDeriv_2016.8-1.1           tools_4.3.0                   ##   [9] sctransform_0.3.5             backports_1.4.1               ##  [11] utf8_1.2.3                    R6_2.5.1                      ##  [13] GetoptLong_1.0.5              withr_2.5.0                   ##  [15] prettyunits_1.1.1             gridExtra_2.3                 ##  [17] cli_3.6.1                     textshaping_0.3.6             ##  [19] sandwich_3.0-2                labeling_0.4.2                ##  [21] sass_0.4.6                    KEGGgraph_1.60.0              ##  [23] SQUAREM_2021.1                mvtnorm_1.2-2                 ##  [25] blme_1.0-5                    pkgdown_2.0.7                 ##  [27] mixsqp_0.3-48                 systemfonts_1.0.4             ##  [29] zenith_1.4.1                  parallelly_1.36.0             ##  [31] invgamma_1.1                  RSQLite_2.3.1                 ##  [33] generics_0.1.3                shape_1.4.6                   ##  [35] gtools_3.9.4                  dplyr_1.1.2                   ##  [37] Matrix_1.5-4.1                ggbeeswarm_0.7.2              ##  [39] fansi_1.0.4                   abind_1.4-5                   ##  [41] lifecycle_1.0.3               multcomp_1.4-23               ##  [43] yaml_2.3.7                    edgeR_3.42.4                  ##  [45] gplots_3.1.3                  grid_4.3.0                    ##  [47] blob_1.2.4                    promises_1.2.0.1              ##  [49] crayon_1.5.2                  lattice_0.21-8                ##  [51] beachmat_2.16.0               msigdbr_7.5.1                 ##  [53] annotate_1.78.0               KEGGREST_1.40.0               ##  [55] pillar_1.9.0                  knitr_1.43                    ##  [57] ComplexHeatmap_2.16.0         rjson_0.2.21                  ##  [59] boot_1.3-28.1                 estimability_1.4.1            ##  [61] corpcor_1.6.10                future.apply_1.11.0           ##  [63] codetools_0.2-19              glue_1.6.2                    ##  [65] data.table_1.14.8             vctrs_0.6.3                   ##  [67] png_0.1-8                     Rdpack_2.4                    ##  [69] gtable_0.3.3                  assertthat_0.2.1              ##  [71] cachem_1.0.8                  xfun_0.39                     ##  [73] mime_0.12                     rbibutils_2.2.13              ##  [75] S4Arrays_1.0.4                Rfast_2.0.7                   ##  [77] coda_0.19-4                   survival_3.5-5                ##  [79] iterators_1.0.14              ellipsis_0.3.2                ##  [81] interactiveDisplayBase_1.38.0 TH.data_1.1-2                 ##  [83] nlme_3.1-162                  pbkrtest_0.5.2                ##  [85] bit64_4.0.5                   filelock_1.0.2                ##  [87] progress_1.2.2                EnvStats_2.7.0                ##  [89] rprojroot_2.0.3               bslib_0.4.2                   ##  [91] TMB_1.9.4                     irlba_2.3.5.1                 ##  [93] vipor_0.4.5                   KernSmooth_2.23-21            ##  [95] colorspace_2.1-0              rmeta_3.0                     ##  [97] DBI_1.1.3                     DESeq2_1.40.1                 ##  [99] tidyselect_1.2.0              emmeans_1.8.7                 ## [101] curl_5.0.0                    bit_4.0.5                     ## [103] compiler_4.3.0                graph_1.78.0                  ## [105] BiocNeighbors_1.18.0          desc_1.4.2                    ## [107] DelayedArray_0.26.3           bookdown_0.34                 ## [109] scales_1.2.1                  caTools_1.18.2                ## [111] remaCor_0.0.17                rappdirs_0.3.3                ## [113] stringr_1.5.0                 digest_0.6.33                 ## [115] minqa_1.2.5                   rmarkdown_2.22                ## [117] aod_1.3.2                     XVector_0.40.0                ## [119] RhpcBLASctl_0.23-42           htmltools_0.5.5               ## [121] pkgconfig_2.0.3               lme4_1.1-34                   ## [123] sparseMatrixStats_1.12.0      highr_0.10                    ## [125] mashr_0.2.69                  fastmap_1.1.1                 ## [127] rlang_1.1.1                   GlobalOptions_0.1.2           ## [129] shiny_1.7.4                   DelayedMatrixStats_1.22.0     ## [131] farver_2.1.1                  jquerylib_0.1.4               ## [133] zoo_1.8-12                    jsonlite_1.8.5                ## [135] BiocSingular_1.16.0           RCurl_1.98-1.12               ## [137] magrittr_2.0.3                GenomeInfoDbData_1.2.10       ## [139] munsell_0.5.0                 Rcpp_1.0.11                   ## [141] babelgene_22.9                viridis_0.6.3                 ## [143] EnrichmentBrowser_2.30.1      RcppZiggurat_0.1.6            ## [145] stringi_1.7.12                zlibbioc_1.46.0               ## [147] MASS_7.3-60                   plyr_1.8.8                    ## [149] listenv_0.9.0                 parallel_4.3.0                ## [151] ggrepel_0.9.3                 Biostrings_2.68.1             ## [153] splines_4.3.0                 hms_1.1.3                     ## [155] circlize_0.4.15               locfit_1.5-9.7                ## [157] reshape2_1.4.4                ScaledMatrix_1.8.1            ## [159] BiocVersion_3.17.1            XML_3.99-0.14                 ## [161] evaluate_0.21                 BiocManager_1.30.20           ## [163] httpuv_1.6.11                 nloptr_2.0.3                  ## [165] foreach_1.5.2                 tidyr_1.3.0                   ## [167] purrr_1.0.2                   future_1.32.0                 ## [169] clue_0.3-64                   scattermore_1.1               ## [171] ashr_2.2-54                   rsvd_1.0.5                    ## [173] broom_1.0.5                   xtable_1.8-4                  ## [175] fANCOVA_0.6-1                 later_1.3.1                   ## [177] viridisLite_0.4.2             ragg_1.2.5                    ## [179] truncnorm_1.0-9               tibble_3.2.1                  ## [181] lmerTest_3.1-3                glmmTMB_1.1.7                 ## [183] memoise_2.0.1                 beeswarm_0.4.0                ## [185] AnnotationDbi_1.62.1          cluster_2.1.4                 ## [187] globals_0.16.2                GSEABase_1.62.0"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Dreamlet analysis of single cell RNA-seq","text":"scale single cell/nucleus RNA-seq increased, complexity study designs. Analysis datasets simple study designs can performed using linear model muscat package. Yet analysis datsets complex study designs repeated measures many technical batches can benefit linear mixed model analysis model correlation structure samples. previously developed dream apply linear mixed models bulk RNA-seq data using limma-style workflow. Dreamlet extends previous work dream muscat apply linear mixed models pseudobulk data. Dreamlet also supports linear models facilitates application 1) variancePartition quantify contribution multiple variables expression variation, 2) zenith perform gene set analysis differential expression signatures.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Dreamlet analysis of single cell RNA-seq","text":"install package, start R (version “4.3”) enter:","code":"if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  # Select release #1 or #2  # 1) Bioconductor release BiocManager::install(\"dreamlet\")  # 2) Latest stable release devtools::install_github(\"DiseaseNeurogenomics/dreamlet\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"process-single-cell-count-data","dir":"Articles","previous_headings":"","what":"Process single cell count data","title":"Dreamlet analysis of single cell RNA-seq","text":"perform analysis PBMCs 8 individuals stimulated interferon-β (Kang, et al, 2018, Nature Biotech). small dataset repeated measures high dimensional batch effects, sophisticated features dreamlet strictly necessary. gives us opportunity walk standard dreamlet workflow.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"preprocess-data","dir":"Articles","previous_headings":"Process single cell count data","what":"Preprocess data","title":"Dreamlet analysis of single cell RNA-seq","text":", single cell RNA-seq data downloaded ExperimentHub.","code":"library(dreamlet) library(muscat) library(ExperimentHub) library(zenith) library(scater)  # Download data, specifying EH2259 for the Kang, et al study eh <- ExperimentHub() sce <- eh[[\"EH2259\"]]  # only keep singlet cells with sufficient reads sce <- sce[rowSums(counts(sce) > 0) > 0, ] sce <- sce[, colData(sce)$multiplets == \"singlet\"]  # compute QC metrics qc <- perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # set variable indicating stimulated (stim) or control (ctrl) sce$StimStatus <- sce$stim"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"aggregate-to-pseudobulk","dir":"Articles","previous_headings":"Process single cell count data","what":"Aggregate to pseudobulk","title":"Dreamlet analysis of single cell RNA-seq","text":"Dreamlet, like muscat, performs analysis pseudobulk-level summing raw counts across cells given sample cell type. aggregateToPseudoBulk substantially faster large -disk datasets muscat::aggregateData.","code":"# Since 'ind' is the individual and 'StimStatus' is the stimulus status, # create unique identifier for each sample sce$id <- paste0(sce$StimStatus, sce$ind)  # Create pseudobulk data by specifying cluster_id and sample_id # Count data for each cell type is then stored in the `assay` field # assay: entry in assayNames(sce) storing raw counts # cluster_id: variable in colData(sce) indicating cell clusters # sample_id: variable in colData(sce) indicating sample id for aggregating cells pb <- aggregateToPseudoBulk(sce,   assay = \"counts\",   cluster_id = \"cell\",   sample_id = \"id\",   verbose = FALSE )  # one 'assay' per cell type assayNames(pb) ## [1] \"B cells\"           \"CD14+ Monocytes\"   \"CD4 T cells\"       ## [4] \"CD8 T cells\"       \"Dendritic cells\"   \"FCGR3A+ Monocytes\" ## [7] \"Megakaryocytes\"    \"NK cells\""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"voom-for-pseudobulk","dir":"Articles","previous_headings":"","what":"Voom for pseudobulk","title":"Dreamlet analysis of single cell RNA-seq","text":"Apply voom-style normalization pseudobulk counts within cell cluster using voomWithDreamWeights handle random effects (specified). processAssays() retains samples least min.cells given cell type. dropping samples usually problem, cases dropping sames can mean variable included regression formula longer variation. example, dropping stimulated samples analysis given cell type mean variable StimStatus variation perfectly colinear intercept term. colinearity issue detected internally variables problem dropped regression formula particular cell type. number samples retained resulting formula used cell type can accessed follows. analysis, samples dropped 3 cell types original formula remains valid case. mean-variance trend voom shown cell type. Cell types sufficient number cells reads show clear mean-variance trend. rare cell types like megakaryocytes, fewer genes sufficient reads trend less apparent.","code":"# Normalize and apply voom/voomWithDreamWeights res.proc <- processAssays(pb, ~StimStatus, min.count = 5)  # the resulting object of class dreamletProcessedData stores # normalized data and other information res.proc ## class: dreamletProcessedData  ## assays(8): B cells CD14+ Monocytes ... Megakaryocytes NK cells ## colData(4): ind stim multiplets StimStatus ## metadata(3): cell id cluster ## Samples: ##  min: 13  ##  max: 16 ## Genes: ##  min: 164  ##  max: 5262  ## details(7): assay n_retain ... n_errors error_initial # view details of dropping samples details(res.proc) ##               assay n_retain     formula formDropsTerms n_genes n_errors ## 1           B cells       16 ~StimStatus          FALSE    1961        0 ## 2   CD14+ Monocytes       16 ~StimStatus          FALSE    3087        0 ## 3       CD4 T cells       16 ~StimStatus          FALSE    5262        0 ## 4       CD8 T cells       16 ~StimStatus          FALSE    1030        0 ## 5   Dendritic cells       13 ~StimStatus          FALSE     164        0 ## 6 FCGR3A+ Monocytes       16 ~StimStatus          FALSE    1160        0 ## 7    Megakaryocytes       13 ~StimStatus          FALSE     172        0 ## 8          NK cells       16 ~StimStatus          FALSE    1656        0 ##   error_initial ## 1         FALSE ## 2         FALSE ## 3         FALSE ## 4         FALSE ## 5         FALSE ## 6         FALSE ## 7         FALSE ## 8         FALSE # show voom plot for each cell clusters plotVoom(res.proc) # Show plots for subset of cell clusters # plotVoom( res.proc[1:3] )  # Show plots for one cell cluster # plotVoom( res.proc[[\"B cells\"]])"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"variance-partitioning","dir":"Articles","previous_headings":"","what":"Variance partitioning","title":"Dreamlet analysis of single cell RNA-seq","text":"variancePartition package uses linear linear mixed models quanify contribution multiple sources expression variation gene-level. gene fits linear (mixed) model evalutes fraction expression variation explained variable. Variance fractions can visualized gene-level cell type using bar plot, genome-wide using violin plot.","code":"# run variance partitioning analysis vp.lst <- fitVarPart(res.proc, ~StimStatus) # Show variance fractions at the gene-level for each cell type genes <- vp.lst$gene[2:4] plotPercentBars(vp.lst[vp.lst$gene %in% genes, ]) # Summarize variance fractions genome-wide for each cell type plotVarPart(vp.lst, label.angle = 60)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"differential-expression","dir":"Articles","previous_headings":"","what":"Differential expression","title":"Dreamlet analysis of single cell RNA-seq","text":"Since normalized expression data metadata stored within res.proc, regression formula remains specified. included stimulus status, analyses larger datasets can include covariates random effects. formula ~ StimStatus, intercept fit coefficient StimStatusstim log fold change simulated controls.","code":"# Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~StimStatus)  # names of estimated coefficients coefNames(res.dl) ## [1] \"(Intercept)\"    \"StimStatusstim\" # the resulting object of class dreamletResult # stores results and other information res.dl ## class: dreamletResult  ## assays(8): B cells CD14+ Monocytes ... Megakaryocytes NK cells ## Genes: ##  min: 164  ##  max: 5262  ## details(7): assay n_retain ... n_errors error_initial ## coefNames(2): (Intercept) StimStatusstim"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"volcano-plots","dir":"Articles","previous_headings":"Differential expression","what":"Volcano plots","title":"Dreamlet analysis of single cell RNA-seq","text":"volcano plot can indicate strength differential expression signal cell type. Red points indicate FDR < 0.05.","code":"plotVolcano(res.dl, coef = \"StimStatusstim\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"gene-level-heatmap","dir":"Articles","previous_headings":"Differential expression","what":"Gene-level heatmap","title":"Dreamlet analysis of single cell RNA-seq","text":"cell type specified gene, show z-statistic dreamlet analysis. Grey indicates insufficient reads observed include gene analysis.","code":"genes <- c(\"ISG20\", \"ISG15\") plotGeneHeatmap(res.dl, coef = \"StimStatusstim\", genes = genes)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"extract-results","dir":"Articles","previous_headings":"Differential expression","what":"Extract results","title":"Dreamlet analysis of single cell RNA-seq","text":"entry res.dl stores model fit dream(), results can extracted using topTable() limma specifying coefficient interest. results shows gene name, log fold change, average expression, t-statistic, p-value, FDR (.e. adj.P.Val).","code":"# results from full analysis topTable(res.dl, coef = \"StimStatusstim\") ## DataFrame with 10 rows and 9 columns ##              assay          ID     logFC   AveExpr         t     P.Value ##        <character> <character> <numeric> <numeric> <numeric>   <numeric> ## 1          B cells       ISG15   5.46383  10.19452   29.8807 3.82697e-22 ## 2      CD4 T cells       ISG20   3.08327  10.40321   37.7709 6.82462e-22 ## 3          B cells       ISG20   3.23736  11.38145   28.4318 1.39774e-21 ## 4      CD4 T cells        MT2A   4.32138   7.80016   36.4780 1.47906e-21 ## 5  CD14+ Monocytes       IL1RN   7.04042   7.78556   39.9678 1.48612e-21 ## 6      CD4 T cells        IFI6   5.78194   8.52278   33.9813 7.12211e-21 ## 7      CD4 T cells       HERC5   4.28329   6.72836   33.1920 1.19816e-20 ## 8      CD4 T cells     TNFSF10   4.48757   7.48063   32.2412 2.27814e-20 ## 9         NK cells       ISG15   4.60250  11.00679   26.9896 2.57986e-20 ## 10        NK cells       ISG20   3.69323  10.96970   26.7509 3.21371e-20 ##      adj.P.Val         B     z.std ##      <numeric> <numeric> <numeric> ## 1  4.30737e-18   40.6512   29.8807 ## 2  4.30737e-18   40.2095   37.7709 ## 3  4.30737e-18   39.4170   28.4318 ## 4  4.30737e-18   39.3739   36.4780 ## 5  4.30737e-18   38.5477   39.9678 ## 6  1.72023e-17   37.8585   33.9813 ## 7  2.48053e-17   37.2367   33.1920 ## 8  4.12685e-17   36.7118   32.2412 ## 9  4.15415e-17   36.4711   26.9896 ## 10 4.65731e-17   36.2740   26.7509 # only B cells topTable(res.dl[[\"B cells\"]], coef = \"StimStatusstim\") ##           logFC   AveExpr        t      P.Value    adj.P.Val        B ## ISG15  5.463825 10.194524 29.88069 3.826968e-22 7.504683e-19 40.65119 ## ISG20  3.237359 11.381452 28.43176 1.397743e-21 1.370487e-18 39.41704 ## LY6E   4.199663  8.690971 23.65134 1.631076e-19 1.066180e-16 34.64028 ## PLSCR1 4.070973  8.256238 22.90123 3.725818e-19 1.718635e-16 33.79523 ## EPSTI1 3.652905  8.089555 22.75648 4.382038e-19 1.718635e-16 33.63648 ## SAT1   2.140671  9.651797 21.92936 1.127706e-18 3.685718e-16 32.73085 ## IRF7   3.655292  8.662936 21.37136 2.173109e-18 6.087810e-16 32.09392 ## UBE2L6 2.688268  9.233683 21.17978 2.731666e-18 6.370928e-16 31.85761 ## TRIM22 2.906534  7.160498 21.12311 2.923934e-18 6.370928e-16 31.70909 ## SOCS1  2.427295  8.581121 21.00831 3.357573e-18 6.584201e-16 31.66236"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"forest-plot","dir":"Articles","previous_headings":"Differential expression","what":"Forest plot","title":"Dreamlet analysis of single cell RNA-seq","text":"forest plot shows log fold change standard error given gene across cell types. color indicates FDR.","code":"plotForest(res.dl, coef = \"StimStatusstim\", gene = \"ISG20\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"box-plot","dir":"Articles","previous_headings":"Differential expression","what":"Box plot","title":"Dreamlet analysis of single cell RNA-seq","text":"Examine expression ISG20 stimulation conditions within CD14+ Monocytes. Use extractData() create tibble gene expression data metadata colData() one cell type.","code":"# get data df <- extractData(res.proc, \"CD14+ Monocytes\", genes = \"ISG20\")  # set theme thm <- theme_classic() +   theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5))  # make plot ggplot(df, aes(StimStatus, ISG20)) +   geom_boxplot() +   thm +   ylab(bquote(Expression ~ (log[2] ~ CPM))) +   ggtitle(\"ISG20\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"advanced-used-of-contrasts","dir":"Articles","previous_headings":"Differential expression","what":"Advanced used of contrasts","title":"Dreamlet analysis of single cell RNA-seq","text":"hypothesis test difference two coefficients can performed using contrasts. contrast matrix evaluated cell type backend, contrast string must supplied dreamlet().  new Diff variable can used downstream analysis asking coefficient. note since intercept term model, meaning StimStatusstim changes . formula 0 + StimStatus StimStatusstim mean expression stimulated samples. information using contrasts see makeContrastsDream() vignette.","code":"# create a contrasts called 'Diff' that is the difference between expression # in the stimulated and controls. # More than one can be specified contrasts <- c(Diff = \"StimStatusstim - StimStatusctrl\")  # Evalaute the regression model without an intercept term. # Instead estimate the mean expression in stimulated, controls and then # set Diff to the difference between the two res.dl2 <- dreamlet(res.proc, ~ 0 + StimStatus, contrasts = contrasts)  # see estimated coefficients coefNames(res.dl2) ## [1] \"Diff\"           \"StimStatusctrl\" \"StimStatusstim\" # Volcano plot of Diff plotVolcano(res.dl2[1:2], coef = \"Diff\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"gene-set-analysis","dir":"Articles","previous_headings":"","what":"Gene set analysis","title":"Dreamlet analysis of single cell RNA-seq","text":"standard enrichment methods like Fishers exact test, requires specifying FDR cutoff identify differentially expressed genes. However, dichotomizing differential expression results often simple ignores quantitative variation captured differential expression test statistics. use zenith, wrapper limma::camera, perform gene set analysis using full spectrum differential expression test statistics. zenith/camera competetive test compares mean test statistic genes given gene set, genes set accounting correlation genes. , zenith_gsa takes dreamletResult object, coefficient interest, gene sets GeneSetCollection object GSEABase.","code":"# Load Gene Ontology database # use gene 'SYMBOL', or 'ENSEMBL' id # use get_MSigDB() to load MSigDB # Use Cellular Component (i.e. CC) to reduce run time here go.gs <- get_GeneOntology(\"CC\", to = \"SYMBOL\")  # Run zenith gene set analysis on result of dreamlet res_zenith <- zenith_gsa(res.dl, coef = \"StimStatusstim\", go.gs)  # examine results for each ell type and gene set head(res_zenith) ##     assay           coef ## 1 B cells StimStatusstim ## 2 B cells StimStatusstim ## 3 B cells StimStatusstim ## 4 B cells StimStatusstim ## 5 B cells StimStatusstim ## 6 B cells StimStatusstim ##                                                        Geneset NGenes ## 1                                GO0022626: cytosolic ribosome     74 ## 2                 GO0022625: cytosolic large ribosomal subunit     45 ## 3                             GO0031256: leading edge membrane     20 ## 4 GO0090575: RNA polymerase II transcription regulator complex     37 ## 5                          GO0000151: ubiquitin ligase complex     34 ## 6                           GO0005839: proteasome core complex     13 ##   Correlation     delta        se      p.less   p.greater      PValue Direction ## 1        0.01 -1.359918 0.4149538 0.002752843 0.997247157 0.005505685      Down ## 2        0.01 -1.374381 0.4847978 0.006618402 0.993381598 0.013236805      Down ## 3        0.01 -1.858272 0.6589135 0.006813596 0.993186404 0.013627192      Down ## 4        0.01  1.424376 0.5191995 0.992075627 0.007924373 0.015848745        Up ## 5        0.01  1.392016 0.5355516 0.989495380 0.010504620 0.021009240        Up ## 6        0.01  1.993645 0.7922932 0.987661570 0.012338430 0.024676860        Up ##         FDR ## 1 0.2741364 ## 2 0.4283927 ## 3 0.4283927 ## 4 0.4289412 ## 5 0.4407344 ## 6 0.4693180"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"heatmap-of-top-genesets","dir":"Articles","previous_headings":"Gene set analysis","what":"Heatmap of top genesets","title":"Dreamlet analysis of single cell RNA-seq","text":"","code":"# for each cell type select 5 genesets with largest t-statistic # and 1 geneset with the lowest # Grey boxes indicate the gene set could not be evaluted because #    to few genes were represented plotZenithResults(res_zenith, 5, 1)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"all-gene-sets-with-fdr-30","dir":"Articles","previous_headings":"Gene set analysis > Heatmap of top genesets","what":"All gene sets with FDR < 30%","title":"Dreamlet analysis of single cell RNA-seq","text":", show genes FDR < 5% cell type","code":"# get genesets with FDR < 30% # Few significant genesets because uses Cellular Component (i.e. CC) gs <- unique(res_zenith$Geneset[res_zenith$FDR < 0.3])  # keep only results of these genesets df <- res_zenith[res_zenith$Geneset %in% gs, ]  # plot results, but with no limit based on the highest/lowest t-statistic plotZenithResults(df, Inf, Inf)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"comparing-expression-in-clusters","dir":"Articles","previous_headings":"","what":"Comparing expression in clusters","title":"Dreamlet analysis of single cell RNA-seq","text":"Identifying genes differentially expressed cell clusters incorporates paired analysis design, since individual observed cell cluster.","code":"# test differential expression between B cells and the rest of the cell clusters ct.pairs <- c(\"CD4 T cells\", \"rest\")  fit <- dreamletCompareClusters(pb, ct.pairs, method = \"fixed\")  # The coefficient 'compare' is the value logFC between test and baseline: # compare = cellClustertest - cellClusterbaseline df_Bcell <- topTable(fit, coef = \"compare\")  head(df_Bcell) ##                             logFC   AveExpr         t      P.Value    adj.P.Val ## TYROBP                  -7.422120  7.903788 -90.89526 9.293731e-32 4.368054e-28 ## FTL                     -4.940554 13.169295 -66.65308 1.450833e-28 3.409458e-25 ## CD63                    -5.083331  8.757645 -59.82930 1.867983e-27 2.926507e-24 ## C15orf48                -7.254208  8.381008 -57.06268 5.719817e-27 6.720785e-24 ## HLA-DRA_ENSG00000204287 -6.420675  8.859898 -52.69037 3.758019e-26 3.532538e-23 ## CCL2                    -7.278426  8.712962 -52.08993 4.925158e-26 3.858040e-23 ##                                B ## TYROBP                  61.17806 ## FTL                     55.57623 ## CD63                    52.88828 ## C15orf48                51.66970 ## HLA-DRA_ENSG00000204287 49.96082 ## CCL2                    49.63850"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"gene-cluster-specificity","dir":"Articles","previous_headings":"","what":"Gene-cluster specificity","title":"Dreamlet analysis of single cell RNA-seq","text":"Evaluate specificity gene cluster, retaining highly expressed genes:  Highlight expression fraction specific gene cell type:","code":"df_cts <- cellTypeSpecificity(pb)  # retain only genes with total CPM summed across cell type > 100 df_cts <- df_cts[df_cts$totalCPM > 100, ]  # Violin plot of specificity score for each cell type plotViolin(df_cts) genes <- rownames(df_cts)[apply(df_cts, 2, which.max)] plotPercentBars(df_cts, genes = genes) dreamlet::plotHeatmap(df_cts, genes = genes)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/dreamlet.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Dreamlet analysis of single cell RNA-seq","text":"","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.5 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] GO.db_3.17.0                org.Hs.eg.db_3.17.0         ##  [3] AnnotationDbi_1.62.1        muscData_1.14.0             ##  [5] scater_1.28.0               scuttle_1.10.1              ##  [7] zenith_1.4.1                ExperimentHub_2.8.1         ##  [9] AnnotationHub_3.8.0         BiocFileCache_2.8.0         ## [11] dbplyr_2.3.2                muscat_1.14.0               ## [13] dreamlet_1.1.5              SingleCellExperiment_1.22.0 ## [15] SummarizedExperiment_1.30.1 Biobase_2.60.0              ## [17] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1         ## [19] IRanges_2.34.1              S4Vectors_0.38.1            ## [21] BiocGenerics_0.46.0         MatrixGenerics_1.12.0       ## [23] matrixStats_1.0.0           variancePartition_1.33.2    ## [25] BiocParallel_1.34.2         limma_3.56.2                ## [27] ggplot2_3.4.4               BiocStyle_2.28.0            ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.2                      bitops_1.0-7                  ##   [3] httr_1.4.6                    RColorBrewer_1.1-3            ##   [5] doParallel_1.0.17             Rgraphviz_2.44.0              ##   [7] numDeriv_2016.8-1.1           tools_4.3.0                   ##   [9] sctransform_0.3.5             backports_1.4.1               ##  [11] utf8_1.2.3                    R6_2.5.1                      ##  [13] GetoptLong_1.0.5              withr_2.5.0                   ##  [15] prettyunits_1.1.1             gridExtra_2.3                 ##  [17] cli_3.6.1                     textshaping_0.3.6             ##  [19] sandwich_3.0-2                labeling_0.4.2                ##  [21] sass_0.4.6                    KEGGgraph_1.60.0              ##  [23] SQUAREM_2021.1                mvtnorm_1.2-2                 ##  [25] blme_1.0-5                    pkgdown_2.0.7                 ##  [27] mixsqp_0.3-48                 systemfonts_1.0.4             ##  [29] parallelly_1.36.0             invgamma_1.1                  ##  [31] RSQLite_2.3.1                 generics_0.1.3                ##  [33] shape_1.4.6                   gtools_3.9.4                  ##  [35] dplyr_1.1.2                   Matrix_1.5-4.1                ##  [37] ggbeeswarm_0.7.2              fansi_1.0.4                   ##  [39] abind_1.4-5                   lifecycle_1.0.3               ##  [41] multcomp_1.4-23               yaml_2.3.7                    ##  [43] edgeR_3.42.4                  gplots_3.1.3                  ##  [45] grid_4.3.0                    blob_1.2.4                    ##  [47] promises_1.2.0.1              crayon_1.5.2                  ##  [49] lattice_0.21-8                beachmat_2.16.0               ##  [51] msigdbr_7.5.1                 annotate_1.78.0               ##  [53] KEGGREST_1.40.0               pillar_1.9.0                  ##  [55] knitr_1.43                    ComplexHeatmap_2.16.0         ##  [57] rjson_0.2.21                  boot_1.3-28.1                 ##  [59] estimability_1.4.1            corpcor_1.6.10                ##  [61] future.apply_1.11.0           codetools_0.2-19              ##  [63] glue_1.6.2                    data.table_1.14.8             ##  [65] vctrs_0.6.3                   png_0.1-8                     ##  [67] Rdpack_2.4                    gtable_0.3.3                  ##  [69] assertthat_0.2.1              cachem_1.0.8                  ##  [71] xfun_0.39                     mime_0.12                     ##  [73] rbibutils_2.2.13              S4Arrays_1.0.4                ##  [75] Rfast_2.0.7                   coda_0.19-4                   ##  [77] survival_3.5-5                iterators_1.0.14              ##  [79] ellipsis_0.3.2                interactiveDisplayBase_1.38.0 ##  [81] TH.data_1.1-2                 nlme_3.1-162                  ##  [83] pbkrtest_0.5.2                bit64_4.0.5                   ##  [85] filelock_1.0.2                progress_1.2.2                ##  [87] EnvStats_2.7.0                rprojroot_2.0.3               ##  [89] bslib_0.4.2                   TMB_1.9.4                     ##  [91] irlba_2.3.5.1                 vipor_0.4.5                   ##  [93] KernSmooth_2.23-21            colorspace_2.1-0              ##  [95] rmeta_3.0                     DBI_1.1.3                     ##  [97] DESeq2_1.40.1                 tidyselect_1.2.0              ##  [99] emmeans_1.8.7                 curl_5.0.0                    ## [101] bit_4.0.5                     compiler_4.3.0                ## [103] graph_1.78.0                  BiocNeighbors_1.18.0          ## [105] desc_1.4.2                    DelayedArray_0.26.3           ## [107] bookdown_0.34                 scales_1.2.1                  ## [109] caTools_1.18.2                remaCor_0.0.17                ## [111] rappdirs_0.3.3                stringr_1.5.0                 ## [113] digest_0.6.33                 minqa_1.2.5                   ## [115] rmarkdown_2.22                aod_1.3.2                     ## [117] XVector_0.40.0                RhpcBLASctl_0.23-42           ## [119] htmltools_0.5.5               pkgconfig_2.0.3               ## [121] lme4_1.1-34                   sparseMatrixStats_1.12.0      ## [123] highr_0.10                    mashr_0.2.69                  ## [125] fastmap_1.1.1                 rlang_1.1.1                   ## [127] GlobalOptions_0.1.2           shiny_1.7.4                   ## [129] DelayedMatrixStats_1.22.0     farver_2.1.1                  ## [131] jquerylib_0.1.4               zoo_1.8-12                    ## [133] jsonlite_1.8.5                BiocSingular_1.16.0           ## [135] RCurl_1.98-1.12               magrittr_2.0.3                ## [137] GenomeInfoDbData_1.2.10       munsell_0.5.0                 ## [139] Rcpp_1.0.11                   babelgene_22.9                ## [141] viridis_0.6.3                 EnrichmentBrowser_2.30.1      ## [143] RcppZiggurat_0.1.6            stringi_1.7.12                ## [145] zlibbioc_1.46.0               MASS_7.3-60                   ## [147] plyr_1.8.8                    listenv_0.9.0                 ## [149] parallel_4.3.0                ggrepel_0.9.3                 ## [151] Biostrings_2.68.1             splines_4.3.0                 ## [153] hms_1.1.3                     circlize_0.4.15               ## [155] locfit_1.5-9.7                reshape2_1.4.4                ## [157] ScaledMatrix_1.8.1            BiocVersion_3.17.1            ## [159] XML_3.99-0.14                 evaluate_0.21                 ## [161] BiocManager_1.30.20           httpuv_1.6.11                 ## [163] nloptr_2.0.3                  foreach_1.5.2                 ## [165] tidyr_1.3.0                   purrr_1.0.2                   ## [167] future_1.32.0                 clue_0.3-64                   ## [169] scattermore_1.1               ashr_2.2-54                   ## [171] rsvd_1.0.5                    broom_1.0.5                   ## [173] xtable_1.8-4                  fANCOVA_0.6-1                 ## [175] later_1.3.1                   viridisLite_0.4.2             ## [177] ragg_1.2.5                    truncnorm_1.0-9               ## [179] tibble_3.2.1                  lmerTest_3.1-3                ## [181] glmmTMB_1.1.7                 memoise_2.0.1                 ## [183] beeswarm_0.4.0                cluster_2.1.4                 ## [185] globals_0.16.2                GSEABase_1.62.0"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/errors.html","id":"errors-with-random-effects","dir":"Articles","previous_headings":"","what":"Errors with random effects","title":"Error handling","text":"Due recent bug dependency Matrix package, random effects models may fail technical reasons. random effects analysis failing genes cases good explanation, bug may responsible. case can detected resolved follows: error indicates incompatible installs Matrix lme4. can solved followed restarting R.","code":"library(lme4)  # Fit simple mixed model lmer(Reaction ~ (1 | Subject), sleepstudy) # Error in initializePtr() :  #  function 'chm_factor_ldetL2' not provided by package 'Matrix' install.packages(\"lme4\", type = \"source\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/errors.html","id":"errors-at-the-assay--and-gene-level","dir":"Articles","previous_headings":"","what":"Errors at the assay- and gene-level","title":"Error handling","text":"common issue dreamlet() analysis succeeds genes, handful genes fail cell cluster. genes can fail iterative process fitting linear mixed model converge, estimated covariance matrix supposed positive definite eigen-value negative close zero due rounding errors floating point arithmetic. cases, dreamlet() stores summary failures cell clusters accessible details(). Specific failure messages cell cluster gene can extracted using seeErrors() demonstrate dreamlet() handles model failures: assay: cell type n_retain: number samples retained formula: regression formula used variable filtering formDropsTerms: whether variable dropped formula zero variance following filtering n_genes: number genes analyzed n_errors: number genes errors error_initial: indicator assay-level error","code":"library(dreamlet) library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization for each cell cluster res.proc <- processAssays(   pb[1:300, ],   ~group_id )  # Redundant formula # This example is an extreme example of redundancy # but more subtle cases often show up in real data form <- ~ group_id + (1 | group_id)  # fit dreamlet model res.dl <- dreamlet(res.proc, form) ##  B cells...7.9 secs ##  CD14+ Monocytes...10 secs ##  CD4 T cells...9 secs ##  CD8 T cells...4.4 secs ##  FCGR3A+ Monocytes...11 secs ## ## Of 1,062 models fit across all assays, 96.2% failed  # summary of models res.dl ## class: dreamletResult ## assays(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ Monocytes ## Genes: ##  min: 3 ##  max: 11 ## details(7): assay n_retain ... n_errors error_initial ## coefNames(2): (Intercept) group_idstim ## ## Of 1,062 models fit across all assays, 96.2% failed  # summary of models for each cell cluster details(res.dl) ##               assay n_retain                    formula formDropsTerms n_genes n_errors error_initial ## 1           B cells        4 ~group_id + (1 | group_id)          FALSE     201      190         FALSE ## 2   CD14+ Monocytes        4 ~group_id + (1 | group_id)          FALSE     269      263         FALSE ## 3       CD4 T cells        4 ~group_id + (1 | group_id)          FALSE     216      207         FALSE ## 4       CD8 T cells        4 ~group_id + (1 | group_id)          FALSE     118      115         FALSE ## 5 FCGR3A+ Monocytes        4 ~group_id + (1 | group_id)          FALSE     258      247         FALSE"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/errors.html","id":"assay-level-errors","dir":"Articles","previous_headings":"Errors at the assay- and gene-level","what":"Assay-level errors","title":"Error handling","text":"full dataset analyzed, dreamlet() runs test assay see model succeeds. model fails, continue analysis assay. assay-level errors reported error_initial column, details returned . indicates scale predictor variables different can affect numerical stability iterative algorithm. can solved running scale() variable formula:","code":"# Extract errors as a tibble res.err = seeErrors(res.dl) ##   Assay-level errors: 0 ##   Gene-level errors: 1038  # No errors at the assay level res.err$assayLevel  # the most common error is: \"Some predictor variables are on very different scales: consider rescaling\" form = ~ scale(x) + scale(y) + ..."},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/errors.html","id":"gene-level-errors","dir":"Articles","previous_headings":"Errors at the assay- and gene-level","what":"Gene-level errors","title":"Error handling","text":"model can fail single gene covariates correlated, numerical issues. Failed models reported included downstream analysis. message indicates model numerically unstable likely variables closely correlated.","code":"# See gene-level errors for each assay res.err$geneLevel[1:2,] ## # A tibble: 2 × 3 ##   assay   feature  errorText ##   <chr>   <chr>    <chr>                                ## B cells ISG15    \"Error in lmerTest:::as_lmerModLT(model, devfun, tol = tol):… ## B cells AURKAIP1 \"Error in lmerTest:::as_lmerModLT(model, devfun, tol = tol):…  # See full error message text res.err$geneLevel$errorText[1] \"Error in lmerTest:::as_lmerModLT(model, devfun, tol = tol): (converted from warning)  Model may not have converged with 1 eigenvalue close to zero: 1.4e-09\\n\""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/errors.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Error handling","text":"","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS 14.2.1 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.3       cli_3.6.1         knitr_1.43        rlang_1.1.1       ##  [5] xfun_0.39         stringi_1.7.12    purrr_1.0.2       textshaping_0.3.6 ##  [9] jsonlite_1.8.5    glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.5   ## [13] ragg_1.2.5        sass_0.4.6        rmarkdown_2.22    evaluate_0.21     ## [17] jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3   ## [21] memoise_2.0.1     stringr_1.5.0     compiler_4.3.0    fs_1.6.2          ## [25] systemfonts_1.0.4 digest_0.6.33     R6_2.5.1          magrittr_2.0.3    ## [29] bslib_0.4.2       tools_4.3.0       pkgdown_2.0.7     cachem_1.0.8      ## [33] desc_1.4.2"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/h5ad_on_disk.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Handling large H5AD datasets","text":"scale single cell RNA-seq datasets continues increase, loading entire dataset memory often impractical. Dreamlet can take advantage efficient data storage Bioconductor’s SingleCellExperiment interface dramatically reduce memory usage. two general methods storing large single-cell datasets. SingleCellExperiment, therefore dreamlet, compatible : -disk storage: data remains physical disk read memory requested. R little data duplication memory since operations delayed result requested using DelayedMatrix. Memory usage minimized cost performance since disk access can slow. -memory storage: Single cell read counts generally sprase , say, 20% read counts non-zero. counts can stored sparseMatrix stores non-zero entries. Performance higher since data memory, excessive memory usage can problem.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/h5ad_on_disk.html","id":"on-disk-storage-zellkonverter","dir":"Articles","previous_headings":"","what":"On-disk storage: zellkonverter","title":"Handling large H5AD datasets","text":"zellkonverter takes advantage H5AD file format built HDF5 format order dramatically reduce memory usage still retaining performance. zellkonverter package uses DelayedArray backend provide seamless interface -disk H5AD dataset interface SingleCellExperiment class. zellkonverter interface python code. Note python dependencies installed first time readH5AD() run, rather package installed. first run readH5AD() can take minutes, subsequent runs fast.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/h5ad_on_disk.html","id":"standard-usage","dir":"Articles","previous_headings":"On-disk storage: zellkonverter","what":"Standard usage","title":"Handling large H5AD datasets","text":"","code":"library(zellkonverter) library(SingleCellExperiment)  # Create SingleCellExperiment object that points to on-disk H5AD file sce <- readH5AD(h5ad_file, use_hdf5 = TRUE)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/h5ad_on_disk.html","id":"merge-multiple-datasets","dir":"Articles","previous_headings":"On-disk storage: zellkonverter","what":"Merge multiple datasets","title":"Handling large H5AD datasets","text":"","code":"# Read a series of H5AD files into a list # then combine them into a single merged SingleCellExperiment sce.lst <- lapply(h5ad_files, function(file) {   readH5AD(file, use_hdf5 = TRUE) }) sce <- do.call(cbind, sce.list)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/h5ad_on_disk.html","id":"access-alternative-data","dir":"Articles","previous_headings":"On-disk storage: zellkonverter","what":"Access alternative data","title":"Handling large H5AD datasets","text":"software, including pegasus, store normalized data default portion file save raw counts raw/ field. , load H5AD file generated pegasus.","code":"# read raw/ from H5AD file # raw = TRUE tells readH5AD() to read alternative data # Must use zellkonverter >=1.3.3 sce_in <- readH5AD(h5ad_file, use_hdf5 = TRUE, raw = TRUE)  # use `raw` as counts sce <- swapAltExp(sce_in, \"raw\") # use raw as main counts(sce) <- assay(sce, \"X\") # set counts assay to data in X assay(sce, \"X\") <- NULL # free X"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/h5ad_on_disk.html","id":"in-memory-storage-seurat","dir":"Articles","previous_headings":"","what":"In-memory storage: Seurat","title":"Handling large H5AD datasets","text":"Seurat can also convert import H5AD files, convert SingleCellExperiment. resulting SingleCellExperiment object stores data sparseMatrix.","code":"library(SingleCellExperiment) library(SeuratDisk)  # Convert h5ad file to h5seurat format Convert(h5ad_file, dest = \"h5seurat\")  # load Seurat file obj <- LoadH5Seurat(h5seurat_file)  # Convert Seurat object to SingleCellExperiment sce <- as.SingleCellExperiment(obj)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/h5ad_on_disk.html","id":"comparing-interfaces","dir":"Articles","previous_headings":"","what":"Comparing interfaces","title":"Handling large H5AD datasets","text":"SingleCellExperiment interface zellkonverter Seurat hides backend differences typical R user. usage dreamlet cases. small medium datasets, performance differences minimal. However, large datasets can substantial difference performance. Use zellkonverter DelayedMatrix minimize memory usage cost computationl performance. Use Seurat sparseMatrix can faster sufficent memory. aggregateToPseudoBulk() computing pseudobulk data uses different backend implements -disk DelayedMatrix -memory sparseMatrix. versions highly optimized compared naive implementation.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"instroduction","dir":"Articles","previous_headings":"","what":"Instroduction","title":"mashr analysis after dreamlet","text":"mashr Bayesian statistical method borrow information across genes cell type (Urbut, et al, 2019). mashr takes estimated log fold changes standard errors cell type gene dreamlet, produces posterior estimates accuracy precision original parameter estimates.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"preprocess-data","dir":"Articles","previous_headings":"Standard dreamlet analysis","what":"Preprocess data","title":"mashr analysis after dreamlet","text":"single cell RNA-seq data downloaded ExperimentHub","code":"library(dreamlet) library(muscat) library(ExperimentHub) library(zenith) library(scater)  # Download data, specifying EH2259 for the Kang, et al study eh <- ExperimentHub() sce <- eh[[\"EH2259\"]]  # only keep singlet cells with sufficient reads sce <- sce[rowSums(counts(sce) > 0) > 0, ] sce <- sce[,colData(sce)$multiplets == 'singlet']  # compute QC metrics qc <- perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # compute normalized data sce <- sce[rowSums(counts(sce) > 1) >= 10, ] sce <- computeLibraryFactors(sce) sce <- logNormCounts(sce)  # set variable indicating stimulated (stim) or control (ctrl) sce$StimStatus = sce$stim"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"aggregate-to-pseudobulk","dir":"Articles","previous_headings":"Standard dreamlet analysis","what":"Aggregate to pseudobulk","title":"mashr analysis after dreamlet","text":"","code":"# Since 'ind' is the individual and 'StimStatus' is the stimulus status, # create unique identifier for each sample sce$id <- paste0(sce$StimStatus, sce$ind)  # Create pseudobulk data by specifying cluster_id and sample_id # Count data for each cell type is then stored in the `assay` field # assay: entry in assayNames(sce) storing raw counts # cluster_id: variable in colData(sce) indicating cell clusters # sample_id: variable in colData(sce) indicating sample id for aggregating cells pb <- aggregateToPseudoBulk(sce,     assay = \"counts\",          cluster_id = \"cell\",       sample_id = \"id\",     verbose = FALSE)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"dreamlet-for-pseudobulk","dir":"Articles","previous_headings":"Standard dreamlet analysis","what":"dreamlet for pseudobulk","title":"mashr analysis after dreamlet","text":"","code":"# Normalize and apply voom/voomWithDreamWeights res.proc = processAssays( pb, ~ StimStatus, min.count=5)  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ StimStatus)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"run-mashr-analysis","dir":"Articles","previous_headings":"","what":"Run mashr analysis","title":"mashr analysis after dreamlet","text":"","code":"# run mashr model to borrow information across genes and # cell types in estimating coefficients' posterior distribution res_mash = run_mash(res.dl, coef='StimStatusstim')"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"summarize-mashr-results","dir":"Articles","previous_headings":"Run mashr analysis","what":"Summarize mashr results","title":"mashr analysis after dreamlet","text":"Compute summary mashr posterior distributions","code":"library(mashr)  # extract statistics from mashr model # NA values indicate genes not sufficiently expressed # in a given cell type  # original logFC head(res_mash$logFC.original)[1:4, 1:4] ##       B cells CD14+ Monocytes CD4 T cells CD8 T cells ## A1BG       NA              NA -0.73718671          NA ## AAAS       NA              NA -0.56991157          NA ## AAED1      NA        1.426001  0.07140051          NA ## AAK1       NA              NA -0.91972740          NA # posterior mean for logFC head(get_pm(res_mash$model))[1:4, 1:4] ##       B cells CD14+ Monocytes CD4 T cells CD8 T cells ## A1BG       NA              NA  -0.6327307          NA ## AAAS       NA              NA  -0.4543872          NA ## AAED1      NA        1.378843   0.0201326          NA ## AAK1       NA              NA  -0.8578750          NA # how many gene-by-celltype tests are significant # i.e.  if a gene is significant in 2 celltypes, it is counted twice table(get_lfsr(res_mash$model) < 0.05, useNA=\"ifany\") ##  ## FALSE  TRUE  <NA>  ##  8089  6073 30134 # how many genes are significant in at least one cell type table( apply(get_lfsr(res_mash$model), 1, min, na.rm=TRUE) < 0.05) ##  ## FALSE  TRUE  ##  2568  2969 # how many genes are significant in each cell type apply(get_lfsr(res_mash$model), 2, function(x) sum(x < 0.05, na.rm=TRUE)) ##           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  ##               767              2086              1525               412  ##   Dendritic cells FCGR3A+ Monocytes    Megakaryocytes          NK cells  ##                52               566                36               629 # examine top set of genes # which genes are significant in at least 1 cell type sort(names(get_significant_results(res_mash$model)))[1:10] ##  [1] \"ACTB\"                  \"ACTG1_ENSG00000184009\" \"ARPC1B\"                ##  [4] \"ATP6V0E1\"              \"B2M\"                   \"BTF3\"                  ##  [7] \"BTG1\"                  \"CALM2\"                 \"CD74\"                  ## [10] \"CFL1\" # There is a lot of variation in the raw logFC res_mash$logFC.original[\"ISG20\",] ##           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  ##          3.200534          5.865638          3.060855          3.533391  ##   Dendritic cells FCGR3A+ Monocytes    Megakaryocytes          NK cells  ##          3.593594          4.370017                NA          3.577744 # posterior mean after borrowing across cell type and genes get_pm(res_mash$model)[\"ISG20\",] ##           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  ##          3.201633          5.807546          3.063965          3.535864  ##   Dendritic cells FCGR3A+ Monocytes    Megakaryocytes          NK cells  ##          3.601904          4.350143                NA          3.577692"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"gene-set-analysis","dir":"Articles","previous_headings":"Run mashr analysis","what":"Gene set analysis","title":"mashr analysis after dreamlet","text":"Perform gene set analysis zenith using posterior mean coefficient plot chunk zenith plot chunk forest Volcano plot based local False Sign Rate (lFSR) estimated posterior distribution coefficient. plot chunk volcano","code":"# gene set analysis using mashr results library(zenith)  # Load Gene Ontology database  # use gene 'SYMBOL', or 'ENSEMBL' id # use get_MSigDB() to load MSigDB  go.gs = get_GeneOntology(\"CC\", to=\"SYMBOL\")  # valid values for statistic:  # \"tstatistic\", \"abs(tstatistic)\", \"logFC\", \"abs(logFC)\" df_gs = zenith_gsa(res_mash, go.gs)  # Heatmap of results plotZenithResults(df_gs, 5, 1) # forest plot based on mashr results plotForest(res_mash, \"ISG20\") # volcano plot based on mashr results # yaxis uses local false sign rate (lfsr) plotVolcano(res_mash)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/mashr.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"mashr analysis after dreamlet","text":"","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.5 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices datasets  utils     methods   ## [8] base      ##  ## other attached packages: ##  [1] mashr_0.2.69                ashr_2.2-54                 ##  [3] muscData_1.14.0             scater_1.28.0               ##  [5] scuttle_1.10.1              SingleCellExperiment_1.22.0 ##  [7] SummarizedExperiment_1.30.1 Biobase_2.60.0              ##  [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1         ## [11] IRanges_2.34.1              S4Vectors_0.38.1            ## [13] MatrixGenerics_1.12.0       matrixStats_1.0.0           ## [15] zenith_1.3.0                ExperimentHub_2.8.0         ## [17] AnnotationHub_3.8.0         BiocFileCache_2.8.0         ## [19] dbplyr_2.3.2                BiocGenerics_0.46.0         ## [21] muscat_1.14.0               dreamlet_0.99.23            ## [23] variancePartition_1.31.11   BiocParallel_1.34.2         ## [25] limma_3.56.2                ggplot2_3.4.2               ##  ## loaded via a namespace (and not attached): ##   [1] bitops_1.0-7                  httr_1.4.6                    ##   [3] RColorBrewer_1.1-3            doParallel_1.0.17             ##   [5] Rgraphviz_2.44.0              numDeriv_2016.8-1.1           ##   [7] tools_4.3.0                   sctransform_0.3.5             ##   [9] backports_1.4.1               utf8_1.2.3                    ##  [11] R6_2.5.1                      GetoptLong_1.0.5              ##  [13] withr_2.5.0                   prettyunits_1.1.1             ##  [15] gridExtra_2.3                 cli_3.6.1                     ##  [17] labeling_0.4.2                KEGGgraph_1.60.0              ##  [19] SQUAREM_2021.1                mvtnorm_1.2-2                 ##  [21] blme_1.0-5                    mixsqp_0.3-48                 ##  [23] parallelly_1.36.0             invgamma_1.1                  ##  [25] RSQLite_2.3.1                 generics_0.1.3                ##  [27] shape_1.4.6                   gtools_3.9.4                  ##  [29] dplyr_1.1.2                   Matrix_1.5-4.1                ##  [31] ggbeeswarm_0.7.2              fansi_1.0.4                   ##  [33] abind_1.4-5                   lifecycle_1.0.3               ##  [35] yaml_2.3.7                    edgeR_3.42.4                  ##  [37] gplots_3.1.3                  grid_4.3.0                    ##  [39] blob_1.2.4                    promises_1.2.0.1              ##  [41] crayon_1.5.2                  lattice_0.21-8                ##  [43] beachmat_2.16.0               msigdbr_7.5.1                 ##  [45] annotate_1.78.0               KEGGREST_1.40.0               ##  [47] pillar_1.9.0                  knitr_1.43                    ##  [49] ComplexHeatmap_2.16.0         rjson_0.2.21                  ##  [51] boot_1.3-28.1                 corpcor_1.6.10                ##  [53] future.apply_1.11.0           codetools_0.2-19              ##  [55] glue_1.6.2                    data.table_1.14.8             ##  [57] vctrs_0.6.3                   png_0.1-8                     ##  [59] Rdpack_2.4                    gtable_0.3.3                  ##  [61] assertthat_0.2.1              cachem_1.0.8                  ##  [63] xfun_0.39                     rbibutils_2.2.13              ##  [65] S4Arrays_1.0.4                mime_0.12                     ##  [67] Rfast_2.0.7                   iterators_1.0.14              ##  [69] interactiveDisplayBase_1.38.0 ellipsis_0.3.2                ##  [71] nlme_3.1-162                  pbkrtest_0.5.2                ##  [73] bit64_4.0.5                   progress_1.2.2                ##  [75] EnvStats_2.7.0                filelock_1.0.2                ##  [77] TMB_1.9.4                     irlba_2.3.5.1                 ##  [79] vipor_0.4.5                   KernSmooth_2.23-21            ##  [81] colorspace_2.1-0              rmeta_3.0                     ##  [83] DBI_1.1.3                     DESeq2_1.40.1                 ##  [85] tidyselect_1.2.0              bit_4.0.5                     ##  [87] compiler_4.3.0                curl_5.0.0                    ##  [89] graph_1.78.0                  BiocNeighbors_1.18.0          ##  [91] DelayedArray_0.26.3           scales_1.2.1                  ##  [93] caTools_1.18.2                remaCor_0.0.17                ##  [95] rappdirs_0.3.3                stringr_1.5.0                 ##  [97] digest_0.6.33                 minqa_1.2.5                   ##  [99] aod_1.3.2                     XVector_0.40.0                ## [101] RhpcBLASctl_0.23-42           htmltools_0.5.5               ## [103] pkgconfig_2.0.3               lme4_1.1-33                   ## [105] sparseMatrixStats_1.12.0      highr_0.10                    ## [107] fastmap_1.1.1                 rlang_1.1.1                   ## [109] GlobalOptions_0.1.2           shiny_1.7.4                   ## [111] DelayedMatrixStats_1.22.0     farver_2.1.1                  ## [113] BiocSingular_1.16.0           RCurl_1.98-1.12               ## [115] magrittr_2.0.3                GenomeInfoDbData_1.2.10       ## [117] munsell_0.5.0                 Rcpp_1.0.11                   ## [119] babelgene_22.9                viridis_0.6.3                 ## [121] EnrichmentBrowser_2.30.1      RcppZiggurat_0.1.6            ## [123] stringi_1.7.12                zlibbioc_1.46.0               ## [125] MASS_7.3-60                   plyr_1.8.8                    ## [127] parallel_4.3.0                listenv_0.9.0                 ## [129] ggrepel_0.9.3                 Biostrings_2.68.1             ## [131] splines_4.3.0                 hms_1.1.3                     ## [133] circlize_0.4.15               locfit_1.5-9.7                ## [135] reshape2_1.4.4                ScaledMatrix_1.8.1            ## [137] BiocVersion_3.17.1            XML_3.99-0.14                 ## [139] evaluate_0.21                 BiocManager_1.30.20           ## [141] nloptr_2.0.3                  foreach_1.5.2                 ## [143] httpuv_1.6.11                 tidyr_1.3.0                   ## [145] purrr_1.0.1                   future_1.32.0                 ## [147] clue_0.3-64                   scattermore_1.1               ## [149] rsvd_1.0.5                    broom_1.0.5                   ## [151] xtable_1.8-4                  fANCOVA_0.6-1                 ## [153] later_1.3.1                   viridisLite_0.4.2             ## [155] truncnorm_1.0-9               tibble_3.2.1                  ## [157] lmerTest_3.1-3                glmmTMB_1.1.7                 ## [159] memoise_2.0.1                 beeswarm_0.4.0                ## [161] AnnotationDbi_1.62.1          cluster_2.1.4                 ## [163] globals_0.16.2                GSEABase_1.62.0"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/non_lin_eff.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Testing non-linear effects","text":"Typical analysis using regression models assumes linear affect covariate response. consider testing non-linear effects case 1) continuous 2) ordered categorical variables. demonstrate feature lightly modified analysis PBMCs 8 individuals stimulated interferon-β (Kang, et al, 2018, Nature Biotech).","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/non_lin_eff.html","id":"standard-processing","dir":"Articles","previous_headings":"","what":"Standard processing","title":"Testing non-linear effects","text":"code main vignette:","code":"library(dreamlet) library(muscat) library(ExperimentHub) library(scater)  # Download data, specifying EH2259 for the Kang, et al study eh <- ExperimentHub() sce <- eh[[\"EH2259\"]]  # only keep singlet cells with sufficient reads sce <- sce[rowSums(counts(sce) > 0) > 0, ] sce <- sce[, colData(sce)$multiplets == \"singlet\"]  # compute QC metrics qc <- perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # set variable indicating stimulated (stim) or control (ctrl) sce$StimStatus <- sce$stim  sce$id <- paste0(sce$StimStatus, sce$ind)  # Create pseudobulk pb <- aggregateToPseudoBulk(sce,   assay = \"counts\",   cluster_id = \"cell\",   sample_id = \"id\",   verbose = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/non_lin_eff.html","id":"continuous-variable","dir":"Articles","previous_headings":"","what":"Continuous variable","title":"Testing non-linear effects","text":"Consider continuous variable Age. Typical analysis considers linear effects using single regression coefficient, also want consider non-linear effects age. can peform basis expansion using splines instead use 3 coefficients model age effect.","code":"# Simulate age between 18 and 65 pb$Age <- runif(ncol(pb), 18, 65)  # formula included non-linear effects of Age # by using a natural spline of degree 3 # This corresponds to using 3 coefficients instead of 1 form <- ~ splines::ns(Age, 3)  # Normalize and apply voom/voomWithDreamWeights res.proc <- processAssays(pb, form, min.count = 5)  # Differential expression analysis within each assay res.dl <- dreamlet(res.proc, form)  # The spline has degree 3, so there are 3 coefficients # estimated for Age effects coefNames(res.dl) ## [1] \"(Intercept)\"          \"splines::ns(Age, 3)1\" \"splines::ns(Age, 3)2\" ## [4] \"splines::ns(Age, 3)3\" # Jointly test effects of the 3 spline components # The test of the 3 coefficients is performed with an F-statistic topTable(res.dl, coef = coefNames(res.dl)[2:4], number = 3) ## DataFrame with 3 rows and 9 columns ##               assay          ID splines..ns.Age..3.1 splines..ns.Age..3.2 ##         <character> <character>            <numeric>            <numeric> ## 1       CD4 T cells       PTPN4             0.749900              3.31644 ## 2 FCGR3A+ Monocytes    TNFSF13B            -0.425804             11.66171 ## 3       CD4 T cells     TMEM156             0.496317              1.08501 ##   splines..ns.Age..3.3   AveExpr         F     P.Value adj.P.Val ##              <numeric> <numeric> <numeric>   <numeric> <numeric> ## 1             0.806297   4.73546   25.9823 1.81242e-06 0.0262656 ## 2             1.857899   9.03974   19.0933 1.01632e-05 0.0736427 ## 3             1.952714   4.03111   18.4439 1.66677e-05 0.0805159"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/non_lin_eff.html","id":"ordered-categorical","dir":"Articles","previous_headings":"","what":"Ordered categorical","title":"Testing non-linear effects","text":"can also test non-linear effects case categorical variables natural ordering categories. Consider time course data 4 time points. time point category natural ordering first last. multiple options model time course. Continuous: Modeling time point continuous variable uses single regression coefficient model linear effects time course. simple, models order time points, ignores non-linear effects Model using .numeric(TimePoint) Categorical: Including time point typical categorical variable uses estimated mean response value category. estimates 4 coefficients. can useful comparing two categories, ignores order time points. Model using factor(TimePoint) Ordered categorical: , trend across ordered time points modled using orthogonal polynomials. trend decomposed independent linear, quadratic, etc., effects can tested either jointly . Model using: simulated 4 time points, perform differential expression analysis.","code":"ord <- c(\"time_1\", \"time_2\", \"time_3\", \"time_4\") ordered(factor(TimePoint), ord) # Consider data generated across 4 time points # While there are no time points in the real data # we can add some for demonstration purposes pb$TimePoint <- ordered(paste0(\"time_\", rep(1:4, 4)))  # examine the ordering pb$TimePoint ##  [1] time_1 time_2 time_3 time_4 time_1 time_2 time_3 time_4 time_1 time_2 ## [11] time_3 time_4 time_1 time_2 time_3 time_4 ## Levels: time_1 < time_2 < time_3 < time_4 # Use formula including time point form <- ~TimePoint  # Normalize and apply voom/voomWithDreamWeights res.proc <- processAssays(pb, form, min.count = 5)  # Differential expression analysis within each assay res.dl <- dreamlet(res.proc, form)  # Examine the coefficient estimated # for TimePoint it estimates # linear (i.e. L) # quadratic (i.e. Q) # and cubic (i.e. C) effects coefNames(res.dl) ## [1] \"(Intercept)\" \"TimePoint.L\" \"TimePoint.Q\" \"TimePoint.C\" # Test only linear effect topTable(res.dl, coef = \"TimePoint.L\", number = 3) ## DataFrame with 3 rows and 9 columns ##         assay                   ID     logFC   AveExpr         t     P.Value ##   <character>          <character> <numeric> <numeric> <numeric>   <numeric> ## 1 CD4 T cells                 DCXR -0.708569   6.52295  -5.72171 3.16987e-05 ## 2 CD4 T cells PLP2_ENSG00000102007 -0.857329   8.02986  -5.37853 6.18442e-05 ## 3 CD8 T cells                 FTH1 -0.933347  14.55353  -5.24547 7.50475e-05 ##   adj.P.Val         B     z.std ##   <numeric> <numeric> <numeric> ## 1   0.36253  0.613988  -5.72171 ## 2   0.36253  0.653190  -5.37853 ## 3   0.36253  1.554734  -5.24547 # Test linear, quadratic and cubic effcts coefs <- c(\"TimePoint.L\", \"TimePoint.Q\", \"TimePoint.C\") topTable(res.dl, coef = coefs, number = 3) ## DataFrame with 3 rows and 9 columns ##         assay          ID TimePoint.L TimePoint.Q TimePoint.C   AveExpr ##   <character> <character>   <numeric>   <numeric>   <numeric> <numeric> ## 1 CD8 T cells      GPR183   -1.091198    1.307178    1.219751   8.46552 ## 2 CD4 T cells       CPNE1   -0.198061    0.391348    0.748177   6.28103 ## 3 CD8 T cells        GZMK   -0.592477    0.693703    1.648691   8.66466 ##           F     P.Value adj.P.Val ##   <numeric>   <numeric> <numeric> ## 1   17.5464 2.33751e-05  0.159176 ## 2   16.7200 3.48784e-05  0.159176 ## 3   15.3395 5.25054e-05  0.159176"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/non_lin_eff.html","id":"sample-filtering","dir":"Articles","previous_headings":"Ordered categorical","what":"Sample filtering","title":"Testing non-linear effects","text":"Due variation cell read count sample, processAssays() filters sample. filtering summarized : Whle 16 samples detained B cells, 9 retained megakaryocytes. can result time point dropped, polynomial expansion cell types can lower degree. combined results NA values coefficients. example, TIMP1 Megakaryocytes enought data fit cubic term, TimePoint.C NA.","code":"details(res.dl) ##               assay n_retain    formula formDropsTerms n_genes n_errors ## 1           B cells       16 ~TimePoint          FALSE    1961        0 ## 2   CD14+ Monocytes       16 ~TimePoint          FALSE    3087        0 ## 3       CD4 T cells       16 ~TimePoint          FALSE    5262        0 ## 4       CD8 T cells       16 ~TimePoint          FALSE    1030        0 ## 5   Dendritic cells       13 ~TimePoint          FALSE     164        0 ## 6 FCGR3A+ Monocytes       16 ~TimePoint          FALSE    1160        0 ## 7    Megakaryocytes       13 ~TimePoint          FALSE     172        0 ## 8          NK cells       16 ~TimePoint          FALSE    1656        0 ##   error_initial ## 1         FALSE ## 2         FALSE ## 3         FALSE ## 4         FALSE ## 5         FALSE ## 6         FALSE ## 7         FALSE ## 8         FALSE"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/articles/non_lin_eff.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Testing non-linear effects","text":"","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.5 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] muscData_1.14.0             scater_1.28.0               ##  [3] scuttle_1.10.1              ExperimentHub_2.8.1         ##  [5] AnnotationHub_3.8.0         BiocFileCache_2.8.0         ##  [7] dbplyr_2.3.2                muscat_1.14.0               ##  [9] dreamlet_1.1.5              SingleCellExperiment_1.22.0 ## [11] SummarizedExperiment_1.30.1 Biobase_2.60.0              ## [13] GenomicRanges_1.52.0        GenomeInfoDb_1.36.1         ## [15] IRanges_2.34.1              S4Vectors_0.38.1            ## [17] BiocGenerics_0.46.0         MatrixGenerics_1.12.0       ## [19] matrixStats_1.0.0           variancePartition_1.33.2    ## [21] BiocParallel_1.34.2         limma_3.56.2                ## [23] ggplot2_3.4.4               BiocStyle_2.28.0            ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.2                      bitops_1.0-7                  ##   [3] httr_1.4.6                    RColorBrewer_1.1-3            ##   [5] doParallel_1.0.17             Rgraphviz_2.44.0              ##   [7] numDeriv_2016.8-1.1           tools_4.3.0                   ##   [9] sctransform_0.3.5             backports_1.4.1               ##  [11] utf8_1.2.3                    R6_2.5.1                      ##  [13] GetoptLong_1.0.5              withr_2.5.0                   ##  [15] prettyunits_1.1.1             gridExtra_2.3                 ##  [17] cli_3.6.1                     textshaping_0.3.6             ##  [19] sandwich_3.0-2                sass_0.4.6                    ##  [21] KEGGgraph_1.60.0              SQUAREM_2021.1                ##  [23] mvtnorm_1.2-2                 blme_1.0-5                    ##  [25] pkgdown_2.0.7                 mixsqp_0.3-48                 ##  [27] systemfonts_1.0.4             zenith_1.4.1                  ##  [29] parallelly_1.36.0             invgamma_1.1                  ##  [31] RSQLite_2.3.1                 generics_0.1.3                ##  [33] shape_1.4.6                   gtools_3.9.4                  ##  [35] dplyr_1.1.2                   Matrix_1.5-4.1                ##  [37] ggbeeswarm_0.7.2              fansi_1.0.4                   ##  [39] abind_1.4-5                   lifecycle_1.0.3               ##  [41] multcomp_1.4-23               yaml_2.3.7                    ##  [43] edgeR_3.42.4                  gplots_3.1.3                  ##  [45] grid_4.3.0                    blob_1.2.4                    ##  [47] promises_1.2.0.1              crayon_1.5.2                  ##  [49] lattice_0.21-8                beachmat_2.16.0               ##  [51] msigdbr_7.5.1                 annotate_1.78.0               ##  [53] KEGGREST_1.40.0               pillar_1.9.0                  ##  [55] knitr_1.43                    ComplexHeatmap_2.16.0         ##  [57] rjson_0.2.21                  boot_1.3-28.1                 ##  [59] estimability_1.4.1            corpcor_1.6.10                ##  [61] future.apply_1.11.0           codetools_0.2-19              ##  [63] glue_1.6.2                    data.table_1.14.8             ##  [65] vctrs_0.6.3                   png_0.1-8                     ##  [67] Rdpack_2.4                    gtable_0.3.3                  ##  [69] assertthat_0.2.1              cachem_1.0.8                  ##  [71] xfun_0.39                     mime_0.12                     ##  [73] rbibutils_2.2.13              S4Arrays_1.0.4                ##  [75] Rfast_2.0.7                   coda_0.19-4                   ##  [77] survival_3.5-5                iterators_1.0.14              ##  [79] ellipsis_0.3.2                interactiveDisplayBase_1.38.0 ##  [81] TH.data_1.1-2                 nlme_3.1-162                  ##  [83] pbkrtest_0.5.2                bit64_4.0.5                   ##  [85] filelock_1.0.2                progress_1.2.2                ##  [87] EnvStats_2.7.0                rprojroot_2.0.3               ##  [89] bslib_0.4.2                   TMB_1.9.4                     ##  [91] irlba_2.3.5.1                 vipor_0.4.5                   ##  [93] KernSmooth_2.23-21            colorspace_2.1-0              ##  [95] rmeta_3.0                     DBI_1.1.3                     ##  [97] DESeq2_1.40.1                 tidyselect_1.2.0              ##  [99] emmeans_1.8.7                 curl_5.0.0                    ## [101] bit_4.0.5                     compiler_4.3.0                ## [103] graph_1.78.0                  BiocNeighbors_1.18.0          ## [105] desc_1.4.2                    DelayedArray_0.26.3           ## [107] bookdown_0.34                 scales_1.2.1                  ## [109] caTools_1.18.2                remaCor_0.0.17                ## [111] rappdirs_0.3.3                stringr_1.5.0                 ## [113] digest_0.6.33                 minqa_1.2.5                   ## [115] rmarkdown_2.22                aod_1.3.2                     ## [117] XVector_0.40.0                RhpcBLASctl_0.23-42           ## [119] htmltools_0.5.5               pkgconfig_2.0.3               ## [121] lme4_1.1-34                   sparseMatrixStats_1.12.0      ## [123] mashr_0.2.69                  fastmap_1.1.1                 ## [125] rlang_1.1.1                   GlobalOptions_0.1.2           ## [127] shiny_1.7.4                   DelayedMatrixStats_1.22.0     ## [129] jquerylib_0.1.4               zoo_1.8-12                    ## [131] jsonlite_1.8.5                BiocSingular_1.16.0           ## [133] RCurl_1.98-1.12               magrittr_2.0.3                ## [135] GenomeInfoDbData_1.2.10       munsell_0.5.0                 ## [137] Rcpp_1.0.11                   babelgene_22.9                ## [139] viridis_0.6.3                 EnrichmentBrowser_2.30.1      ## [141] RcppZiggurat_0.1.6            stringi_1.7.12                ## [143] zlibbioc_1.46.0               MASS_7.3-60                   ## [145] plyr_1.8.8                    listenv_0.9.0                 ## [147] parallel_4.3.0                ggrepel_0.9.3                 ## [149] Biostrings_2.68.1             splines_4.3.0                 ## [151] hms_1.1.3                     circlize_0.4.15               ## [153] locfit_1.5-9.7                reshape2_1.4.4                ## [155] ScaledMatrix_1.8.1            BiocVersion_3.17.1            ## [157] XML_3.99-0.14                 evaluate_0.21                 ## [159] BiocManager_1.30.20           httpuv_1.6.11                 ## [161] nloptr_2.0.3                  foreach_1.5.2                 ## [163] tidyr_1.3.0                   purrr_1.0.2                   ## [165] future_1.32.0                 clue_0.3-64                   ## [167] scattermore_1.1               ashr_2.2-54                   ## [169] rsvd_1.0.5                    broom_1.0.5                   ## [171] xtable_1.8-4                  fANCOVA_0.6-1                 ## [173] later_1.3.1                   viridisLite_0.4.2             ## [175] ragg_1.2.5                    truncnorm_1.0-9               ## [177] tibble_3.2.1                  lmerTest_3.1-3                ## [179] glmmTMB_1.1.7                 memoise_2.0.1                 ## [181] beeswarm_0.4.0                AnnotationDbi_1.62.1          ## [183] cluster_2.1.4                 globals_0.16.2                ## [185] GSEABase_1.62.0"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman GE, et al. (2023) Efficient differential expression analysis large-scale single cell transcriptomics data using dreamlet. bioRxiv doi:10.1101/2023.03.17.533005","code":"@Article{,   title = {Efficient differential expression analysis of large-scale single cell transcriptomics data using dreamlet},   author = {Gabriel E. Hoffman and et al.},   year = {2023},   journal = {bioRxiv},   doi = {10.1101/2023.03.17.533005}, }"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/index.html","id":"scalable-differential-expression-analysis-of-single-cell-transcriptomics-datasets-with-complex-study-designs","dir":"","previous_headings":"","what":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","title":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","text":"dreamlet package enables differential expression analysis multi-sample single cell datasets using linear (mixed) models precision weights. Major functionality dreamlet package using Bioconductor SingleCellExperiment interface: aggregateToPseudoBulk()       Fast evaluation pseudobulk raw estimated counts processAssays()                             Normalize aggregated counts, compute precision weights fitVarPart()                                     Variance partitioning analysis dreamlet()                                           Differential expression analysis across samples dreamletCompareClusters()  Differential expression analysis across cell clusters zenith_gsa()                                      Gene set analysis full spectrum test statistics","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","text":"Preprint biorxiv Full reproducible analysis code 4 large-scale datasets","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","text":"Recent advances single cell/nucleus transcriptomic technology enabled collection population-level data sets study cell type specific gene expression differences associated disease state, stimulus, genetic regulation. scale data, complex study designs, low read count per cell mean characterizing cell type specific molecular mechanisms requires user-friendly, purpose-built analytical framework. developed dreamlet package applies pseudobulk approach fits regression model gene cell cluster test differential expression across individuals associated trait interest. Use precision-weighted linear mixed models enables accounting repeated measures study designs, high dimensional batch effects, varying sequencing depth observed cells per biosample.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/index.html","id":"technical-intro","dir":"","previous_headings":"","what":"Technical intro","title":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","text":"Dreamlet enables analysis massive-scale single cell/nucleus transcriptome datasets addressing CPU memory usage limitations. Dreamlet performs preprocessing statistical analysis parallel multicore machines, can distribute work across multiple nodes compute cluster. Dreamlet also uses H5AD format -disk data storage enable data processing smaller chunks dramatically reduce memory usage. dreamlet workflow easily integrates Bioconductor ecosystem, uses SingleCellExperiment class facilitate compatibility analyses. Beyond differential expression testing, dreamlet provides seamless integration downstream analysis including quantifying sources expression variation, gene set analysis using full spectrum gene-level t-statistics, testing differences cell type composition visualizing results. Dreamlet builds previous work variance partitioning differential expression using precision-weighted linear mixed models variancePartition package. dreamlet package designed easily adopted users variancePartition limma.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","text":"dreamlet >= 0.99.12 compatible BioC v3.17 R v4.3. dreamlet also compatible earlier version R Bioconductor installing dependencies:","code":"# 1) Make sure Bioconductor is installed # 2) Install dreamlet and dependencies: devtools::install_github(\"DiseaseNeurogenomics/dreamlet\")  # 3) Install zellkonverter >= v1.10.1 BiocManager::install(\"zellkonverter\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/index.html","id":"dependencies","dir":"","previous_headings":"Install","what":"Dependencies","title":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","text":"case aren’t installed automatically:","code":"devtools::install_github(\"DiseaseNeurogenomics/variancePartition\") devtools::install_github(\"DiseaseNeurogenomics/zenith\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateNonCountSignal.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation of single-cell signals — aggregateNonCountSignal","title":"Aggregation of single-cell signals — aggregateNonCountSignal","text":"Aggregation single-cell pseudobulk data non-count data.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateNonCountSignal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation of single-cell signals — aggregateNonCountSignal","text":"","code":"aggregateNonCountSignal(   sce,   assay = NULL,   sample_id = NULL,   cluster_id = NULL,   min.cells = 10,   min.signal = 0.01,   min.samples = 4,   min.prop = 0.4,   verbose = TRUE,   BPPARAM = SerialParam(progressbar = verbose) )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateNonCountSignal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation of single-cell signals — aggregateNonCountSignal","text":"sce SingleCellExperiment. assay character string specifying assay slot use input data. Defaults 1st available (assayNames(x)[1]). sample_id character string specifying variable use sample id cluster_id character string specifying variable use cluster id min.cells minimum number observed cells sample included analysis min.signal minimum signal value gene considered expressed sample.  Proper value cutoff depends type signal value min.samples minimum number samples passing cutoffs cell cluster retained min.prop minimum proportion retained samples non-zero counts gene verbose logical. information progress reported? BPPARAM BiocParallelParam object specifying aggregation parallelized.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateNonCountSignal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation of single-cell signals — aggregateNonCountSignal","text":"dreamletProcessedData object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateNonCountSignal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregation of single-cell signals — aggregateNonCountSignal","text":"dreamlet workflow can also applied non-count data. case, signal averaged across cells given sample cell type. aggregateNonCountSignal() performs roles aggregateToPseudoBulk() followed processAssays() using non-count data. cell cluster, samples least min.cells retained. clusters least min.samples retained samples kept. Features retained least min.signal least min.prop fraction samples. precision measurement inverse sampling variance. precision weights computed 1/sem^2, sem = sd(signal) / sqrt(n), signal stores values averaged across cells, n number cells.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateNonCountSignal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregation of single-cell signals — aggregateNonCountSignal","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster # using non-count signal pb.signal <- aggregateNonCountSignal(example_sce,   assay = \"logcounts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(pb.signal, ~group_id) #>   B cells... #> 0.34 secs #>   CD14+ Monocytes... #> 0.3 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.25 secs #>   FCGR3A+ Monocytes... #> 0.28 secs"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Aggregation single-cell pseudobulk data.  Adapted muscat::aggregateData syntax results.  can much faster SingleCellExperiment backed H5AD files using -disk storage.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"","code":"aggregateToPseudoBulk(   x,   assay = NULL,   sample_id = NULL,   cluster_id = NULL,   fun = c(\"sum\", \"mean\", \"median\", \"prop.detected\", \"num.detected\", \"sem\", \"number\"),   scale = FALSE,   verbose = TRUE,   BPPARAM = SerialParam(progressbar = verbose),   checkValues = TRUE,   h5adBlockSizes = 1e+09 )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"x SingleCellExperiment. assay character string specifying assay slot use input data. Defaults 1st available (assayNames(x)[1]). sample_id character string specifying variable use sample id cluster_id character string specifying variable use cluster id fun character string. Specifies function use summary statistic. Passed summarizeAssayByGroup2. scale logical. pseudo-bulks scaled effective library size & multiplied 1M? verbose logical. information progress reported? BPPARAM BiocParallelParam object specifying aggregation parallelized. checkValues logical. check signal values positive integers? h5adBlockSizes set automatic block size block size (bytes) DelayedArray read H5AD file.  Larger values use memory faster.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"SingleCellExperiment. Aggregation parameters (assay, , fun, scaled) stored  metadata()$agg_pars, = c(cluster_id, sample_id).  number cells aggregated accessible int_colData()$n_cells.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Adapted muscat::aggregateData similar syntax results.  much faster SingleCellExperiment backed H5AD files using DelayedMatrix summarizes counts using DelayedMatrixStats.  function also includes optmizations sparseMatrix used Seurat using sparseMatrixStats. Keeps variables colData() constant within sample_id.  example, sex constant cells sample_id, retained variable pseudobulk result.  number expressed genes varies across cells within sample_id, dropped colData().  Instead mean value per cell type stored metadata(pb)$aggr_means, can included regression formulas downstream.  case, value covariates used per sample depend cell type analyzed.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Crowell, HL, Soneson, C, Germain, P-L, Calini, D, Collin, L, Raposo, C, Malhotra, D & Robinson, MD: Muscat detects subpopulation-specific state transitions multi-sample multi-condition single-cell transcriptomics data. Nature Communications 11(1):6077 (2020). doi: https://doi.org/10.1038/s41467-020-19894-4","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Gabriel Hoffman, Helena L Crowell & Mark D Robinson","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # pseudobulk data from each cell type # is stored as its own assay pb #> class: SingleCellExperiment  #> dim: 1267 4  #> metadata(3): experiment_info agg_pars aggr_means #> assays(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ #>   Monocytes #> rownames(1267): HES4 ISG15 ... CSTB PRMT2 #> rowData names(2): ENSEMBL SYMBOL #> colnames(4): ctrl101 ctrl107 stim101 stim107 #> colData names(1): group_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  # aggregate by cluster only, # collapsing all samples into the same pseudobulk pb2 <- aggregateToPseudoBulk(example_sce,   cluster_id = \"cluster_id\",   verbose = FALSE)  pb2 #> class: SingleCellExperiment  #> dim: 1267 5  #> metadata(3): experiment_info agg_pars aggr_means #> assays(1): '' #> rownames(1267): HES4 ISG15 ... CSTB PRMT2 #> rowData names(2): ENSEMBL SYMBOL #> colnames(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ #>   Monocytes #> colData names(0): #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Per-sample variance of single-cell counts — aggregateVar","title":"Per-sample variance of single-cell counts — aggregateVar","text":"Aggregation function single-cell log-normalized counts calculate per-sample variance dreamlet.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Per-sample variance of single-cell counts — aggregateVar","text":"","code":"aggregateVar(   sce,   assay = NULL,   cluster_id = NULL,   sample_id = NULL,   min.cells = 10,   min.var = 0.01,   min.samples = 4,   min.prop = 0.4,   verbose = TRUE,   BPPARAM = SerialParam(progressbar = verbose) )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Per-sample variance of single-cell counts — aggregateVar","text":"sce SingleCellExperiment. assay character string specifying assay slot use input data. Defaults 1st available (assayNames(x)[1]). cluster_id character string specifying variable use cluster id sample_id character string specifying variable use sample id min.cells minimum number observed cells sample included analysis min.var minimum variance gene considered expressed sample min.samples minimum number samples passing cutoffs cell cluster retained min.prop minimum proportion retained samples non-zero counts gene verbose logical. information progress reported? BPPARAM BiocParallelParam object specifying aggregation parallelized.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Per-sample variance of single-cell counts — aggregateVar","text":"dreamletProcessedData object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateVar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Per-sample variance of single-cell counts — aggregateVar","text":"dreamlet workflow can also applied model gene expression variance. case, per-sample per-gene variance calculated across cells given sample cell type. aggregateVar() performs roles aggregateToPseudoBulk() followed processAssays() using log-normalized count data. cell cluster, samples least min.cells retained. clusters least min.samples retained samples kept. Features retained least min.var least min.prop fraction samples. precision measurement inverse sampling variance. precision weights computed 1/sem^2, sem = sd / sqrt(n) n number cells.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/aggregateVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Per-sample variance of single-cell counts — aggregateVar","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # Compute variance for each sample and cell cluster pbVar <- aggregateVar(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/as.dreamletResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of regression fits to dreamletResult — as.dreamletResult","title":"Convert list of regression fits to dreamletResult — as.dreamletResult","text":"Convert list regression fits dreamletResult downstream analysis","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/as.dreamletResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of regression fits to dreamletResult — as.dreamletResult","text":"","code":"as.dreamletResult(fitList, df_details = NULL)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/as.dreamletResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of regression fits to dreamletResult — as.dreamletResult","text":"fitList list regression fit dream() df_details data.frame storing assay details","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/as.dreamletResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of regression fits to dreamletResult — as.dreamletResult","text":"object class dreamletResult","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/as.dreamletResult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert list of regression fits to dreamletResult — as.dreamletResult","text":"Useful combining multiple runs dreamletCompareClusters() single dreamletResult downstream analysis","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/as.dreamletResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert list of regression fits to dreamletResult — as.dreamletResult","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # first comparison ct.pairs <- c(\"B cells\", \"CD14+ Monocytes\") fit <- dreamletCompareClusters(pb, ct.pairs, method = \"fixed\") #> Initial filtering... #> Filtering for paired samples...  # second comparison ct.pairs2 <- c(\"B cells\", \"CD8 T cells\") fit2 <- dreamletCompareClusters(pb, ct.pairs2, method = \"fixed\") #> Initial filtering... #> Filtering for paired samples...  # Make a list storing each result with a meaningful name fitList <- list()  id <- paste0(\"[\", ct.pairs[1], \"]_vs_[\", ct.pairs[2], \"]\") fitList[[id]] <- fit  id <- paste0(\"[\", ct.pairs2[1], \"]_vs_[\", ct.pairs2[2], \"]\") fitList[[id]] <- fit2  # create a dreamletResult form this list res.compare <- as.dreamletResult(fitList) res.compare #> class: dreamletResult  #> assays(2): [B cells]_vs_[CD14+ Monocytes] [B cells]_vs_[CD8 T cells] #> Genes: #>  min: 351  #>  max: 633  #> details(0): #> coefNames(6): compare cellClusterbaseline ... Samplestim101 #>   Samplestim107"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assay-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assay — assay,dreamletResult,ANY-method","title":"Get assay — assay,dreamletResult,ANY-method","text":"Get assay Get assay Get assays name","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assay-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assay — assay,dreamletResult,ANY-method","text":"","code":"# S4 method for dreamletResult,ANY assay(x, i, withDimnames = TRUE, ...)  # S4 method for dreamletProcessedData,ANY assay(x, i, withDimnames = TRUE, ...)  # S4 method for vpDF,ANY assay(x, i, withDimnames = TRUE, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assay-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assay — assay,dreamletResult,ANY-method","text":"x vpDF object number indicating index, string indicating assay withDimnames used ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assay-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get assay — assay,dreamletResult,ANY-method","text":"return ith assay","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assayNames-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assayNames — assayNames,dreamletResult-method","title":"Get assayNames — assayNames,dreamletResult-method","text":"Get assayNames Get assayNames Get assayNames","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assayNames-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assayNames — assayNames,dreamletResult-method","text":"","code":"# S4 method for dreamletResult assayNames(x, ...)  # S4 method for dreamletProcessedData assayNames(x, ...)  # S4 method for vpDF assayNames(x, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assayNames-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assayNames — assayNames,dreamletResult-method","text":"x vpDF object ... additional arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/assayNames-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get assayNames — assayNames,dreamletResult-method","text":"array assay names","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/buildClusterTreeFromPB.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical clustering on cell types from pseudobulk — buildClusterTreeFromPB","title":"Hierarchical clustering on cell types from pseudobulk — buildClusterTreeFromPB","text":"Perform hierarchical clustering cell types pseudobulk aggregating read counts cell type.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/buildClusterTreeFromPB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical clustering on cell types from pseudobulk — buildClusterTreeFromPB","text":"","code":"buildClusterTreeFromPB(   pb,   method = c(\"complete\", \"ward.D\", \"single\", \"average\", \"mcquitty\", \"median\", \"centroid\",     \"ward.D2\"),   dist.method = c(\"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\"),   assays = assayNames(pb) )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/buildClusterTreeFromPB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical clustering on cell types from pseudobulk — buildClusterTreeFromPB","text":"pb SingleCellObject storing pseudobulk cell type assay() field method clustering method hclust() dist.method distance metric assays assays include","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/buildClusterTreeFromPB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical clustering on cell types from pseudobulk — buildClusterTreeFromPB","text":"hierarchical clustering object class hclust","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/buildClusterTreeFromPB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical clustering on cell types from pseudobulk — buildClusterTreeFromPB","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # Hierarchical clustering of cell types hcl <- buildClusterTreeFromPB(pb)  plot(hcl)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cell counts — cellCounts","title":"Extract cell counts — cellCounts","text":"Extract matrix cell counts SingleCellExperiment","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cell counts — cellCounts","text":"","code":"cellCounts(x)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cell counts — cellCounts","text":"x SingleCellExperiment","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cell counts — cellCounts","text":"matrix cell counts samples rows cell types columns","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract cell counts — cellCounts","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # get matrix of cell counts for each sample cellCounts(pb) #>         B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ Monocytes #> ctrl101     100             100         100          74                80 #> ctrl107      44             100         100          20                32 #> stim101     100             100         100         100               100 #> stim107      54             100         100          15                37"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellSpecificityValues-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class cellSpecificityValues — cellSpecificityValues-class","title":"Class cellSpecificityValues — cellSpecificityValues-class","text":"Class cellSpecificityValues cell type specificity values gene cell type","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellSpecificityValues-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class cellSpecificityValues — cellSpecificityValues-class","text":"none","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellTypeSpecificity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cell type specificity of gene expression — cellTypeSpecificity","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"gene, compute fraction overall expression attributable cell type","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"","code":"cellTypeSpecificity(pb, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"pb SingleCellExperiment pseudobulk data easy assay cell type. ... arguments passed edgeR::calcNormFactors()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"matrix fraction expression attributable cell type gene.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"Sum counts cell type, compute fraction counts-per-million attributable cell type gene","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # Compute cell type specificity of each gene df <- cellTypeSpecificity(pb)  # Violin plot of specificity scores for each cell type # Dashed line indicates genes that are equally expressed # across all cell types.  For K cell types, this is 1/K plotViolin(df)   # Compute the maximum specificity score for each gene scoreMax <- apply(df, 1, max) head(scoreMax) #>       HES4      ISG15   AURKAIP1     MRPL20      SSU72       RER1  #>   585.0935 61555.5769  1012.0795   644.9976   835.4867  1049.8381   # For each cell type, get most specific gene genes <- rownames(df)[apply(df, 2, which.max)]  # Barplot of 5 genes plotPercentBars(df, genes = genes)   # heatmap of 5 genes that are most cell type specific dreamlet::plotHeatmap(df, genes = genes)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/checkFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Check variables in a formula — checkFormula","title":"Check variables in a formula — checkFormula","text":"Check variables formula present data","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/checkFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check variables in a formula — checkFormula","text":"","code":"checkFormula(formula, data)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/checkFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check variables in a formula — checkFormula","text":"formula formula variables check data data.frame storing variables formula","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/checkFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check variables in a formula — checkFormula","text":"formula valid, return TRUE.  Else throw error","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/checkFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check variables in a formula — checkFormula","text":"","code":"# Valid formula dreamlet:::checkFormula(~speed, cars)  # Not valid formula # dreamlet:::checkFormula( ~ speed + a, cars)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/coefNames-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coefficient names — coefNames","title":"Get coefficient names — coefNames","text":"Get coefficient names","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/coefNames-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coefficient names — coefNames","text":"","code":"coefNames(obj)  # S4 method for dreamletResult coefNames(obj)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/coefNames-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coefficient names — coefNames","text":"obj dreamletResult object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/coefNames-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get coefficient names — coefNames","text":"array storing names coefficients","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/coefNames-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get coefficient names — coefNames","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.26 secs #>   CD14+ Monocytes... #> 0.38 secs #>   CD4 T cells... #> 0.29 secs #>   CD8 T cells... #> 0.3 secs #>   FCGR3A+ Monocytes... #> 0.41 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.22 secs #>   CD14+ Monocytes... #> 0.25 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.29 secs #>   FCGR3A+ Monocytes... #> 1.1 secs  # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-dreamletProcessedData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","title":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","text":"Extract colData dreamletProcessedData","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-dreamletProcessedData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","text":"","code":"# S4 method for dreamletProcessedData colData(x, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-dreamletProcessedData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","text":"x dreamletProcessedData object ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-dreamletProcessedData-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","text":"object colData field","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-set-dreamletProcessedData-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Set colData — colData<-,dreamletProcessedData,ANY-method","title":"Set colData — colData<-,dreamletProcessedData,ANY-method","text":"Set colData dreamletProcessedData, check dimensions rownames","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-set-dreamletProcessedData-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set colData — colData<-,dreamletProcessedData,ANY-method","text":"","code":"# S4 method for dreamletProcessedData,ANY colData(x, ...) <- value"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-set-dreamletProcessedData-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set colData — colData<-,dreamletProcessedData,ANY-method","text":"x dreamletProcessedData object ... arguments value data.frame object can coerced ","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/colData-set-dreamletProcessedData-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set colData — colData<-,dreamletProcessedData,ANY-method","text":"none","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/compositePosteriorTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform composite test on results from mashr — compositePosteriorTest","title":"Perform composite test on results from mashr — compositePosteriorTest","text":"posterior probabilities genes conditions obtained 1-lFSR.  Let prob array storing results one gene.  probability _no_ conditions exclusion set non-zero prod(1 - prob[exclude]). probability _all_ conditions inclusion set non-zero prod(prob[include]). probability _at least one_ condition inclusion set non-zero 1 - prod(1 - prob[include]).  composite test product probabilties computed inclusion exclusion sets.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/compositePosteriorTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform composite test on results from mashr — compositePosteriorTest","text":"","code":"compositePosteriorTest(   x,   include,   exclude = NULL,   test = c(\"at least 1\", \"all\") )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/compositePosteriorTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform composite test on results from mashr — compositePosteriorTest","text":"x \"dreamlet_mash_result\" run_mash() include array conditions inclusion set exclude array conditions exclusion set. Defaults NULL exclusion test evaluate posterior probability non-zero effect \"least 1\" \"\" conditions","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/compositePosteriorTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform composite test on results from mashr — compositePosteriorTest","text":"Perform composite test evaluating specificity effect.  Evalute posterior probability non-zero effect present _all_ _at least one_ condition inclusion set, _no conditions_ exclusion set.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/compositePosteriorTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform composite test on results from mashr — compositePosteriorTest","text":"","code":"library(muscat) library(mashr) #> Loading required package: ashr library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce[1:100, ],   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.096 secs #>   CD14+ Monocytes... #> 0.16 secs #>   CD4 T cells... #> 0.092 secs #>   CD8 T cells... #> 0.074 secs #>   FCGR3A+ Monocytes... #> 0.082 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.044 secs #>   CD14+ Monocytes... #> 0.048 secs #>   CD4 T cells... #> 0.058 secs #>   CD8 T cells... #> 0.054 secs #>   FCGR3A+ Monocytes... #> 0.051 secs  # run MASH model # This can take 10s of minutes on real data # This small datasets should take ~30s res_mash <- run_mash(res.dl, \"group_idstim\")  # Composite test based on posterior probabilities # to identify effect present in *at least 1* monocyte type # and *NO* T-cell type. include <- c(\"CD14+ Monocytes\", \"FCGR3A+ Monocytes\") exclude <- c(\"CD4 T cells\", \"CD8 T cells\")  # Perform composite test prob <- compositePosteriorTest(res_mash, include, exclude)  # examine the lFSR for top gene get_lfsr(res_mash$model)[which.max(prob), , drop = FALSE] #>       B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ Monocytes #> FBXO6      NA              NA          NA          NA      1.981564e-17  # Test if *all* cell types have non-zero effect prob <- compositePosteriorTest(res_mash, assayNames(res.dl))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeCellCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cell counts with metadata — computeCellCounts","title":"Get cell counts with metadata — computeCellCounts","text":"Get cell counts metadata sample","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeCellCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cell counts with metadata — computeCellCounts","text":"","code":"computeCellCounts(sce, annotation, sampleIDs)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeCellCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cell counts with metadata — computeCellCounts","text":"sce SingleCellExperiment annotation string indicating column colData(sce) storing cell type annotations sampleIDs string indicating column colData(sce) storing sample identifers","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeCellCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cell counts with metadata — computeCellCounts","text":"matrix storing cell counts","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeCellCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cell counts with metadata — computeCellCounts","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  counts <- computeCellCounts(example_sce, \"cluster_id\", \"sample_id\")  counts[1:4, 1:4] #>         B cells CD14+ Monocytes CD4 T cells CD8 T cells #> ctrl101     100             100         100          74 #> ctrl107      44             100         100          20 #> stim101     100             100         100         100 #> stim107      54             100         100          15"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeLogCPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log normalized counts — computeLogCPM","title":"Compute log normalized counts — computeLogCPM","text":"Compute normalized counts log2 counts per million","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeLogCPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log normalized counts — computeLogCPM","text":"","code":"computeLogCPM(sce, lib.size = colSums2(counts(sce)), prior.count = 2)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeLogCPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log normalized counts — computeLogCPM","text":"sce SingleCellExperiment counts stored counts(sce) lib.size library size cell prior.count average count added observation avoid taking log zero","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeLogCPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log normalized counts — computeLogCPM","text":"matrix log CPM values","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeLogCPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute log normalized counts — computeLogCPM","text":"function gives result edgeR::cpm(counts(sce), log=TRUE)","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeLogCPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute log normalized counts — computeLogCPM","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  logcounts(example_sce) <- computeLogCPM(example_sce)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeNormCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute normalized counts — computeNormCounts","title":"Compute normalized counts — computeNormCounts","text":"Compute normalized counts counts per million","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeNormCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute normalized counts — computeNormCounts","text":"","code":"computeNormCounts(sce)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeNormCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute normalized counts — computeNormCounts","text":"sce SingleCellExperiment counts stored counts(sce)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeNormCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute normalized counts — computeNormCounts","text":"matrix CPM values","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeNormCounts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute normalized counts — computeNormCounts","text":"function gives result edgeR::cpm(counts(sce), log=FALSE)","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/computeNormCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute normalized counts — computeNormCounts","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  normcounts(example_sce) <- computeNormCounts(example_sce)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/details-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract details from dreamletProcessedData — details","title":"Extract details from dreamletProcessedData — details","text":"Extract details dreamletProcessedData","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/details-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract details from dreamletProcessedData — details","text":"","code":"details(object)  # S4 method for dreamletProcessedData details(object)  # S4 method for dreamletResult details(object)  # S4 method for vpDF details(object)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/details-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract details from dreamletProcessedData — details","text":"object dreamletProcessedData object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/details-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract details from dreamletProcessedData — details","text":"Extract detailed information classes","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/details-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract details from dreamletProcessedData — details","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.34 secs #>   CD14+ Monocytes... #> 0.41 secs #>   CD4 T cells... #> 0.28 secs #>   CD8 T cells... #> 0.16 secs #>   FCGR3A+ Monocytes... #> 0.34 secs  # For each cell type, number of samples retained, # and variables retained details(res.proc) #>               assay n_retain   formula formDropsTerms n_genes n_errors #> 1           B cells        4 ~group_id          FALSE     847        0 #> 2   CD14+ Monocytes        4 ~group_id          FALSE    1130        0 #> 3       CD4 T cells        4 ~group_id          FALSE     897        0 #> 4       CD8 T cells        4 ~group_id          FALSE     531        0 #> 5 FCGR3A+ Monocytes        4 ~group_id          FALSE    1086        0 #>   error_initial #> 1         FALSE #> 2         FALSE #> 3         FALSE #> 4         FALSE #> 5         FALSE"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Test differential variance — diffVar,dreamletResult-method","title":"Test differential variance — diffVar,dreamletResult-method","text":"Test association covariate interest response's deviation expectation.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test differential variance — diffVar,dreamletResult-method","text":"","code":"# S4 method for dreamletResult diffVar(   fit,   method = c(\"AD\", \"SQ\"),   scale = c(\"leverage\", \"none\"),   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test differential variance — diffVar,dreamletResult-method","text":"fit model fit dream() method transform residuals using absolute deviation (\"AD\") squared deviation (\"SQ\"). BPPARAM parameters parallel evaluation ... parameters passed dream()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test differential variance — diffVar,dreamletResult-method","text":"method performs test differential variance two subsets data, way generalizes multiple categories, continuous variables metrics spread beyond variance.  two category test, method simular Levene's test.  model adapted Phipson, et al (2014), extended linear mixed models, adapted compatible variancePartition::dream() dreamlet::dreamlet(). method composed multiple steps 1) typical linear (mixed) model fit dreamlet(), 2) residuals computed transformed based absolute value squaring transform, 3) second regression performed dreamlet() test variable associated increased deviation expectation.  regression take advantage dreamlet() linear (mixed) modelling framework followed empirical Bayes shrinkage extends limma::voom() framework. Note diffVar() takes results first regression parameter use starting point.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test differential variance — diffVar,dreamletResult-method","text":"Phipson B, Oshlack (2014). “DiffVar: new method detecting differential variability application methylation cancer aging.” Genome biology, 15(9), 1--16.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test differential variance — diffVar,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~ group_id) #>   B cells... #> 0.22 secs #>   CD14+ Monocytes... #> 0.48 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.12 secs #>   FCGR3A+ Monocytes... #> 0.28 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~ group_id) #>   B cells... #> 0.15 secs #>   CD14+ Monocytes... #> 0.18 secs #>   CD4 T cells... #> 0.15 secs #>   CD8 T cells... #> 0.096 secs #>   FCGR3A+ Monocytes... #> 0.16 secs  # Differential variance analysis # result is a dreamlet fit res.dvar <- diffVar( res.dl )  # Examine results res.dvar #> class: dreamletResult  #> assays(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ #>   Monocytes #> Genes: #>  min: 531  #>  max: 1130  #> details(7): assay n_retain ... n_errors error_initial #> coefNames(2): (Intercept) group_idstim  # Examine details for each assay details(res.dvar) #>               assay n_retain   formula formDropsTerms n_genes n_errors #> 1           B cells        4 ~group_id          FALSE     847        0 #> 2   CD14+ Monocytes        4 ~group_id          FALSE    1130        0 #> 3       CD4 T cells        4 ~group_id          FALSE     897        0 #> 4       CD8 T cells        4 ~group_id          FALSE     531        0 #> 5 FCGR3A+ Monocytes        4 ~group_id          FALSE    1086        0 #>   error_initial #> 1         FALSE #> 2         FALSE #> 3         FALSE #> 4         FALSE #> 5         FALSE  # show coefficients estimated for each cell type coefNames(res.dvar) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR topTable(res.dvar, coef = \"group_idstim\", number = 3) #> DataFrame with 3 rows and 9 columns #>         assay          ID     logFC   AveExpr         t     P.Value   adj.P.Val #>   <character> <character> <numeric> <numeric> <numeric>   <numeric>   <numeric> #> 1 CD4 T cells     DYNLRB1  0.979326  0.524201  1181.842 1.27823e-11 1.89066e-08 #> 2 CD4 T cells       RNPS1  1.104376  0.686279  1004.498 2.35673e-11 1.89066e-08 #> 3 CD4 T cells       SLFN5  0.818856  0.444586   965.642 2.73388e-11 1.89066e-08 #>           B     z.std #>   <numeric> <numeric> #> 1   18.1828  1181.842 #> 2   17.6594  1004.498 #> 3   17.5243   965.642  # Plot top hit to see differential variance # Note that this is a toy example with only 4 samples cellType <- 'CD4 T cells'      gene <- 'DYNLRB1'  y <- res.proc[[cellType]]$E[gene,] x <- colData(res.proc)$group_id  boxplot(y ~ x,    xlab = \"Stimulation status\",    ylab = \"Gene expression\",   main = paste(cellType, gene))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Test differential variance — diffVar,dreamletResult-method","title":"Test differential variance — diffVar,dreamletResult-method","text":"Test association covariate interest response's deviation expectation.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test differential variance — diffVar,dreamletResult-method","text":"","code":"# S4 method for dreamletResult diffVar(   fit,   method = c(\"AD\", \"SQ\"),   scale = c(\"leverage\", \"none\"),   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test differential variance — diffVar,dreamletResult-method","text":"fit model fit dream() method transform residuals using absolute deviation (\"AD\") squared deviation (\"SQ\"). scale scale observation \"leverage\", scaling (\"none\") BPPARAM parameters parallel evaluation ... parameters passed dream()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test differential variance — diffVar,dreamletResult-method","text":"method performs test differential variance two subsets data, way generalizes multiple categories, continuous variables metrics spread beyond variance.  two category test, method simular Levene's test.  model adapted Phipson, et al (2014), extended linear mixed models, adapted compatible variancePartition::dream() dreamlet::dreamlet(). method composed multiple steps 1) typical linear (mixed) model fit dreamlet(), 2) residuals computed transformed based absolute value squaring transform, 3) second regression performed dreamlet() test variable associated increased deviation expectation.  regression take advantage dreamlet() linear (mixed) modelling framework followed empirical Bayes shrinkage extends limma::voom() framework. Note diffVar() takes results first regression parameter use starting point.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test differential variance — diffVar,dreamletResult-method","text":"Phipson B, Oshlack (2014). “DiffVar: new method detecting differential variability application methylation cancer aging.” Genome biology, 15(9), 1--16.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/diffVar-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test differential variance — diffVar,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.25 secs #>   CD14+ Monocytes... #> 0.34 secs #>   CD4 T cells... #> 0.25 secs #>   CD8 T cells... #> 0.14 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.19 secs #>   CD14+ Monocytes... #> 0.24 secs #>   CD4 T cells... #> 0.21 secs #>   CD8 T cells... #> 0.11 secs #>   FCGR3A+ Monocytes... #> 0.2 secs  # Differential variance analysis # result is a dreamlet fit res.dvar <- diffVar(res.dl)  # Examine results res.dvar #> class: dreamletResult  #> assays(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ #>   Monocytes #> Genes: #>  min: 531  #>  max: 1130  #> details(7): assay n_retain ... n_errors error_initial #> coefNames(2): (Intercept) group_idstim  # Examine details for each assay details(res.dvar) #>               assay n_retain   formula formDropsTerms n_genes n_errors #> 1           B cells        4 ~group_id          FALSE     847        0 #> 2   CD14+ Monocytes        4 ~group_id          FALSE    1130        0 #> 3       CD4 T cells        4 ~group_id          FALSE     897        0 #> 4       CD8 T cells        4 ~group_id          FALSE     531        0 #> 5 FCGR3A+ Monocytes        4 ~group_id          FALSE    1086        0 #>   error_initial #> 1         FALSE #> 2         FALSE #> 3         FALSE #> 4         FALSE #> 5         FALSE  # show coefficients estimated for each cell type coefNames(res.dvar) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR topTable(res.dvar, coef = \"group_idstim\", number = 3) #> DataFrame with 3 rows and 9 columns #>         assay          ID     logFC   AveExpr         t     P.Value   adj.P.Val #>   <character> <character> <numeric> <numeric> <numeric>   <numeric>   <numeric> #> 1 CD4 T cells     DYNLRB1  0.978587  0.525150   1179.42 1.28303e-11 1.91186e-08 #> 2 CD4 T cells       RNPS1  1.103936  0.686623   1002.75 2.36305e-11 1.91186e-08 #> 3 CD4 T cells       SLFN5  0.818186  0.444949    964.08 2.74004e-11 1.91186e-08 #>           B     z.std #>   <numeric> <numeric> #> 1   18.1794   1179.42 #> 2   17.6567   1002.75 #> 3   17.5220    964.08  # Plot top hit to see differential variance # Note that this is a toy example with only 4 samples cellType <- \"CD4 T cells\" gene <- \"DYNLRB1\"  y <- res.proc[[cellType]]$E[gene, ] x <- colData(res.proc)$group_id  boxplot(y ~ x,   xlab = \"Stimulation status\",   ylab = \"Gene expression\",   main = paste(cellType, gene) )  #"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential expression for each assay — dreamlet","title":"Differential expression for each assay — dreamlet","text":"Perform differential expression assay using linear (mixed) models","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential expression for each assay — dreamlet","text":"","code":"dreamlet(   x,   formula,   data = colData(x),   assays = assayNames(x),   contrasts = NULL,   min.cells = 10,   robust = FALSE,   quiet = FALSE,   BPPARAM = SerialParam(),   use.eBayes = TRUE,   ... )  # S4 method for dreamletProcessedData dreamlet(   x,   formula,   data = colData(x),   assays = assayNames(x),   contrasts = NULL,   min.cells = 10,   robust = FALSE,   quiet = FALSE,   BPPARAM = SerialParam(),   use.eBayes = TRUE,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential expression for each assay — dreamlet","text":"x SingleCellExperiment dreamletProcessedData object formula regression formula differential expression analysis data metadata used regression formula assays array assay names include analysis. Defaults assayNames(x) contrasts character vector specifying contrasts specifying linear combinations fixed effects test.  fed makeContrastsDream( formula, data, contrasts=contrasts) min.cells minimum number observed cells sample included analysis robust logical, use eBayes method robust outlier genes quiet show messages BPPARAM parameters parallel evaluation use.eBayes eBayes used result? (defualt: TRUE) ... arguments passed dream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential expression for each assay — dreamlet","text":"Object class dreamletResult storing results cell type","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential expression for each assay — dreamlet","text":"Fit linear (mixed) model cell type separately.  advanced use contrasts see variancePartition::makeContrastsDream() vignette https://gabrielhoffman.github.io/variancePartition/articles/dream.html#advanced-hypothesis-testing-1.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential expression for each assay — dreamlet","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.22 secs #>   CD14+ Monocytes... #> 0.33 secs #>   CD4 T cells... #> 0.26 secs #>   CD8 T cells... #> 0.15 secs #>   FCGR3A+ Monocytes... #> 0.33 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.17 secs #>   CD14+ Monocytes... #> 0.26 secs #>   CD4 T cells... #> 0.19 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.22 secs  # Examine results res.dl #> class: dreamletResult  #> assays(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ #>   Monocytes #> Genes: #>  min: 531  #>  max: 1130  #> details(7): assay n_retain ... n_errors error_initial #> coefNames(2): (Intercept) group_idstim  # Examine details for each assay details(res.dl) #>               assay n_retain   formula formDropsTerms n_genes n_errors #> 1           B cells        4 ~group_id          FALSE     847        0 #> 2   CD14+ Monocytes        4 ~group_id          FALSE    1130        0 #> 3       CD4 T cells        4 ~group_id          FALSE     897        0 #> 4       CD8 T cells        4 ~group_id          FALSE     531        0 #> 5 FCGR3A+ Monocytes        4 ~group_id          FALSE    1086        0 #>   error_initial #> 1         FALSE #> 2         FALSE #> 3         FALSE #> 4         FALSE #> 5         FALSE  # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR topTable(res.dl, coef = \"group_idstim\", number = 3) #> DataFrame with 3 rows and 9 columns #>               assay          ID     logFC   AveExpr         t     P.Value #>         <character> <character> <numeric> <numeric> <numeric>   <numeric> #> 1           B cells       ISG15   6.17666   10.2306   19.1083 1.26348e-14 #> 2 FCGR3A+ Monocytes      CXCL10   5.27610   11.9149   27.3747 7.09630e-14 #> 3           B cells       ISG20   3.60083   11.5794   16.0129 3.92209e-13 #>     adj.P.Val         B     z.std #>     <numeric> <numeric> <numeric> #> 1 5.67431e-11   23.2102   19.1083 #> 2 1.59347e-10   22.0773   27.3747 #> 3 5.87136e-10   20.2656   16.0129"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletCompareClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential expression between pair of assays — dreamletCompareClusters","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"Perform differential expression pair assays using linear (mixed) models","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"","code":"dreamletCompareClusters(   pb,   assays,   method = c(\"fixed\", \"random\", \"none\"),   formula = ~0,   collapse = TRUE,   min.cells = 10,   min.count = 10,   min.samples = 4,   isCounts = TRUE,   normalize.method = \"TMM\",   robust = FALSE,   quiet = FALSE,   contrasts = c(compare = paste(\"cellClustertest - cellClusterbaseline\")),   BPPARAM = SerialParam(),   errorsAsWarnings = FALSE,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"pb pseudobulk data SingleCellExperiment object assays array two entries specifying assays (.e. cell clusters) compare, list two sets assays. method account repeated measures donors using \"random\" effect, \"fixed\" effect, \"none\" formula covariates include analysis. collapse TRUE (default), combine cell clusters within test set, separately baseline set. FALSE, estimate coefficient cell cluster identify differential expression using linear contrasts variancePartition::makeContrastsDream() min.cells minimum number observed cells sample included analysis min.count minimum number reads gene consider expressed sample.  Passed edgeR::filterByExpr min.samples minimum number samples passing cutoffs cell cluster retained isCounts logical, indicating data raw counts normalize.method normalization method used calcNormFactors robust logical, use eBayes method robust outlier genes quiet show messages contrasts cell type encoded variable cellCluster levels test baseline. contrasts specifies contrasts passed variancePartition::makeContrastsDream().  Note, advanced users . BPPARAM parameters parallel evaluation errorsAsWarnings TRUE, convert error warning return NULL ... arguments passed dream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"Object class dreamletResult storing results comparison","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"Analyze pseudobulk data identify differential gene expression two cell clusters sets clusters modeling cross-donor expression variation aspects study design. dreamletCompareClusters() useful finding genes differentially expressed betweeen cell clusters estimating fold change.  However, p-values number differentially expressed genes problematic two reasons, users must careful overinterpret : Cell clusters typically identified gene expression data used differential expression analysis clusters. data used discovery testing, means p-values differential expression analysis uniform null.  produce lot findings small p-values even absence true biological differences. dreamlet package designed large datasets many subjects.  sample sizes cohort studies order magnitude larger typical single cell studies.  means analyses huge power detect even subtle difference expression cell clusters.  cluster-specific marker genes often discovered handful samples, dreamlet package applicable 100s 1000s subjects. method indicates regression method used test differential expression sets cell clusters.  Since biosample usually represented sets cell clusters, method determines paired design modeled.   method = \"mixed\", sample modeled random effect: ~ (1|Sample) + .... method = \"fixed\", sample modeled fixed effect: ~ Sample + .... method = \"none\", pairing ignored. collapse=TRUE (default) combine cell clusters within test set, separately baseline set, estimate coefficient indicating differential expression sets given gene.  collapse=FALSE, estimate coefficient cell type identify differential expression using linear contrasts variancePartition::makeContrastsDream().","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # Evaluate the specificity of each gene for each cluster df_cts <- cellTypeSpecificity(pb)  # compare first two assays (i.e. cell types) ct.pairs <- c(\"B cells\", \"CD14+ Monocytes\")  # run comparison # use method = 'fixed' here since it is faster fit <- dreamletCompareClusters(pb, ct.pairs, method = \"fixed\") #> Initial filtering... #> Filtering for paired samples...  # Extract top 10 differentially expressed genes # The coefficient 'compare' is the value logFC between test and baseline: # compare = cellClustertest - cellClusterbaseline res <- topTable(fit, coef = \"compare\", number = 10)  # genes with highest logFC are most highly expressed in # B cells compared to CD14+ Monocytes head(res) #>             logFC   AveExpr         t      P.Value    adj.P.Val        B #> FTL     -4.559570 14.265849 -24.93241 4.100814e-11 1.394120e-08 16.14202 #> LGALS3  -4.815545  9.879829 -24.76997 4.404803e-11 1.394120e-08 15.89842 #> S100A10 -4.551858  9.950588 -21.69418 1.871963e-10 3.822981e-08 14.56393 #> S100A11 -4.687559 10.362616 -21.19151 2.415786e-10 3.822981e-08 14.33464 #> CD63    -3.892389 10.337664 -20.05814 4.388171e-10 5.555424e-08 13.77198 #> ANXA5   -3.674191 10.097965 -19.29905 6.665193e-10 7.031778e-08 13.35939  dreamlet::plotHeatmap(df_cts, genes = rownames(res)[1:5])   # compare B cells versus the rest of the cell types # 'rest' is a keyword indicating all other assays fit <- dreamletCompareClusters(pb, c(\"B cells\", \"rest\"), method = \"fixed\") #> Initial filtering... #> Filtering for paired samples...  res <- topTable(fit, coef = \"compare\", number = 10)  # genes with highest logFC are most highly expressed in # B cells compared to all others head(res) #>             logFC   AveExpr         t      P.Value    adj.P.Val        B #> FTL     -3.600925 13.872811 -33.28366 1.901955e-15 1.690838e-12 25.84574 #> FTH1    -2.466503 15.497594 -28.32886 2.047580e-14 8.003456e-12 23.27441 #> ANXA1   -5.766836  8.777334 -27.80028 2.700829e-14 8.003456e-12 22.77952 #> LGALS3  -3.906317  9.492690 -21.89782 8.854358e-13 1.820012e-10 19.63566 #> S100A11 -4.195517 10.182616 -21.68039 1.023629e-12 1.820012e-10 19.53932 #> S100A10 -3.753134  9.613494 -20.50358 2.299888e-12 3.407668e-10 18.72582  # Get genes upregulated in B cells idx <- with(res, which(logFC > 0))[1:5] dreamlet::plotHeatmap(df_cts, genes = rownames(res)[idx])   lst <- list(   test = c(\"CD14+ Monocytes\", \"FCGR3A+ Monocytes\"),   baseline = c(\"CD4 T cells\", \"CD8 T cells\") )  # compare 2 monocyte clusters to two T cell clusters fit <- dreamletCompareClusters(pb, lst, method = \"fixed\") #> Initial filtering... #> Filtering for paired samples...  res <- topTable(fit, coef = \"compare\", number = 10)  # genes with highest logFC are most highly expressed in # monocytes compared to T cells head(res) #>                            logFC   AveExpr        t      P.Value    adj.P.Val #> FTL                     5.195892 13.603905 53.09308 1.337149e-12 1.159308e-09 #> TIMP1                   6.214741 11.076844 41.00811 1.371256e-11 5.944395e-09 #> HLA-DRA_ENSG00000204287 5.674527  9.655697 32.33465 1.161417e-10 3.356496e-08 #> S100A4                  4.514156  9.249845 28.04576 4.159764e-10 7.937568e-08 #> PSAP                    3.948238  9.342828 27.30755 5.281552e-10 7.937568e-08 #> LGALS1                  4.544995  9.290447 27.18795 5.493127e-10 7.937568e-08 #>                                B #> FTL                     19.61451 #> TIMP1                   17.20190 #> HLA-DRA_ENSG00000204287 15.06115 #> S100A4                  13.95058 #> PSAP                    13.73411 #> LGALS1                  13.66478  # Get genes upregulated in monocytes idx <- with(res, which(logFC > 0))[1:5] dreamlet::plotHeatmap(df_cts, genes = rownames(res)[idx])"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletProcessedData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class dreamletProcessedData — dreamletProcessedData-class","title":"Class dreamletProcessedData — dreamletProcessedData-class","text":"Class dreamletProcessedData","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletProcessedData-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class dreamletProcessedData — dreamletProcessedData-class","text":"none none","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class dreamletResult — dreamletResult-class","title":"Class dreamletResult — dreamletResult-class","text":"Class dreamletResult stores results produced dreamlet() give standard interface downstream analysis Class dreamletResult stores results produced dreamlet() give standard interface downstream analysis","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamletResult-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class dreamletResult — dreamletResult-class","text":"none none","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet_mash_result-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class dreamlet_mash_result — dreamlet_mash_result-class","title":"Class dreamlet_mash_result — dreamlet_mash_result-class","text":"Class dreamlet_mash_result","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dreamlet_mash_result-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class dreamlet_mash_result — dreamlet_mash_result-class","text":"dreamlet_mash_result class","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dropRedundantTerms.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop redundant terms from the model — dropRedundantTerms","title":"Drop redundant terms from the model — dropRedundantTerms","text":"Detect co-linear fixed effects drop last one","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dropRedundantTerms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop redundant terms from the model — dropRedundantTerms","text":"","code":"dropRedundantTerms(formula, data, tol = 0.001)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dropRedundantTerms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop redundant terms from the model — dropRedundantTerms","text":"formula original formula data data.frame tol tolerance test difference correlation 1 -1","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dropRedundantTerms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop redundant terms from the model — dropRedundantTerms","text":"formula, possibly terms omitted.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/dropRedundantTerms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop redundant terms from the model — dropRedundantTerms","text":"","code":"# Valid formula dropRedundantTerms(~ group + extra, sleep) #> ~group + extra #> <environment: 0x7fd5e02c3358>"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/equalFormulas.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if two formulas are equal — equalFormulas","title":"Check if two formulas are equal — equalFormulas","text":"Check two formulas equal evaluating formulas extracting terms","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/equalFormulas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if two formulas are equal — equalFormulas","text":"","code":"equalFormulas(formula1, formula2)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/equalFormulas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if two formulas are equal — equalFormulas","text":"formula1 first formula formula2 second formula","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/equalFormulas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if two formulas are equal — equalFormulas","text":"boolean value indciating formulas equivalent","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/equalFormulas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if two formulas are equal — equalFormulas","text":"","code":"# These formulas are equivalent formula1 <- ~ Size + 1 formula2 <- ~ 1 + Size  dreamlet:::equalFormulas(formula1, formula2) #> [1] TRUE"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extract-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","title":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","text":"Subset brackets Subset brackets","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extract-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","text":"","code":"# S4 method for dreamletResult,ANY,ANY,ANY [(x, i)  # S4 method for dreamletProcessedData,ANY,ANY,ANY [(x, i)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extract-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","text":"x dreamletProcessedData object indeces extract","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extract-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","text":"entries stored specified index","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extractData-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract normalized expression and colData — extractData","title":"Extract normalized expression and colData — extractData","text":"Extract normalized expression colData Extract normalized (.e. log2 CPM) expression colData dreamletProcessedData","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extractData-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract normalized expression and colData — extractData","text":"","code":"extractData(x, assay, cols = colnames(colData(x)), genes = rownames(x))  # S4 method for dreamletProcessedData,character extractData(   x,   assay,   cols = colnames(colData(x)),   genes = rownames(assay(x, assay)) )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extractData-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract normalized expression and colData — extractData","text":"x dreamletProcessedData object assay assay extract cols columns colData(x) extract.  defaults columns colnames(colData(x)) genes genes extract assay(x, assay)$E. defaults genes rownames(x)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extractData-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract normalized expression and colData — extractData","text":"data.frame DataFrame merged expression colData","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/extractData-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract normalized expression and colData — extractData","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.22 secs #>   CD14+ Monocytes... #> 0.36 secs #>   CD4 T cells... #> 0.26 secs #>   CD8 T cells... #> 0.16 secs #>   FCGR3A+ Monocytes... #> 0.36 secs  # Extract all: # Extract tibble of colData merged with expression. # variables and genes are stored as columns, samples as rows df_merge <- extractData(res.proc, \"B cells\")  # first few columns df_merge[, 1:6] #> # A tibble: 4 × 6 #>   Row.names group_id ISG15 AURKAIP1 MRPL20 SSU72 #>   <I<chr>>  <fct>    <dbl>    <dbl>  <dbl> <dbl> #> 1 ctrl101   ctrl      7.02     7.80   7.02  8.16 #> 2 ctrl107   ctrl      7.29     8.35   7.29  8.55 #> 3 stim101   stim     13.4      8.28   7.58  7.94 #> 4 stim107   stim     13.2      7.79   6.85  8.43  # Extract subset: df_merge <- extractData(res.proc, \"B cells\", cols = \"group_id\", genes = c(\"SSU72\", \"U2AF1\"))  df_merge #> # A tibble: 4 × 4 #>   Row.names group_id SSU72 U2AF1 #>   <I<chr>>  <fct>    <dbl> <dbl> #> 1 ctrl101   ctrl      8.16  9.19 #> 2 ctrl107   ctrl      8.55  9.32 #> 3 stim101   stim      7.94  9.02 #> 4 stim107   stim      8.43  9.08  # Boxplot of expression boxplot(SSU72 ~ group_id, df_merge)  #"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/fitVarPart.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance Partition analysis for each assay — fitVarPart","title":"Variance Partition analysis for each assay — fitVarPart","text":"Perform Variance Partition analysis  assay","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/fitVarPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance Partition analysis for each assay — fitVarPart","text":"","code":"fitVarPart(   x,   formula,   data = colData(x),   assays = assayNames(x),   quiet = FALSE,   BPPARAM = SerialParam(),   ... )  # S4 method for dreamletProcessedData fitVarPart(   x,   formula,   data = colData(x),   assays = assayNames(x),   quiet = FALSE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/fitVarPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance Partition analysis for each assay — fitVarPart","text":"x SingleCellExperiment dreamletProcessedData object formula regression formula differential expression analysis data metadata used regression formula assays array assay names include analysis. Defaults assayNames(x) quiet show messages BPPARAM parameters parallel evaluation ... arguments passed dream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/fitVarPart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance Partition analysis for each assay — fitVarPart","text":"Object class vpDF inheriting DataFrame storing variance fractions gene cell type.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/fitVarPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance Partition analysis for each assay — fitVarPart","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.21 secs #>   CD14+ Monocytes... #> 0.33 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.33 secs  # variance partitioning analysis vp <- fitVarPart(res.proc, ~group_id) #>   B cells... #> 1.9 secs #>   CD14+ Monocytes... #> 2.6 secs #>   CD4 T cells... #> 2 secs #>   CD8 T cells... #> 1.4 secs #>   FCGR3A+ Monocytes... #> 2.6 secs #>   # Show variance fractions at the gene-level for each cell type genes <- vp$gene[2:4] plotPercentBars(vp[vp$gene %in% genes, ])   # Summarize variance fractions genome-wide for each cell type plotVarPart(vp)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getExprGeneNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of expressed genes for each assay — getExprGeneNames","title":"Get list of expressed genes for each assay — getExprGeneNames","text":"Get list expressed genes assay using filters processAssays().","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getExprGeneNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of expressed genes for each assay — getExprGeneNames","text":"","code":"getExprGeneNames(   sceObj,   assays = assayNames(sceObj),   min.cells = 5,   min.count = 5,   min.samples = 4,   min.prop = 0.4,   min.total.count = 15,   normalize.method = \"TMM\" )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getExprGeneNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of expressed genes for each assay — getExprGeneNames","text":"sceObj SingleCellExperiment object assays array assay names include analysis. Defaults assayNames(sceObj) min.cells minimum number observed cells sample included analysis min.count minimum number reads gene considered expressed sample.  Passed edgeR::filterByExpr min.samples minimum number samples passing cutoffs cell cluster retained min.prop minimum proportion retained samples non-zero counts gene retained min.total.count minimum total count required per gene inclusion","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getExprGeneNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of expressed genes for each assay — getExprGeneNames","text":"","code":"library(muscat)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   sample_id = \"sample_id\",   cluster_id = \"cluster_id\",   verbose = FALSE )  # Gene expressed genes for each cell type geneList = getExprGeneNames(pb)  # Create precision weights for pseudobulk # By default, weights are set to cell count, # which is the default in processAssays() # even when no weights are specified weightsList <- pbWeights(example_sce,   sample_id = \"sample_id\",   cluster_id = \"cluster_id\",   geneList = geneList ) #> Processing: B cells #>   Computing library sizes... #>   Processing samples... #> Processing: CD14+ Monocytes #>   Computing library sizes... #>   Processing samples... #> Processing: CD4 T cells #>   Computing library sizes... #>   Processing samples... #> Processing: CD8 T cells #>   Computing library sizes... #>   Processing samples... #> Processing: FCGR3A+ Monocytes #>   Computing library sizes... #>   Processing samples...  # voom-style normalization using initial weights res.proc <- processAssays(pb, ~group_id, weightsList = weightsList) #>   B cells... #> 0.24 secs #>   CD14+ Monocytes... #> 0.35 secs #>   CD4 T cells... #> 0.3 secs #>   CD8 T cells... #> 0.14 secs #>   FCGR3A+ Monocytes... #> 0.39 secs"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getTreat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"Test coefficient different specified value","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getTreat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"","code":"# S4 method for dreamletResult getTreat(fit, lfc = log2(1.2), coef = NULL, number = 10, sort.by = \"p\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getTreat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"fit dreamletResult object lfc minimum log2-fold-change changes considered scientifically meaningful coef coefficient test number number genes return sort.column sort ","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getTreat-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"DataFrame storing hypothesis test gene cell type","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/getTreat-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.23 secs #>   CD14+ Monocytes... #> 0.36 secs #>   CD4 T cells... #> 0.28 secs #>   CD8 T cells... #> 0.15 secs #>   FCGR3A+ Monocytes... #> 0.33 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.18 secs #>   CD14+ Monocytes... #> 0.24 secs #>   CD4 T cells... #> 0.2 secs #>   CD8 T cells... #> 0.14 secs #>   FCGR3A+ Monocytes... #> 0.23 secs  # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR getTreat(res.dl, coef = \"group_idstim\", number = 3) #> DataFrame with 3 rows and 7 columns #>               assay     logFC   AveExpr         t     P.Value   adj.P.Val #>         <character> <numeric> <numeric> <numeric>   <numeric>   <numeric> #> 1           B cells   6.17666   10.2306   18.2945 1.75997e-14 7.90401e-11 #> 2 FCGR3A+ Monocytes   5.27610   11.9149   26.0100 9.11216e-14 2.04613e-10 #> 3 FCGR3A+ Monocytes   7.43146   11.1948   22.7202 6.79966e-13 9.94753e-10 #>           B #>   <numeric> #> 1   23.2102 #> 2   22.0773 #> 3   19.7485"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/meta_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta-analysis across multiple studies — meta_analysis","title":"Meta-analysis across multiple studies — meta_analysis","text":"Meta-analysis across multiple studies","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/meta_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta-analysis across multiple studies — meta_analysis","text":"","code":"meta_analysis(   x,   method = \"FE\",   group = c(\"ID\", \"assay\"),   control = list(maxiter = 2000) )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/meta_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta-analysis across multiple studies — meta_analysis","text":"x data.frame rbind'ing results across genes, cell types datasets method meta-analysis method.  Values fed metafor::rma(), except 'RE2C' calls remaCor::RE2C(). group colums x group .  results dreamlet::topTable(), results aggregrated gene cell type (.e. 'ID' 'assay').  x function, argument allows function group results properly control passed rma(..,control)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/meta_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Meta-analysis across multiple studies — meta_analysis","text":"'FE': fixed effects meta-analysis 'REML': random effects meta-analysis 'RE2C': joint testing fixed random effects","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/meta_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meta-analysis across multiple studies — meta_analysis","text":"","code":"library(dreamlet) library(muscat)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization # just 'CD14+ Monocytes' for speed res.proc <- processAssays(pb, ~group_id, assays = \"CD14+ Monocytes\") #>   CD14+ Monocytes... #> 0.38 secs  # dreamlet res.dl <- dreamlet(res.proc, ~group_id) #>   CD14+ Monocytes... #> 0.24 secs  tab1 <- topTable(res.dl, coef = \"group_idstim\", number = Inf) tab1$Dataset <- \"1\"  # Results from a second cohort # Here, just a copy of the same results for simplicity tab2 <- tab1 tab2$Dataset <- \"2\"  # rbind tab_combined <- rbind(tab1, tab2)  # Perform fixed effects meta-analysis res <- meta_analysis(tab_combined, method = \"FE\")  res[1:3, ] #> # A tibble: 3 × 8 #> # Groups:   ID, assay [3] #>   ID     assay           estimate std.error statistic  p.value n.studies method #>   <chr>  <chr>              <dbl>     <dbl>     <dbl>    <dbl>     <int> <chr>  #> 1 ABRACL CD14+ Monocytes    0.631     0.236      2.68 7.35e- 3         2 FE     #> 2 ACOT9  CD14+ Monocytes    2.65      0.199     13.3  2.17e-40         2 FE     #> 3 ACP5   CD14+ Monocytes   -0.220     0.140     -1.57 1.17e- 1         2 FE     #"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/metadata-dreamletProcessedData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","title":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","text":"Extract metadata dreamletProcessedData","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/metadata-dreamletProcessedData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","text":"","code":"# S4 method for dreamletProcessedData metadata(x)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/metadata-dreamletProcessedData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","text":"x dreamletProcessedData object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/metadata-dreamletProcessedData-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","text":"object metadata field","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate outlier detection — outlier","title":"Multivariate outlier detection — outlier","text":"Detect multivariante outliers using Mahalanobis distance using mean covariance estimated either standard robust methods.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate outlier detection — outlier","text":"","code":"outlier(data, robust = FALSE, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate outlier detection — outlier","text":"data matrix data robust use robust covariance method, defaults FALSE ... arguments passed MASS::cov.rob()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate outlier detection — outlier","text":"data.frame storing chisq z-score entry indicating deviation mean.  z-score computed evaluating p-value chisq statistic converting z-score","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate outlier detection — outlier","text":"distance follow chisq distrubtion null standard method mean covariance.  approximate robust method used.  use qchisq(p = 0.999 , df = k) get cutoff keep 99.9% samples null data k=2 columns.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate outlier detection — outlier","text":"","code":"data <- matrix(rnorm(200), 100, 2)  res <- outlier(data)  res[1:4,] #>       chisq         z      pValue #> 1 9.4875995 2.6234076 0.008705504 #> 2 5.2745607 1.8019351 0.071555611 #> 3 2.5090378 1.0686819 0.285213025 #> 4 0.3022142 0.1766853 0.859755594"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlierByAssay.html","id":null,"dir":"Reference","previous_headings":"","what":"Outlier analysis for each assay — outlierByAssay","title":"Outlier analysis for each assay — outlierByAssay","text":"Compute outlier score sample assay using outlier()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlierByAssay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outlier analysis for each assay — outlierByAssay","text":"","code":"outlierByAssay(   object,   assays = assayNames(object),   nPC = 2,   robust = FALSE,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlierByAssay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outlier analysis for each assay — outlierByAssay","text":"object dreamletProcessedData processAssays() assays assays / cell types analyze nPC number PCs uses outlier score outlier() robust use robust covariance method, defaults FALSE ... arguments passed MASS::cov.rob()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlierByAssay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outlier analysis for each assay — outlierByAssay","text":"ID:sample identifier assay:specify assay PCs:principal components chisq:mahalanobis distance distributed chisq(k) k = nPC data multivariate gaussian z:z-score corresponding chisq distance","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/outlierByAssay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outlier analysis for each assay — outlierByAssay","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.21 secs #>   CD14+ Monocytes... #> 0.35 secs #>   CD4 T cells... #> 0.29 secs #>   CD8 T cells... #> 0.14 secs #>   FCGR3A+ Monocytes... #> 0.32 secs  # Compute PCs and outlier scores outlierByAssay( res.proc, c(\"B cells\", \"CD14+ Monocytes\")) #> # A tibble: 8 × 9 #>   ID      assay              PC1    PC2    PC3      PC4 chisq     z pValue #>   <chr>   <chr>            <dbl>  <dbl>  <dbl>    <dbl> <dbl> <dbl>  <dbl> #> 1 ctrl101 B cells          -9.09  17.5   12.9  7.22e-14  1.55 0.737  0.461 #> 2 ctrl107 B cells         -23.7  -10.0   -9.26 7.25e-14  1.67 0.782  0.434 #> 3 stim101 B cells          18.1    9.20 -14.6  7.19e-14  1.32 0.649  0.516 #> 4 stim107 B cells          14.7  -16.7   11.0  7.27e-14  1.46 0.703  0.482 #> 5 ctrl101 CD14+ Monocytes -26.3   10.9   11.5  7.54e-14  1.85 0.848  0.397 #> 6 ctrl107 CD14+ Monocytes -19.8  -15.0  -11.3  7.32e-14  1.10 0.557  0.578 #> 7 stim101 CD14+ Monocytes  19.2   15.5  -11.1  7.43e-14  1.89 0.861  0.389 #> 8 stim107 CD14+ Monocytes  26.9  -11.4   10.9  7.36e-14  1.16 0.585  0.559"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/pbWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute precision weights for pseudobulk — pbWeights","title":"Compute precision weights for pseudobulk — pbWeights","text":"Compute precision weights pseudobulk using delta method approximate variance log2 counts per million considering variation number cells gene expression variance across cells within sample. default, used number cells; specified use delta method.  Note processAssays() uses number cells weights weights specificed","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/pbWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute precision weights for pseudobulk — pbWeights","text":"","code":"pbWeights(   sce,   sample_id,   cluster_id,   geneList = NULL,   method = c(\"delta\", \"ncells\"),   shrink = TRUE,   prior.count = 0.5,   maxRatio = 20,   h5adBlockSizes = 1e+09,   details = FALSE,   verbose = TRUE )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/pbWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute precision weights for pseudobulk — pbWeights","text":"sce SingleCellExperiment counts(sce) stores raw count data single cell level sample_id character string specifying variable use sample id cluster_id character string specifying variable use cluster id geneList list genes included cell type method select method compute precision weights.  'delta' use delta method based normal approximation negative binomial model, slower can increase power. 'ncells' use number cells, faster; Subsequent arguments ignored. Included testing shrink Defaults TRUE. Use empirical Bayes variance shrinkage limma shrink estimates expression variance across cells within sample prior.count Defaults 0.5. Count added observation pseudobulk level.  scaled number cells added cell level maxRatio computing precision reciprocal variance 1/(x+tau) select tau maximum ratio largest smallest precision h5adBlockSizes set automatic block size block size (bytes) DelayedArray read H5AD file.  Larger values use memory faster. details include data.frame cell-level statistics attr(., \"details\") verbose Show messages, defaults TRUE","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/pbWeights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute precision weights for pseudobulk — pbWeights","text":"","code":"library(muscat)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   sample_id = \"sample_id\",   cluster_id = \"cluster_id\",   verbose = FALSE )  # Gene expressed genes for each cell type geneList = getExprGeneNames(pb)  # Create precision weights for pseudobulk # By default, weights are set to cell count, # which is the default in processAssays() # even when no weights are specified weightsList <- pbWeights(example_sce,   sample_id = \"sample_id\",   cluster_id = \"cluster_id\",   geneList = geneList ) #> Processing: B cells #>   Computing library sizes... #>   Processing samples... #> Processing: CD14+ Monocytes #>   Computing library sizes... #>   Processing samples... #> Processing: CD4 T cells #>   Computing library sizes... #>   Processing samples... #> Processing: CD8 T cells #>   Computing library sizes... #>   Processing samples... #> Processing: FCGR3A+ Monocytes #>   Computing library sizes... #>   Processing samples...  # voom-style normalization using initial weights res.proc <- processAssays(pb, ~group_id, weightsList = weightsList) #>   B cells... #> 0.24 secs #>   CD14+ Monocytes... #> 0.34 secs #>   CD4 T cells... #> 0.25 secs #>   CD8 T cells... #> 0.16 secs #>   FCGR3A+ Monocytes... #> 0.37 secs"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotBeeswarm.html","id":null,"dir":"Reference","previous_headings":"","what":"Beeswarm plot of effect sizes for each assay — plotBeeswarm","title":"Beeswarm plot of effect sizes for each assay — plotBeeswarm","text":"Beeswarm plot effect sizes assay, colored sign FDR","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotBeeswarm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beeswarm plot of effect sizes for each assay — plotBeeswarm","text":"","code":"plotBeeswarm(res.dl, coef, fdr.range = 4, assays = assayNames(res.dl))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotBeeswarm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beeswarm plot of effect sizes for each assay — plotBeeswarm","text":"res.dl dreamletResult object dreamlet() coef coefficient name fed topTable() fdr.range range coloring FDR assays assays plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotBeeswarm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beeswarm plot of effect sizes for each assay — plotBeeswarm","text":"ggplot2 logFC assay","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotBeeswarm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beeswarm plot of effect sizes for each assay — plotBeeswarm","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.23 secs #>   CD14+ Monocytes... #> 0.35 secs #>   CD4 T cells... #> 0.29 secs #>   CD8 T cells... #> 0.16 secs #>   FCGR3A+ Monocytes... #> 0.32 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.17 secs #>   CD14+ Monocytes... #> 0.21 secs #>   CD4 T cells... #> 0.2 secs #>   CD8 T cells... #> 0.11 secs #>   FCGR3A+ Monocytes... #> 0.21 secs  # Beeswarm plot of effect sizes for each assay, # colored by sign and FDR plotBeeswarm(res.dl, \"group_idstim\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotCellComposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of cell compositions — plotCellComposition","title":"Bar plot of cell compositions — plotCellComposition","text":"Bar plot cell compositions","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotCellComposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of cell compositions — plotCellComposition","text":"","code":"plotCellComposition(obj, col, width = NULL)  # S4 method for SingleCellExperiment plotCellComposition(obj, col, width = NULL)  # S4 method for matrix plotCellComposition(obj, col, width = NULL)  # S4 method for data.frame plotCellComposition(obj, col, width = NULL)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotCellComposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of cell compositions — plotCellComposition","text":"obj matrix [cells] x [samples] SingleCellExperiment aggregateToPseudoBulk col array colors.  missing, use default colors.  names(col) arrayNames(obj), colors assigned assay name#' width specify width bars","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotCellComposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot of cell compositions — plotCellComposition","text":"Barplot showing cell fractions","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotCellComposition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar plot of cell compositions — plotCellComposition","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # show cell composition bar plots plotCellComposition(pb)   # extract cell counts df_cellCounts <- cellCounts(pb)  # show cell composition bar plots plotCellComposition(df_cellCounts)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotForest-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest plot — plotForest","title":"Forest plot — plotForest","text":"Forest plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotForest-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest plot — plotForest","text":"","code":"plotForest(x, gene, coef, ...)  # S4 method for dreamletResult plotForest(x, gene, coef, assays = names(x), ylim = NULL)  # S4 method for dreamlet_mash_result plotForest(x, gene, coef, assays = colnames(x$logFC.original), ylim = NULL)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotForest-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest plot — plotForest","text":"x result dreamlet gene gene show results coef coefficient test topTable ... arguments assays array assays plot ylim limits y axis","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotForest-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest plot — plotForest","text":"Plot showing effect sizes","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotForest-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest plot — plotForest","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.23 secs #>   CD14+ Monocytes... #> 0.36 secs #>   CD4 T cells... #> 0.26 secs #>   CD8 T cells... #> 0.15 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.16 secs #>   CD14+ Monocytes... #> 0.21 secs #>   CD4 T cells... #> 0.17 secs #>   CD8 T cells... #> 0.11 secs #>   FCGR3A+ Monocytes... #> 0.26 secs  # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # Show estimated log fold change with in each cell type plotForest(res.dl, gene = \"ISG20\", coef = \"group_idstim\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotGeneHeatmap-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of genes and assays — plotGeneHeatmap","title":"Heatmap of genes and assays — plotGeneHeatmap","text":"Heatmap genes assays","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotGeneHeatmap-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of genes and assays — plotGeneHeatmap","text":"","code":"plotGeneHeatmap(   x,   coef,   genes,   assays = assayNames(x),   zmax = NULL,   transpose = FALSE )  # S4 method for dreamletResult plotGeneHeatmap(   x,   coef,   genes,   assays = assayNames(x),   zmax = NULL,   transpose = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotGeneHeatmap-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of genes and assays — plotGeneHeatmap","text":"x dreamletResult object coef column number column name specifying coefficient contrast linear model interest. genes array genes include plot assays array assay names include analysis. Defaults assayNames(x) zmax maximum z.std value transpose (default: FALSE) Use `coord_flip()` flip axies","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotGeneHeatmap-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of genes and assays — plotGeneHeatmap","text":"Heatmap plot specified genes assays Heatmap plot specified genes assays","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotGeneHeatmap-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of genes and assays — plotGeneHeatmap","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.21 secs #>   CD14+ Monocytes... #> 0.35 secs #>   CD4 T cells... #> 0.25 secs #>   CD8 T cells... #> 0.14 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.17 secs #>   CD14+ Monocytes... #> 0.23 secs #>   CD4 T cells... #> 0.17 secs #>   CD8 T cells... #> 0.11 secs #>   FCGR3A+ Monocytes... #> 0.21 secs  # Heatmap for specified subset of genes plotGeneHeatmap(res.dl, coef = \"group_idstim\", genes = rownames(pb)[1:15]) #> Warning: Removed 17 rows containing missing values (`geom_text()`)."},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotHeatmap-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap — plotHeatmap","title":"Plot heatmap — plotHeatmap","text":"Plot heatmap","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotHeatmap-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap — plotHeatmap","text":"","code":"plotHeatmap(   x,   genes = rownames(x),   color = \"darkblue\",   assays = colnames(x),   useFillScale = TRUE )  # S4 method for cellSpecificityValues plotHeatmap(   x,   genes = rownames(x),   color = \"darkblue\",   assays = colnames(x),   useFillScale = TRUE )  # S4 method for data.frame plotHeatmap(   x,   genes = rownames(x),   color = \"darkblue\",   assays = colnames(x),   useFillScale = TRUE )  # S4 method for matrix plotHeatmap(   x,   genes = rownames(x),   color = \"darkblue\",   assays = colnames(x),   useFillScale = TRUE )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotHeatmap-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap — plotHeatmap","text":"x fractions gene genes name genes plot color color heatmap assays array assays plot useFillScale default TRUE. add scale_fill_gradient() plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotHeatmap-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap — plotHeatmap","text":"heatmap","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotHeatmap-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot heatmap — plotHeatmap","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # Compute cell type specificity of each gene df <- cellTypeSpecificity(pb)  # For each cell type, get most specific gene genes <- rownames(df)[apply(df, 2, which.max)]  # heatmap of 5 genes that are most cell type specific dreamlet::plotHeatmap(df, genes = genes)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PCA of gene expression for an assay — plotPCA","title":"Plot PCA of gene expression for an assay — plotPCA","text":"Compute PCA gene expression assay, plot samples coloring outlier score","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PCA of gene expression for an assay — plotPCA","text":"","code":"# S4 method for dreamletProcessedData plotPCA(   object,   assays = assayNames(object),   nPC = 2,   robust = FALSE,   ...,   maxOutlierZ = 20,   nrow = 2,   size = 2 )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PCA of gene expression for an assay — plotPCA","text":"object dreamletProcessedData processAssays() assays assays / cell types analyze nPC number PCs uses outlier score outlier() robust use robust covariance method, defaults FALSE ... arguments passed MASS::cov.rob() maxOutlierZ cap outlier z-scores value plotting maintain consistent color scale nrow number rows plot size size passed geom_point()","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot PCA of gene expression for an assay — plotPCA","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.2 secs #>   CD14+ Monocytes... #> 0.32 secs #>   CD4 T cells... #> 0.23 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.3 secs  # PCA to identify outliers plotPCA( res.proc, \"CD14+ Monocytes\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPercentBars-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of variance fractions — plotPercentBars,vpDF-method","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"Bar plot variance fractions subset genes","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"","code":"# S4 method for vpDF plotPercentBars(   x,   col = c(ggColorHue(ncol(x) - 3), \"grey85\"),   genes = unique(x$gene),   width = NULL,   ncol = 3,   ... )  # S4 method for cellSpecificityValues plotPercentBars(   x,   col = ggColorHue(ncol(x)),   genes = rownames(x),   width = NULL,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"x vpDF object returned fitVarPart() col color bars variable genes name genes plot width specify width bars ncol number columns plot ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"Bar plot showing variance fractions gene","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.2 secs #>   CD14+ Monocytes... #> 0.32 secs #>   CD4 T cells... #> 0.25 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.29 secs  # variance partitioning analysis vp <- fitVarPart(res.proc, ~group_id) #>   B cells... #> 2.1 secs #>   CD14+ Monocytes... #> 2.7 secs #>   CD4 T cells... #> 2.2 secs #>   CD8 T cells... #> 1.3 secs #>   FCGR3A+ Monocytes... #> 3.2 secs #>   # Show variance fractions at the gene-level for each cell type plotPercentBars(vp, genes = vp$gene[2:4], ncol = 2)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotProjection.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot 2D projection — plotProjection","title":"Plot 2D projection — plotProjection","text":"Plot 2D projection (.e. UMAP, tSNE) millions cells efficiently","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotProjection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot 2D projection — plotProjection","text":"","code":"plotProjection(   sce,   type,   annotation,   pointsize = 0,   pixels = c(512, 512),   legend.position = \"none\",   text = TRUE,   order )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotProjection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot 2D projection — plotProjection","text":"sce SingleCellExperiment type field reducedDims(sce) plot annotation column colData(sce) annotate cell pointsize Radius rasterized point. Use 0 single pixels(fastest). pixels Vector X Y resolution raster, default c(512,512) legend.position legend.position: position legends (\"none\", \"left\", \"right\", \"bottom\", \"top\", two-element numeric vector) text show annotation text. Default TRUE order specify order levels annotation","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotProjection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot 2D projection — plotProjection","text":"ggplot2 plot projection","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotProjection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot 2D projection — plotProjection","text":"Uses scattermore::geom_scattermore() plot millions points efficiently","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotProjection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot 2D projection — plotProjection","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  plotProjection(example_sce, \"TSNE\", \"cluster_id\", 1)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVarPart-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Violin plot of variance fractions — plotVarPart,DataFrame-method","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"Violin plot variance fraction gene variable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVarPart-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"","code":"# S4 method for DataFrame plotVarPart(   obj,   col = c(ggColorHue(base::ncol(obj) - 3), \"grey85\"),   label.angle = 20,   main = \"\",   ylab = \"\",   convertToPercent = TRUE,   ncol = 3,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVarPart-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"obj varParFrac object returned fitExtractVarPart extractVarPart col vector colors label.angle angle labels x-axis main title plot ylab text y-axis convertToPercent multiply fractions 100 convert percent values ncol number columns plot ... additional arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVarPart-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"Violin plot showing variance fractions","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVarPart-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.21 secs #>   CD14+ Monocytes... #> 0.33 secs #>   CD4 T cells... #> 0.27 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # variance partitioning analysis vp <- fitVarPart(res.proc, ~group_id) #>   B cells... #> 2 secs #>   CD14+ Monocytes... #> 3.2 secs #>   CD4 T cells... #> 2.4 secs #>   CD8 T cells... #> 1.3 secs #>   FCGR3A+ Monocytes... #> 2.9 secs #>   # Summarize variance fractions genome-wide for each cell type plotVarPart(vp)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotViolin-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Violins — plotViolin","title":"Plot Violins — plotViolin","text":"Plot Violins","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotViolin-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Violins — plotViolin","text":"","code":"plotViolin(x, ...)  # S4 method for cellSpecificityValues plotViolin(x, assays = colnames(x))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotViolin-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Violins — plotViolin","text":"x fractions gene ... arguments assays array assays plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotViolin-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Violins — plotViolin","text":"Violin plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotViolin-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Violins — plotViolin","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # Compute cell type specificity of each gene df <- cellTypeSpecificity(pb)  # Violin plot of specificity scores for each cell type # Dashed line indicates genes that are equally expressed # across all cell types.  For K cell types, this is 1/K plotViolin(df)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVolcano-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano plot for each cell type — plotVolcano","title":"Volcano plot for each cell type — plotVolcano","text":"Volcano plot cell type","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVolcano-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano plot for each cell type — plotVolcano","text":"","code":"plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 9.99999999999997e-311,   cutoff = 0.05,   ncol = 3,   ... )  # S4 method for list plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 9.99999999999997e-311,   cutoff = 0.05,   ncol = 3,   assays = names(x),   ... )  # S4 method for MArrayLM plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 9.99999999999997e-311,   cutoff = 0.05,   ncol = 3,   ... )  # S4 method for dreamlet_mash_result plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 1e-16,   cutoff = 0.05,   ncol = 3,   assays = colnames(x$logFC.original),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVolcano-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano plot for each cell type — plotVolcano","text":"x result dreamlet coef coefficient test topTable nGenes number genes highlight volcano plot size text size minp minimum p-value show y-axis cutoff adj.P.Val cutoff distinguish significant non-significant genes ncol number columns plot ... arguments passed facet_wrap(). Useful specifying scales = \"free_y\" assays assays plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVolcano-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano plot for each cell type — plotVolcano","text":"Volcano plot cell type","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVolcano-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano plot for each cell type — plotVolcano","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.2 secs #>   CD14+ Monocytes... #> 0.35 secs #>   CD4 T cells... #> 0.23 secs #>   CD8 T cells... #> 0.15 secs #>   FCGR3A+ Monocytes... #> 0.29 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.16 secs #>   CD14+ Monocytes... #> 0.21 secs #>   CD4 T cells... #> 0.17 secs #>   CD8 T cells... #> 0.15 secs #>   FCGR3A+ Monocytes... #> 0.2 secs  # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # volcano plot for each cell type plotVolcano(res.dl, coef = \"group_idstim\") #> Warning: Removed 1 rows containing missing values (`geom_text_repel()`).   # volcano plot for first two cell types plotVolcano(res.dl[1:2], coef = \"group_idstim\") #> Warning: Removed 1 rows containing missing values (`geom_text_repel()`)."},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVoom-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot voom curves from each cell type — plotVoom","title":"Plot voom curves from each cell type — plotVoom","text":"Plot voom curves cell type","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVoom-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot voom curves from each cell type — plotVoom","text":"","code":"plotVoom(x, ncol = 3, alpha = 0.5, ...)  # S4 method for dreamletProcessedData plotVoom(x, ncol = 3, alpha = 0.5, assays = names(x))  # S4 method for EList plotVoom(x, ncol = 3, alpha = 0.5)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVoom-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot voom curves from each cell type — plotVoom","text":"x dreamletProcessedData ncol number columns plot alpha transparency points ... arguments assays assays plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVoom-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot voom curves from each cell type — plotVoom","text":"Plot mean-variance trend","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/plotVoom-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot voom curves from each cell type — plotVoom","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.22 secs #>   CD14+ Monocytes... #> 0.33 secs #>   CD4 T cells... #> 0.25 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # Show mean-variance trend from voom plotVoom(res.proc)   # plot for first two cell types plotVoom(res.proc[1:2])"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/print-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print object — print,dreamletResult-method","title":"Print object — print,dreamletResult-method","text":"Print object Print object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/print-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print object — print,dreamletResult-method","text":"","code":"# S4 method for dreamletResult print(x, ...)  # S4 method for dreamletProcessedData print(x, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/print-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print object — print,dreamletResult-method","text":"x dreamletProcessedData object ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/print-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print object — print,dreamletResult-method","text":"print data stored object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processAssays.html","id":null,"dir":"Reference","previous_headings":"","what":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"raw counts, estimate precision weights using linear mixed model weighting number cells observed sample.  normalized data, weight number cells.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processAssays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"","code":"processAssays(   sceObj,   formula,   assays = assayNames(sceObj),   min.cells = 5,   min.count = 5,   min.samples = 4,   min.prop = 0.4,   isCounts = TRUE,   normalize.method = \"TMM\",   span = \"auto\",   quiet = FALSE,   weightsList = NULL,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processAssays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"sceObj SingleCellExperiment object formula regression formula differential expression analysis assays array assay names include analysis. Defaults assayNames(sceObj) min.cells minimum number observed cells sample included analysis min.count minimum number reads gene considered expressed sample.  Passed edgeR::filterByExpr min.samples minimum number samples passing cutoffs cell cluster retained min.prop minimum proportion retained samples non-zero counts gene retained isCounts logical, indicating data raw counts normalize.method normalization method used calcNormFactors span Lowess smoothing parameter using variancePartition::voomWithDreamWeights() quiet show messages weightsList list storing matrix precision weights cell type. NULL precision weights set 1 BPPARAM parameters parallel evaluation ... arguments passed dream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processAssays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"Object class dreamletProcessedData storing voom-style normalized expression data","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processAssays.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"cell cluster, samples least min.cells retained. clusters least min.samples retained samples kept. Genes retained least min.count reads least min.prop fraction samples.  Current values reasonable defaults, since genes pass cutoffs underpowered differential expression analysis increase multiple testing burden.  values min.cells = 2 min.count = 2 also reasonable include genes analysis. precision weights estimated using residuals fit specified formula.  weights robust changes formula long major variables explaining highest fraction variance included. weightsList NULL, precision weights set 1 internally.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processAssays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.21 secs #>   CD14+ Monocytes... #> 0.33 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.15 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.19 secs #>   CD14+ Monocytes... #> 0.24 secs #>   CD4 T cells... #> 0.17 secs #>   CD8 T cells... #> 0.11 secs #>   FCGR3A+ Monocytes... #> 0.22 secs #"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processOneAssay.html","id":null,"dir":"Reference","previous_headings":"","what":"Processing expression data from assay — processOneAssay","title":"Processing expression data from assay — processOneAssay","text":"raw counts, filter genes samples, estimate precision weights using linear mixed model weighting number cells observed sample.  normalized data, weight number cells","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processOneAssay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processing expression data from assay — processOneAssay","text":"","code":"processOneAssay(   y,   formula,   data,   n.cells,   min.cells = 5,   min.count = 5,   min.samples = 4,   min.prop = 0.4,   min.total.count = 15,   isCounts = TRUE,   normalize.method = \"TMM\",   span = \"auto\",   quiet = TRUE,   weights = NULL,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processOneAssay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processing expression data from assay — processOneAssay","text":"y matrix counts log2 CPM formula regression formula differential expression analysis data metadata used regression formula n.cells array cell count sample min.cells minimum number observed cells sample included analysis min.count minimum number reads gene considered expressed sample.  Passed edgeR::filterByExpr min.samples minimum number samples passing cutoffs cell cluster retained min.prop minimum proportion retained samples non-zero counts min.total.count minimum total count required per gene inclusion isCounts logical, indicating data raw counts normalize.method normalization method used calcNormFactors span Lowess smoothing parameter using variancePartition::voomWithDreamWeights() quiet show messages weights matrix precision weights BPPARAM parameters parallel evaluation ... arguments passed dream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/processOneAssay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Processing expression data from assay — processOneAssay","text":"EList object storing log2 CPM precision weights","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/removeConstantTerms.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove constant terms from formula — removeConstantTerms","title":"Remove constant terms from formula — removeConstantTerms","text":"Remove constant terms formula.  Also remove categorical variables max one example per category","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/removeConstantTerms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove constant terms from formula — removeConstantTerms","text":"","code":"removeConstantTerms(formula, data)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/removeConstantTerms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove constant terms from formula — removeConstantTerms","text":"formula original formula data data.frame","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/removeConstantTerms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove constant terms from formula — removeConstantTerms","text":"formula, possibly terms omitted.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/removeConstantTerms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove constant terms from formula — removeConstantTerms","text":"Adapted MoEClust::drop_constants","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/removeConstantTerms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove constant terms from formula — removeConstantTerms","text":"","code":"# Valid formula removeConstantTerms(~ group + extra, sleep) #> ~group + extra #> <environment: 0x7fd5e57955d0>  # there is no variation in 'group' in this dataset removeConstantTerms(~ group + extra, sleep[1:3, ]) #> ~1 + extra #> <environment: 0x7fd5e57955d0>"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/residuals-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract residuals from dreamletResult — residuals,dreamletResult-method","title":"Extract residuals from dreamletResult — residuals,dreamletResult-method","text":"Extract residuals dreamletResult","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/residuals-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract residuals from dreamletResult — residuals,dreamletResult-method","text":"","code":"# S4 method for dreamletResult residuals(object, y, ..., type = c(\"response\", \"pearson\"))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/residuals-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract residuals from dreamletResult — residuals,dreamletResult-method","text":"object dreamletResult object y dreamletProcessedData object ... arguments type compute either \"response\" residuals \"pearson\" residuals.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/residuals-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract residuals from dreamletResult — residuals,dreamletResult-method","text":"residuals model fit","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/residuals-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract residuals from dreamletResult — residuals,dreamletResult-method","text":"\"response\" residuals typical residuals returned lm(). \"pearson\" residuals divides residual value estimated standard error.  requires specifying y","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/residuals-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract residuals from dreamletResult — residuals,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.2 secs #>   CD14+ Monocytes... #> 0.34 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.16 secs #>   FCGR3A+ Monocytes... #> 0.3 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.18 secs #>   CD14+ Monocytes... #> 0.21 secs #>   CD4 T cells... #> 0.17 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.21 secs  # extract typical residuals for each assay (i.e. cell type) # Return list with entry for each assay with for retained samples and genes resid.lst <- residuals(res.dl)  # Get Pearson residuals: # typical residuals scaled by the standard deviation residPearson.lst <- residuals(res.dl, res.proc, type = \"pearson\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/run_mash.html","id":null,"dir":"Reference","previous_headings":"","what":"Run mash analysis on dreamlet results — run_mash","title":"Run mash analysis on dreamlet results — run_mash","text":"Run mash analysis dreamlet results","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/run_mash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run mash analysis on dreamlet results — run_mash","text":"","code":"run_mash(fit, coefList)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/run_mash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run mash analysis on dreamlet results — run_mash","text":"fit result dreamlet() coefList coefficient analyzed","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/run_mash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run mash analysis on dreamlet results — run_mash","text":"list storing mashr model model original coefficients logFC.original","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/run_mash.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run mash analysis on dreamlet results — run_mash","text":"Apply mashr analysis (Urbut et al. 2019)  joint set coefficients gene cell type.  mashr Bayesian statistical method borrows strength across tests (.e. genes cell types) learning distribution non-zero effects based obesrved logFC standard errors.  method estimates posterior distributions coefficient based observed value genome-wide emprical distribution. mashr previously applied differential expression GTEx data using multiple tissues set donors (Oliva et al. 2020) . single cell data, given gene often sufficiently expressed cell types.  evaluated subsets cell types, coefficient value NA. Since mashr assumes coefficients standard errors every gene cell type pair, entries missing values set coef = 0, se = 1e6.  output mashr modified set corresponding values NA, avoid nonsensical results downstream.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/run_mash.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run mash analysis on dreamlet results — run_mash","text":"Oliva M, Munoz-Aguirre M, Kim-Hellmuth S, Wucher V, Gewirtz AD, Cotter DJ, Parsana P, Kasela S, Balliu B, Vinuela , others (2020). “impact sex gene expression across human tissues.” Science, 369(6509), eaba3066. https://doi.org/10.1126/science.aba3066. Urbut SM, Wang G, Carbonetto P, Stephens M (2019). “Flexible statistical methods estimating testing effects genomic studies multiple conditions.” Nature genetics, 51(1), 187--195. https://doi.org/10.1038/s41588-018-0268-8.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/run_mash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run mash analysis on dreamlet results — run_mash","text":"","code":"library(muscat) library(mashr) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce[1:100, ],   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.055 secs #>   CD14+ Monocytes... #> 0.079 secs #>   CD4 T cells... #> 0.056 secs #>   CD8 T cells... #> 0.051 secs #>   FCGR3A+ Monocytes... #> 0.054 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.031 secs #>   CD14+ Monocytes... #> 0.035 secs #>   CD4 T cells... #> 0.029 secs #>   CD8 T cells... #> 0.023 secs #>   FCGR3A+ Monocytes... #> 0.029 secs  # run MASH model # This can take 10s of minutes on real data # This small datasets should take ~30s res_mash <- run_mash(res.dl, \"group_idstim\")  # extract statistics from mashr model # NA values indicate genes not sufficiently expressed # in a given cell type  # original logFC head(res_mash$logFC.original) #>                          B cells CD14+ Monocytes CD4 T cells CD8 T cells #> AGTRAP                        NA       0.1413919          NA          NA #> AKR1A1                 0.2593698       0.4062277          NA          NA #> APH1A_ENSG00000117362         NA       0.8309128 -0.01276698          NA #> ATP1A1                 0.4155968      -0.8213405 -0.50007017  -0.4932812 #> ATP5F1                -0.5963830      -1.4192064 -0.21508103  -0.3187010 #> ATP6V0B               -0.5477765      -0.6362835  0.09203165   0.4527028 #>                       FCGR3A+ Monocytes #> AGTRAP                       0.09674802 #> AKR1A1                      -0.39808296 #> APH1A_ENSG00000117362       -0.47531235 #> ATP1A1                      -0.28642822 #> ATP5F1                      -1.11230092 #> ATP6V0B                     -0.59144737  # posterior mean for logFC head(get_pm(res_mash$model)) #>                           B cells CD14+ Monocytes CD4 T cells CD8 T cells #> AGTRAP                         NA      0.03622517          NA          NA #> AKR1A1                 0.06170192      0.19704031          NA          NA #> APH1A_ENSG00000117362          NA      0.65248459  0.03004709          NA #> ATP1A1                 0.06322554     -0.74159540 -0.24386689  -0.2217077 #> ATP5F1                -0.51539775     -1.15909302 -0.32247805  -0.4103796 #> ATP6V0B               -0.37035262     -0.53126075 -0.07334986   0.1531089 #>                       FCGR3A+ Monocytes #> AGTRAP                       0.01943363 #> AKR1A1                      -0.15086480 #> APH1A_ENSG00000117362       -0.22254771 #> ATP1A1                      -0.13633909 #> ATP5F1                      -0.75977859 #> ATP6V0B                     -0.55588230  # how many gene-by-celltype tests are significant # i.e.  if a gene is significant in 2 celltypes, it is counted twice table(get_lfsr(res_mash$model) < 0.05, useNA = \"ifany\") #>  #> FALSE  TRUE  <NA>  #>   276    99   110   # how many genes are significant in at least one cell type table(apply(get_lfsr(res_mash$model), 1, min, na.rm = TRUE) < 0.05) #>  #> FALSE  TRUE  #>    48    49   # how many genes are significant in each cell type apply(get_lfsr(res_mash$model), 2, function(x) sum(x < 0.05, na.rm = TRUE)) #>           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  #>                14                43                12                 6  #> FCGR3A+ Monocytes  #>                24   # examine top set of genes # which genes are significant in at least 1 cell type sort(names(get_significant_results(res_mash$model)))[1:10] #>  [1] \"ATP1A1\"  \"ATP5F1\"  \"ATP6V0B\" \"CAPZB\"   \"CD52\"    \"CD53\"    \"ENO1\"    #>  [8] \"GNG5\"    \"MCL1\"    \"NDUFS5\"   # Lets examine ENO1 # There is a lot of variation in the raw logFC res_mash$logFC.original[\"ENO1\", ] #>           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  #>        0.04258043       -1.25091407        0.58319641        0.44458114  #> FCGR3A+ Monocytes  #>       -1.07292439   # posterior mean after borrowing across cell type and genes get_pm(res_mash$model)[\"ENO1\", ] #>           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  #>        -0.0149462        -1.1116816         0.3896256         0.2298794  #> FCGR3A+ Monocytes  #>        -0.9704445   # forest plot based on mashr results plotForest(res_mash, \"ENO1\")   # volcano plot based on mashr results # yaxis uses local false sign rate (lfsr) plotVolcano(res_mash) #> Warning: Removed 12 rows containing missing values (`geom_text_repel()`).   # Comment out to reduce package runtime # gene set analysis using mashr results # library(zenith) # go.gs = get_GeneOntology(\"CC\", to=\"SYMBOL\") # df_gs = zenith_gsa(res_mash, go.gs)  # Heatmap of results # plotZenithResults(df_gs, 2, 1)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/seeErrors-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get error text — seeErrors","title":"Get error text — seeErrors","text":"Get error text","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/seeErrors-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get error text — seeErrors","text":"","code":"seeErrors(obj)  # S4 method for dreamletResult seeErrors(obj)  # S4 method for dreamletProcessedData seeErrors(obj)  # S4 method for vpDF seeErrors(obj)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/seeErrors-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get error text — seeErrors","text":"obj dreamletResult object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/seeErrors-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get error text — seeErrors","text":"tibble storing error text","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/seeErrors-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get error text — seeErrors","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.22 secs #>   CD14+ Monocytes... #> 0.34 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.15 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.17 secs #>   CD14+ Monocytes... #> 0.22 secs #>   CD4 T cells... #> 0.18 secs #>   CD8 T cells... #> 0.11 secs #>   FCGR3A+ Monocytes... #> 0.26 secs  # show errors # but none are reported res.err = seeErrors(res.dl) #>    Assay-level errors: 0 #>    Gene-level errors: 0"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show object — show,dreamletResult-method","title":"Show object — show,dreamletResult-method","text":"Show object Show object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show object — show,dreamletResult-method","text":"","code":"# S4 method for dreamletResult show(object)  # S4 method for dreamletProcessedData show(object)"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/show-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show object — show,dreamletResult-method","text":"object dreamletProcessedData object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/show-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show object — show,dreamletResult-method","text":"show data stored object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/sortCols-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort variance partition statistics — sortCols,vpDF-method","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"Sort variance partition statistics","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/sortCols-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"","code":"# S4 method for vpDF sortCols(   x,   FUN = sum,   decreasing = TRUE,   last = c(\"Residuals\", \"Measurement.error\"),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/sortCols-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"x object returned fitVarPart() FUN function giving summary statistic sort .  Defaults sum decreasing logical.  sorting increasing decreasing? last columns placed right, regardless values columns ... arguments sort","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/sortCols-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"data.frame columns sorted mean value, Residuals last column","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/sortCols-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.21 secs #>   CD14+ Monocytes... #> 0.35 secs #>   CD4 T cells... #> 0.25 secs #>   CD8 T cells... #> 0.14 secs #>   FCGR3A+ Monocytes... #> 0.31 secs  # variance partitioning analysis vp <- fitVarPart(res.proc, ~group_id) #>   B cells... #> 2.1 secs #>   CD14+ Monocytes... #> 3.3 secs #>   CD4 T cells... #> 2.4 secs #>   CD8 T cells... #> 1.4 secs #>   FCGR3A+ Monocytes... #> 2.9 secs #>   # Summarize variance fractions genome-wide for each cell type plotVarPart(sortCols(vp))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/stackAssays.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack assays from pseudobulk — stackAssays","title":"Stack assays from pseudobulk — stackAssays","text":"Stack assays pseudobulk perform analysis across cell types","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/stackAssays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack assays from pseudobulk — stackAssays","text":"","code":"stackAssays(pb, assays = assayNames(pb))"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/stackAssays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack assays from pseudobulk — stackAssays","text":"pb pseudobulk SingleCellExperiment aggregateToPseudoBulk() assays array assay names include analysis. Defaults assayNames(pb)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/stackAssays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack assays from pseudobulk — stackAssays","text":"pseudobulk SingleCellExperiment cbind'ing expression values rbind'ing colData.  column stackedAssay colData() stores assay information stacked data.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/stackAssays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack assays from pseudobulk — stackAssays","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # Stack assays for joint analysis pb.stack <- stackAssays(pb)  # voom-style normalization # assay (i.e. cell type) can now be included as a covariate res.proc <- processAssays(pb.stack, ~ group_id + stackedAssay) #>   stacked... #> 0.46 secs  # variance partitioning analysis vp <- fitVarPart(res.proc, ~ group_id + stackedAssay) #>   stacked... #> 3 secs #>   # Summarize variance fractions across cell types plotVarPart(sortCols(vp))   # Interaction analysis allows group_id # to have a different effect within each stacedAssay vp2 <- fitVarPart(res.proc, ~ group_id * stackedAssay) #>   stacked... #> 3.6 secs #>   plotVarPart(sortCols(vp2))   # Interaction model using random effects form <- ~ (1 | group_id) + (1 | stackedAssay) + (1 | group_id:stackedAssay) #"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/tabToMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert results table to matrix — tabToMatrix","title":"Convert results table to matrix — tabToMatrix","text":"Convert results table matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/tabToMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert results table to matrix — tabToMatrix","text":"","code":"tabToMatrix(tab, col, rn = \"ID\", cn = \"assay\")"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/tabToMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert results table to matrix — tabToMatrix","text":"tab results table topTable() col column extract rn column id storing rownames cn column id storing colnames","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/tabToMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert results table to matrix — tabToMatrix","text":"matrix storing values column col rows defind rn columns defined cn","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/topTable-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"Extract table top-ranked genes dreamlet fit.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/topTable-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"","code":"# S4 method for dreamletResult topTable(   fit,   coef = NULL,   number = 10,   genelist = NULL,   adjust.method = \"BH\",   sort.by = \"P\",   resort.by = NULL,   p.value = 1,   lfc = 0,   confint = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/topTable-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"fit dreamletResult object coef coef number number genelist genelist adjust.method adjust.method sort.sort.resort.resort.p.value p.value lfc lfc confint confint","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/topTable-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"data.frame storing hypothesis test gene cell type","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/topTable-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.2 secs #>   CD14+ Monocytes... #> 0.33 secs #>   CD4 T cells... #> 0.26 secs #>   CD8 T cells... #> 0.13 secs #>   FCGR3A+ Monocytes... #> 0.3 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.17 secs #>   CD14+ Monocytes... #> 0.23 secs #>   CD4 T cells... #> 0.17 secs #>   CD8 T cells... #> 0.11 secs #>   FCGR3A+ Monocytes... #> 0.22 secs  # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR topTable(res.dl, coef = \"group_idstim\", number = 3) #> DataFrame with 3 rows and 9 columns #>               assay          ID     logFC   AveExpr         t     P.Value #>         <character> <character> <numeric> <numeric> <numeric>   <numeric> #> 1           B cells       ISG15   6.17666   10.2306   19.1083 1.26348e-14 #> 2 FCGR3A+ Monocytes      CXCL10   5.27610   11.9149   27.3747 7.09630e-14 #> 3           B cells       ISG20   3.60083   11.5794   16.0129 3.92209e-13 #>     adj.P.Val         B     z.std #>     <numeric> <numeric> <numeric> #> 1 5.67431e-11   23.2102   19.1083 #> 2 1.59347e-10   22.0773   27.3747 #> 3 5.87136e-10   20.2656   16.0129"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/vpDF-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class vpDF — vpDF-class","title":"Class vpDF — vpDF-class","text":"Class vpDF stores results gene assay","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/vpDF-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class vpDF — vpDF-class","text":"none none","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/zenith_gsa-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"Perform competitive gene set analysis accounting correlation genes.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"","code":"# S4 method for dreamletResult,GeneSetCollection zenith_gsa(   fit,   geneSets,   coefs,   use.ranks = FALSE,   n_genes_min = 10,   inter.gene.cor = 0.01,   progressbar = TRUE,   ... )  # S4 method for dreamlet_mash_result,GeneSetCollection zenith_gsa(   fit,   geneSets,   coefs,   use.ranks = FALSE,   n_genes_min = 10,   inter.gene.cor = 0.01,   progressbar = TRUE,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"fit results dreamlet() geneSets GeneSetCollection coefs coefficients test using topTable(fit, coef=coefs[]) use.ranks rank-based test TRUE parametric test FALSE? default: FALSE n_genes_min minimum number genes geneset inter.gene.cor NA, estimate correlation data.  Otherwise, use specified value progressbar TRUE, show progress bar ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"data.frame results gene set cell type data.frame results gene set cell type","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"code adapts widely used camera() analysis (Wu Smyth 2012)  limma package (Ritchie et al. 2015)  case linear (mixed) models used variancePartition::dream().","code":""},{"path":"http://DiseaseNeurogenomics.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,   assay = \"counts\",   cluster_id = \"cluster_id\",   sample_id = \"sample_id\",   verbose = FALSE )  # voom-style normalization res.proc <- processAssays(pb, ~group_id) #>   B cells... #> 0.2 secs #>   CD14+ Monocytes... #> 0.33 secs #>   CD4 T cells... #> 0.24 secs #>   CD8 T cells... #> 0.16 secs #>   FCGR3A+ Monocytes... #> 0.32 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data res.dl <- dreamlet(res.proc, ~group_id) #>   B cells... #> 0.15 secs #>   CD14+ Monocytes... #> 0.21 secs #>   CD4 T cells... #> 0.2 secs #>   CD8 T cells... #> 0.17 secs #>   FCGR3A+ Monocytes... #> 0.2 secs  # Load Gene Ontology database # use gene 'SYMBOL', or 'ENSEMBL' id # use get_MSigDB() to load MSigDB library(zenith) go.gs <- get_GeneOntology(\"CC\", to = \"SYMBOL\") #>  #>   # Run zenith gene set analysis on result of dreamlet res_zenith <- zenith_gsa(res.dl, go.gs, \"group_idstim\", progressbar = FALSE)  # for each cell type select 3 genesets with largest t-statistic # and 1 geneset with the lowest # Grey boxes indicate the gene set could not be evaluted because #    to few genes were represented plotZenithResults(res_zenith, 3, 1) #> Warning: Removed 6 rows containing missing values (`geom_text()`)."}]
