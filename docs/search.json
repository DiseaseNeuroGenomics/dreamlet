[{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"process-single-cell-count-data","dir":"Articles","previous_headings":"","what":"Process single cell count data","title":"Dreamlet analysis of single cell RNA-seq","text":"perform analysis PBMCs 8 individuals stimulated interferon-β Kang, et al, 2018, Nature Biotech. small dataset repeated measures high dimensional batch effects, sophisticated features dreamlet strictly necessary. gives us oppurtunity walk standard dreamlet workflow.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"preprocess-data","dir":"Articles","previous_headings":"Process single cell count data","what":"Preprocess data","title":"Dreamlet analysis of single cell RNA-seq","text":", single cell RNA-seq data downloaded ExperimentHub.","code":"library(dreamlet) library(muscat) library(ExperimentHub) library(zenith) library(scater)  # Download data, specifying EH2259 for the Kang, et al study eh <- ExperimentHub() sce <- eh[[\"EH2259\"]]  # only keep singlet cells with sufficient reads sce <- sce[rowSums(counts(sce) > 0) > 0, ] sce <- sce[,colData(sce)$multiplets == 'singlet']  # compute QC metrics qc <- perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # set variable indicating stimulated (stim) or control (ctrl) sce$StimStatus = sce$stim"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"aggregate-to-pseudobulk","dir":"Articles","previous_headings":"Process single cell count data","what":"Aggregate to pseudobulk","title":"Dreamlet analysis of single cell RNA-seq","text":"Dreamlet, like muscat, performs analysis pseudobulk-level summing raw counts across cells given sample cell type. aggregateToPseudoBulk substantially faster large -disk datasets muscat::aggregateData.","code":"# Since 'ind' is the individual and 'StimStatus' is the stimulus status, # create unique identifier for each sample sce$id <- paste0(sce$StimStatus, sce$ind)  # Create pseudobulk data by specifying cluster_id and sample_id # Count data for each cell type is then stored in the `assay` field # assay: entry in assayNames(sce) storing raw counts # cluster_id: variable in colData(sce) indicating cell clusters # sample_id: variable in colData(sce) indicating sample id for aggregating cells pb <- aggregateToPseudoBulk(sce,     assay = \"counts\",          cluster_id = \"cell\",       sample_id = \"id\",     verbose = FALSE)  # one 'assay' per cell type assayNames(pb) ## [1] \"B cells\"           \"CD14+ Monocytes\"   \"CD4 T cells\"       ## [4] \"CD8 T cells\"       \"Dendritic cells\"   \"FCGR3A+ Monocytes\" ## [7] \"Megakaryocytes\"    \"NK cells\""},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"voom-for-pseudobulk","dir":"Articles","previous_headings":"","what":"Voom for pseudobulk","title":"Dreamlet analysis of single cell RNA-seq","text":"Apply voom-style normalization pseudobulk counts within cell cluster using voomWithDreamWeights handle random effects (specified). processAssays() retains samples least min.cells given cell type. dropping samples usually problem, cases dropping sames can mean variable included regression formula longer variation. example, dropping stimulated samples analysis given cell type mean variable StimStatus variation perfectly colinear intercept term. colinearity issue detected internally variables problem dropped regression formula particular cell type. number samples retained resulting formula used cell type can accessed follows. analysis, samples dropped 3 cell types original formula remains valid case. mean-variance trend voom shown cell type. Cell types sufficient number cells reads show clear mean-variance trend. rare cell types like megakaryocytes, fewer genes sufficient reads trend less apparent.","code":"# Normalize and apply voom/voomWithDreamWeights res.proc = processAssays( pb, ~ StimStatus, min.count=5)  # the resulting object of class dreamletProcessedData stores  # normalized data and other information res.proc ## class: dreamletProcessedData  ## assays(8): B cells CD14+ Monocytes ... Megakaryocytes NK cells ## colData(4): ind stim multiplets StimStatus ## metadata(0): ## Samples: ##  min: 5  ##  max: 16 ## Genes: ##  min: 180  ##  max: 4455  ## details(3): assay n_retained formula # view details of dropping samples details(res.proc) ## DataFrame with 8 rows and 3 columns ##               assay n_retained     formula ##         <character>  <integer> <character> ## 1           B cells         16 ~StimStatus ## 2   CD14+ Monocytes         16 ~StimStatus ## 3       CD4 T cells         16 ~StimStatus ## 4       CD8 T cells         16 ~StimStatus ## 5   Dendritic cells          5 ~StimStatus ## 6 FCGR3A+ Monocytes         16 ~StimStatus ## 7    Megakaryocytes          9 ~StimStatus ## 8          NK cells         16 ~StimStatus # show voom plot for each cell clusters   plotVoom( res.proc) # Show plots for subset of cell clusters # plotVoom( res.proc[1:3] )  # Show plots for one cell cluster # plotVoom( res.proc[[\"B cells\"]])"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"variance-partitioning","dir":"Articles","previous_headings":"","what":"Variance partitioning","title":"Dreamlet analysis of single cell RNA-seq","text":"variancePartition package uses linear linear mixed models quanify contribution multiple sources expression variation gene-level. gene fits linear (mixed) model evalutes fraction expression variation explained variable. Variance fractions can visualized gene-level cell type using bar plot, genome-wide using violin plot.","code":"# run variance partitioning analysis vp.lst = fitVarPart( res.proc, ~ StimStatus) # Show variance fractions at the gene-level for each cell type genes = vp.lst$gene[2:4] plotPercentBars(vp.lst[vp.lst$gene %in% genes,]) # Summarize variance fractions genome-wide for each cell type plotVarPart(vp.lst, label.angle=60)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"differential-expression","dir":"Articles","previous_headings":"","what":"Differential expression","title":"Dreamlet analysis of single cell RNA-seq","text":"Since normalized expression data metadata stored within res.proc, regression formula remains specified. included stimulus status, analyses larger datasets can include covariates random effects. formula ~ StimStatus, intercept fit coefficient StimStatusstim log fold change simulated controls.","code":"# Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ StimStatus)  # names of estimated coefficients coefNames(res.dl) ## [1] \"(Intercept)\"    \"StimStatusstim\" # the resulting object of class dreamletResult # stores results and other information res.dl ## class: dreamletResult  ## assays(8): B cells CD14+ Monocytes ... Megakaryocytes NK cells ## Genes: ##  min: 180  ##  max: 4455  ## details(4): assay n_retain formula formDropsTerms ## coefNames(2): (Intercept) StimStatusstim"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"volcano-plots","dir":"Articles","previous_headings":"Differential expression","what":"Volcano plots","title":"Dreamlet analysis of single cell RNA-seq","text":"volcano plot can indicate strength differential expression signal cell type. Red points indicate FDR < 0.05.","code":"plotVolcano( res.dl, coef = 'StimStatusstim' )"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"extract-results","dir":"Articles","previous_headings":"Differential expression","what":"Extract results","title":"Dreamlet analysis of single cell RNA-seq","text":"entry res.dl stores model fit dream(), results can extracted using topTable() limma specifying coefficient interest. results shows gene name, log fold change, average expression, t-statistic, p-value, FDR (.e. adj.P.Val).","code":"topTable(res.dl[[\"B cells\"]], coef = 'StimStatusstim' ) ##           logFC   AveExpr        t      P.Value    adj.P.Val        B ## ISG15  5.526203 10.240731 29.94809 3.942031e-21 5.704118e-18 38.37168 ## ISG20  3.317362 11.421612 28.30217 1.561277e-20 1.129584e-17 37.05904 ## LY6E   4.290878  8.744657 21.01998 2.000133e-17 7.584859e-15 29.93200 ## UBE2L6 2.719712  9.279037 20.81040 2.537188e-17 7.584859e-15 29.69832 ## IRF7   3.726571  8.716599 20.78195 2.620891e-17 7.584859e-15 29.66924 ## EPSTI1 3.696210  8.145939 20.57331 3.329155e-17 8.028813e-15 29.41155 ## PLSCR1 4.066102  8.309200 19.70214 9.257824e-17 1.913724e-14 28.40669 ## DYNLT1 3.101261  7.912137 18.12641 6.543225e-16 1.080168e-13 26.47151 ## IFITM2 2.963947  8.769575 18.10590 6.718392e-16 1.080168e-13 26.43400 ## SAT1   2.173411  9.695187 17.40672 1.679515e-15 2.430258e-13 25.43741"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"forest-plot","dir":"Articles","previous_headings":"Differential expression","what":"Forest plot","title":"Dreamlet analysis of single cell RNA-seq","text":"forest plot shows log fold change standard error given gene across cell types. color indicates FDR.","code":"plotForest( res.dl, coef = 'StimStatusstim', gene = 'ISG20')"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"advanced-used-of-contrasts","dir":"Articles","previous_headings":"Differential expression","what":"Advanced used of contrasts","title":"Dreamlet analysis of single cell RNA-seq","text":"hypothesis test difference two coefficients can performed using contrasts. contrast matrix evaluated cell type backend, contrast string must supplied dreamlet().  new Diff variable can used downstream analysis asking coefficient. note since intercept term model, meaning StimStatusstim changes . formula 0 + StimStatus StimStatusstim mean expression stimulated samples. information using contrasts see makeContrastsDream() vignette.","code":"# create a contrasts called 'Diff' that is the difference between expression # in the stimulated and controls. # More than one can be specified contrasts = c(Diff = 'StimStatusstim - StimStatusctrl')  # Evalaute the regression model without an intercept term. # Instead estimate the mean expression in stimulated, controls and then # set Diff to the difference between the two res.dl2 = dreamlet( res.proc, ~ 0 + StimStatus, contrasts=contrasts)  # see estimated coefficients coefNames(res.dl2) ## [1] \"Diff\"           \"StimStatusctrl\" \"StimStatusstim\" # Volcano plot of Diff plotVolcano( res.dl2[1:2], coef = 'Diff' )"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"gene-set-analysis","dir":"Articles","previous_headings":"","what":"Gene set analysis","title":"Dreamlet analysis of single cell RNA-seq","text":"standard enrichment methods like Fishers exact test, requires specifying FDR cutoff identify differentially expressed genes. However, dichotomizing differential expression results often simple ignores quantitative variation captured differential expression test statistics. use zenith, wrapper limma::camera, perform gene set analysis using full spectrum differential expression test statistics. zenith/camera competetive test compares mean test statistic genes given gene set, genes set accounting correlation genes. , zenith_gsa takes dreamletResult object, coefficient interest, gene sets GeneSetCollection object GSEABase.","code":"# Load Gene Ontology database  # use gene 'SYMBOL', or 'ENSEMBL' id # use get_MSigDB() to load MSigDB go.gs = get_GeneOntology(to=\"SYMBOL\")     # Run zenith gene set analysis on result of dreamlet res_zenith = zenith_gsa(res.dl, coef = 'StimStatusstim', go.gs)  # examine results for each ell type and gene set head(res_zenith) ##     assay           coef                                                Geneset ## 1 B cells StimStatusstim               GO0034340: response to type I interferon ## 2 B cells StimStatusstim         GO0060337: type I interferon signaling pathway ## 3 B cells StimStatusstim      GO0071357: cellular response to type I interferon ## 4 B cells StimStatusstim        GO0048525: negative regulation of viral process ## 5 B cells StimStatusstim                   GO0051607: defense response to virus ## 6 B cells StimStatusstim GO0060333: interferon-gamma-mediated signaling pathway ##   NGenes Correlation    delta        se    p.less    p.greater       PValue ## 1     17        0.01 4.586323 0.6352284 0.9999978 2.212697e-06 4.425394e-06 ## 2     17        0.01 4.586323 0.6352284 0.9999978 2.212697e-06 4.425394e-06 ## 3     17        0.01 4.586323 0.6352284 0.9999978 2.212697e-06 4.425394e-06 ## 4     13        0.01 4.747930 0.7156646 0.9999944 5.622816e-06 1.124563e-05 ## 5     24        0.01 3.479750 0.5536610 0.9999900 1.002634e-05 2.005268e-05 ## 6     19        0.01 3.333906 0.6115057 0.9999574 4.263035e-05 8.526071e-05 ##   Direction         FDR ## 1        Up 0.002898844 ## 2        Up 0.002898844 ## 3        Up 0.002898844 ## 4        Up 0.004890780 ## 5        Up 0.007662352 ## 6        Up 0.020576251"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"heatmap-of-top-genesets","dir":"Articles","previous_headings":"Gene set analysis","what":"Heatmap of top genesets","title":"Dreamlet analysis of single cell RNA-seq","text":"","code":"# for each cell type select 5 genesets with largest t-statistic # and 1 geneset with the lowest # Grey boxes indicate the gene set could not be evaluted because #    to few genes were represented plotZenithResults(res_zenith, 5, 1)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"all-gene-sets-with-fdr-5","dir":"Articles","previous_headings":"Gene set analysis > Heatmap of top genesets","what":"All gene sets with FDR < 5%","title":"Dreamlet analysis of single cell RNA-seq","text":", show genes FDR < 5% cell type","code":"# get genesets with FDR < 5% gs = unique(res_zenith$Geneset[res_zenith$FDR < 0.05])  # keep only results of these genesets df = res_zenith[res_zenith$Geneset %in% gs,]  # plot results, but with no limit based on the highest/lowest t-statistic plotZenithResults(df, Inf, Inf)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"comparing-expression-in-clusters","dir":"Articles","previous_headings":"","what":"Comparing expression in clusters","title":"Dreamlet analysis of single cell RNA-seq","text":"Identifying genes differentially expressed cell clusters incorporates paired analysis design, since individual observed cell cluster.","code":"# test differential expression between B cells and the rest of the cell clusters ct.pairs = c(\"B cells\", \"rest\")   fit = dreamletCompareClusters( pb, ct.pairs, method=\"fixed\")  # The coefficient 'compare' is the value logFC between test and baseline: # compare = cellClustertest - cellClusterbaseline  df_Bcell = topTable(fit, coef=\"compare\")  head(df_Bcell) ##              logFC   AveExpr         t      P.Value    adj.P.Val        B ## C15orf48 -6.635081  8.200179 -52.73567 7.166069e-26 1.949171e-22 48.48023 ## TIMP1    -6.664147  9.326366 -48.94376 4.060244e-25 5.521932e-22 47.17369 ## ANXA1    -5.596470  8.477805 -36.83076 2.936001e-22 2.661975e-19 40.90691 ## CCL2     -6.532150  8.564950 -36.29678 4.111548e-22 2.795853e-19 40.60157 ## FTL      -3.434776 13.363302 -33.18651 3.232134e-21 1.758281e-18 38.66849 ## S100A10  -4.040431  8.873840 -27.35835 2.680319e-19 1.215078e-16 34.29294"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/dreamlet.html","id":"gene-cluster-specificity","dir":"Articles","previous_headings":"","what":"Gene-cluster specificity","title":"Dreamlet analysis of single cell RNA-seq","text":"Evaluate specificity gene cluster:  Highlight expression fraction specific gene cell type:","code":"df_cts = cellTypeSpecificity( pb )  # Violin plot of specificity score for each cell type plotViolin(df_cts) genes = rownames(df_cts)[apply(df_cts, 2, which.max)] plotPercentBars( df_cts, genes = genes ) dreamlet::plotHeatmap( df_cts, genes = genes)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/h5ad_on_disk.html","id":"on-disk-storage-zellkonverter","dir":"Articles","previous_headings":"","what":"On-disk storage: zellkonverter","title":"Handling large H5AD datasets","text":"zellkonverter takes advantage H5AD file format built HDF5 format order dramatically reduce memory usage still retaining performance. zellkonverter package uses DelayedArray backend provide seamless interface -disk H5AD dataset interface SingleCellExperiment class. zellkonverter interface python code. Note python dependencies installed first time readH5AD() run, rather package installed. first run readH5AD() can take minutes, subsequent runs fast.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/h5ad_on_disk.html","id":"standard-usage","dir":"Articles","previous_headings":"On-disk storage: zellkonverter","what":"Standard usage","title":"Handling large H5AD datasets","text":"","code":"`zellkonverter` >= v1.3.3 is required for these examples library(zellkonverter) library(SingleCellExperiment)  # Create SingleCellExperiment object that points to on-disk H5AD file sce = readH5AD(h5ad_file, use_hdf5=TRUE)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/h5ad_on_disk.html","id":"merge-multiple-datasets","dir":"Articles","previous_headings":"On-disk storage: zellkonverter","what":"Merge multiple datasets","title":"Handling large H5AD datasets","text":"","code":"# Read a series of H5AD files into a list # then combine them into a single merged SingleCellExperiment sce.lst = lapply( h5ad_files, function(file){   readH5AD(file, use_hdf5=TRUE)   }) sce = do.call(cbind, sce.list)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/h5ad_on_disk.html","id":"access-alternative-data","dir":"Articles","previous_headings":"On-disk storage: zellkonverter","what":"Access alternative data","title":"Handling large H5AD datasets","text":"software, including pegasus, store normalized data default portion file save raw counts raw/ field. , load H5AD file generated pegasus.","code":"# read raw/ from H5AD file # raw = TRUE tells readH5AD() to read alternative data # Must use zellkonverter >=1.3.3 sce_in = readH5AD(h5ad_file, use_hdf5=TRUE, raw=TRUE)  # use `raw` as counts sce = swapAltExp(sce_in, \"raw\") # use raw as main counts(sce) = assay(sce, 'X')   # set counts assay to data in X assay(sce, 'X') = NULL          # free X"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/h5ad_on_disk.html","id":"in-memory-storage-seurat","dir":"Articles","previous_headings":"","what":"In-memory storage: Seurat","title":"Handling large H5AD datasets","text":"Seurat can also convert import H5AD files, convert SingleCellExperiment. resulting SingleCellExperiment object stores data sparseMatrix.","code":"library(SingleCellExperiment) library(SeuratDisk)  # Convert h5ad file to h5seurat format Convert(h5ad_file, dest = \"h5seurat\")  # load Seurat file obj = LoadH5Seurat(h5seurat_file)  # Convert Seurat object to SingleCellExperiment sce <- as.SingleCellExperiment(obj)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/h5ad_on_disk.html","id":"comparing-interfaces","dir":"Articles","previous_headings":"","what":"Comparing interfaces","title":"Handling large H5AD datasets","text":"SingleCellExperiment interface zellkonverter Seurat hides backend differences typical R user. usage dreamlet cases. small medium datasets, performance differences minimal. However, large datasets can substantial difference performance. Use zellkonverter DelayedMatrix minimize memory usage cost computationl performance. Use Seurat sparseMatrix can faster sufficent memory. aggregateToPseudoBulk() computing pseudobulk data uses different backend implements -disk DelayedMatrix -memory sparseMatrix. versions highly optimized compared naive implementation.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/mashr.html","id":"preprocess-data","dir":"Articles","previous_headings":"Standard dreamlet analysis","what":"Preprocess data","title":"mashr analysis after dreamlet","text":"single cell RNA-seq data downloaded ExperimentHub","code":"library(dreamlet) library(muscat) library(ExperimentHub) library(zenith)  # Download data, specifying EH2259 for the Kang, et al study eh <- ExperimentHub() sce <- eh[[\"EH2259\"]]  # only keep singlet cells with sufficient reads sce <- sce[rowSums(counts(sce) > 0) > 0, ] sce <- sce[,colData(sce)$multiplets == 'singlet']  # compute QC metrics qc <- perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # compute normalized data sce <- sce[rowSums(counts(sce) > 1) >= 10, ] sce <- computeLibraryFactors(sce) sce <- logNormCounts(sce)  # set variable indicating stimulated (stim) or control (ctrl) sce$StimStatus = sce$stim"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/mashr.html","id":"aggregate-to-pseudobulk","dir":"Articles","previous_headings":"Standard dreamlet analysis","what":"Aggregate to pseudobulk","title":"mashr analysis after dreamlet","text":"","code":"# Since 'ind' is the individual and 'StimStatus' is the stimulus status, # create unique identifier for each sample sce$id <- paste0(sce$StimStatus, sce$ind)  # Create pseudobulk data by specifying cluster_id and sample_id # Count data for each cell type is then stored in the `assay` field # assay: entry in assayNames(sce) storing raw counts # cluster_id: variable in colData(sce) indicating cell clusters # sample_id: variable in colData(sce) indicating sample id for aggregating cells pb <- aggregateToPseudoBulk(sce,     assay = \"counts\",          cluster_id = \"cell\",       sample_id = \"id\",     verbose = FALSE)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/mashr.html","id":"dreamlet-for-pseudobulk","dir":"Articles","previous_headings":"Standard dreamlet analysis","what":"dreamlet for pseudobulk","title":"mashr analysis after dreamlet","text":"","code":"# Normalize and apply voom/voomWithDreamWeights res.proc = processAssays( pb, ~ StimStatus, min.count=5)  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ StimStatus)"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/mashr.html","id":"run-mashr-analysis","dir":"Articles","previous_headings":"","what":"Run mashr analysis","title":"mashr analysis after dreamlet","text":"","code":"# run mashr model to borrow information across genes and # cell types in estimating coefficients' posterior distribution res_mash = run_mash(res.dl, coef='StimStatusstim')"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/mashr.html","id":"summarize-mashr-results","dir":"Articles","previous_headings":"Run mashr analysis","what":"Summarize mashr results","title":"mashr analysis after dreamlet","text":"Compute summary mashr posterior distributions","code":"library(mashr)  # extract statistics from mashr model # NA values indicate genes not sufficiently expressed # in a given cell type  # original logFC head(res_mash$logFC.original)[1:4, 1:4] ##        B cells CD14+ Monocytes CD4 T cells CD8 T cells ## IFI6        NA        5.047702    5.677863          NA ## ISG20 3.317362        5.891686    3.051921    3.448508 ## IL1RN       NA        7.144496          NA          NA ## ISG15 5.526203        7.854009    5.200642    4.730993 # posterior mean for logFC head(get_pm(res_mash$model))[1:4, 1:4] ##        B cells CD14+ Monocytes CD4 T cells CD8 T cells ## IFI6        NA        5.004084    5.654698          NA ## ISG20 3.319672        5.817107    3.053102    3.436284 ## IL1RN       NA        7.117044          NA          NA ## ISG15 5.525628        7.674352    5.206549    4.748422 # how many gene-by-celltype tests are significant # i.e.  if a gene is significant in 2 celltypes, it is counted twice table(get_lfsr(res_mash$model) < 0.05, useNA=\"ifany\") ##  ## FALSE  TRUE  <NA>  ##  7768  4084 27996 # how many genes are significant in at least one cell type table( apply(get_lfsr(res_mash$model), 1, min, na.rm=TRUE) < 0.05) ##  ## FALSE  TRUE  ##  2801  2180 # how many genes are significant in each cell type apply(get_lfsr(res_mash$model), 2, function(x) sum(x < 0.05, na.rm=TRUE)) ##           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  ##               435              1653               941               204  ##   Dendritic cells FCGR3A+ Monocytes    Megakaryocytes          NK cells  ##                93               356                47               355 # examine top set of genes # which genes are significant in at least 1 cell type sort(names(get_significant_results(res_mash$model)))[1:10] ##  [1] \"ACTB\"                  \"ACTG1_ENSG00000184009\" \"ARPC1B\"                ##  [4] \"ARPC5\"                 \"ATP6V0E1\"              \"ATP6V1G1\"              ##  [7] \"B2M\"                   \"BTF3\"                  \"BTG1\"                  ## [10] \"CALM1\" # There is a lot of variation in the raw logFC res_mash$logFC.original[\"ISG20\",] ##           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  ##          3.317362          5.891686          3.051921          3.448508  ##   Dendritic cells FCGR3A+ Monocytes    Megakaryocytes          NK cells  ##          2.339701          4.403320          3.008427          3.662093 # posterior mean after borrowing across cell type and genes get_pm(res_mash$model)[\"ISG20\",] ##           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  ##          3.319672          5.817107          3.053102          3.436284  ##   Dendritic cells FCGR3A+ Monocytes    Megakaryocytes          NK cells  ##          2.601948          4.377213          3.080353          3.657437"},{"path":"http://gabrielhoffman.github.io/dreamlet/articles/mashr.html","id":"gene-set-analysis","dir":"Articles","previous_headings":"Run mashr analysis","what":"Gene set analysis","title":"mashr analysis after dreamlet","text":"Perform gene set analysis zenith using posterior mean coefficient   Volcano plot based local False Sign Rate (lFSR) estimated posterior distribution coefficient.","code":"# gene set analysis using mashr results library(zenith)  # Load Gene Ontology database  # use gene 'SYMBOL', or 'ENSEMBL' id # use get_MSigDB() to load MSigDB  go.gs = get_GeneOntology(to=\"SYMBOL\")  # valid values for statistic:  # \"tstatistic\", \"abs(tstatistic)\", \"logFC\", \"abs(logFC)\" df_gs = zenith_gsa(res_mash, go.gs)  # Heatmap of results plotZenithResults(df_gs, 5, 1) # forest plot based on mashr results plotForest(res_mash, \"ISG20\") # volcano plot based on mashr results # yaxis uses local false sign rate (lfsr) plotVolcano(res_mash)"},{"path":"http://gabrielhoffman.github.io/dreamlet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman G (2022). dreamlet: Perform differential expression analysis multi-sample single cell datasets using linear (mixed) models. R package version 0.0.42, https://gabrielhoffman.github.io/dreamlet.","code":"@Manual{,   title = {dreamlet: Perform differential expression analysis on multi-sample single cell datasets using linear (mixed) models},   author = {Gabriel Hoffman},   year = {2022},   note = {R package version 0.0.42},   url = {https://gabrielhoffman.github.io/dreamlet}, }"},{"path":"http://gabrielhoffman.github.io/dreamlet/index.html","id":"scalable-differential-expression-analysis-of-single-cell-transcriptomics-datasets-with-complex-study-designs","dir":"","previous_headings":"","what":"Scalable differential expression analysis of single cell transcriptomics datasets with complex study designs","title":"Perform differential expression analysis on multi-sample single cell datasets using linear (mixed) models","text":"dreamlet package enables differential expression analysis multi-sample single cell datasets using linear (mixed) models precision weights. Major functionality dreamlet package using Bioconductor SingleCellExperiment interface: aggregateToPseudoBulk()       Fast evaluation pseudobulk raw counts processAssays()                             Normalize aggregated raw counts, compute precision weights fitVarPart()                                     Variance partitioning analysis dreamlet()                                           Differential expression analysis across samples dreamletCompareClusters()  Differential expression analysis across cell clusters zenith_gsa()                                      Gene set analysis full spectrum test statistics","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Perform differential expression analysis on multi-sample single cell datasets using linear (mixed) models","text":"Recent advances single cell/nucleus transcriptomic technology enabled collection population-level data sets study cell type specific gene expression differences associated disease state, stimulus, genetic regulation. scale data, complex study designs, low read count per cell mean characterizing cell type specific molecular mechanisms requires user-friendly, purpose-built analytical framework. developed dreamlet package applies pseudobulk approach fits regression model gene cell cluster test differential expression across individuals associated trait interest. Use precision-weighted linear mixed models enables accounting repeated measures study designs, high dimensional batch effects, varying sequencing depth observed cells per biosample.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/dreamlet/index.html","id":"technical-intro","dir":"","previous_headings":"","what":"Technical intro","title":"Perform differential expression analysis on multi-sample single cell datasets using linear (mixed) models","text":"Dreamlet enables analysis massive-scale single cell/nucleus transcriptome datasets addressing CPU memory usage limitations. Dreamlet performs preprocessing statistical analysis parallel multicore machines, can distribute work across multiple nodes compute cluster. Dreamlet also uses H5AD format -disk data storage enable data processing smaller chunks dramatically reduce memory usage. dreamlet workflow easily integrates Bioconductor ecosystem, uses SingleCellExperiment class facilitate compatibility analyses. Beyond differential expression testing, dreamlet provides seamless integration downstream analysis including quantifying sources expression variation, gene set analysis using full spectrum gene-level t-statistics, testing differences cell type composition visualizing results. Dreamlet builds previous work variance partitioning differential expression using precision-weighted linear mixed models variancePartition package. dreamlet package designed easily adopted users variancePartition limma.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Perform differential expression analysis on multi-sample single cell datasets using linear (mixed) models","text":"","code":"# this should install dependencies too devtools::install_github(\"GabrielHoffman/dreamlet\")"},{"path":"http://gabrielhoffman.github.io/dreamlet/index.html","id":"dependencies","dir":"","previous_headings":"Install","what":"Dependencies","title":"Perform differential expression analysis on multi-sample single cell datasets using linear (mixed) models","text":"case code doesn’t install automatically:","code":"devtools::install_github(\"GabrielHoffman/variancePartition\") devtools::install_github(\"GabrielHoffman/zenith\")"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Aggregation single-cell pseudobulk data.  Adapted muscat::aggregateData syntax results.  can much faster SingleCellExperiment backed H5AD files","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"","code":"aggregateToPseudoBulk(   x,   assay = NULL,   sample_id = NULL,   cluster_id = NULL,   fun = c(\"sum\", \"mean\", \"median\", \"prop.detected\", \"num.detected\"),   scale = FALSE,   verbose = TRUE,   BPPARAM = SerialParam(progressbar = verbose) )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"x SingleCellExperiment. assay character string specifying assay slot use  input data. Defaults 1st available (assayNames(x)[1]). sample_id character string specifying variable use sample id cluster_id character string specifying variable use cluster id fun character string. Specifies function use summary statistic. Passed summarizeAssayByGroup2. scale logical. pseudo-bulks scaled effective library size & multiplied 1M? verbose logical. information progress reported? BPPARAM BiocParallelParam object specifying aggregation parallelized.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"SingleCellExperiment.  Aggregation parameters (assay, , fun, scaled) stored  metadata()$agg_pars, = c(cluster_id, sample_id).  number cells aggregated accessible int_colData()$n_cells.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Adapted muscat::aggregateData simular syntax results.  much faster SingleCellExperiment backed H5AD files using DelayedMatrix summarizes counts using DelayedMatrixStats.  function also includes optmizations sparseMatrix used Seurat using sparseMatrixStats.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Crowell, HL, Soneson, C, Germain, P-L, Calini, D,  Collin, L, Raposo, C, Malhotra, D & Robinson, MD:  discovery population-specific state transitions  multi-sample multi-condition single-cell RNA sequencing data.  bioRxiv 713412 (2018).  doi: https://doi.org/10.1101/713412","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"Gabriel Hoffman, Helena L Crowell & Mark D Robinson","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/aggregateToPseudoBulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregation of single-cell to pseudobulk data — aggregateToPseudoBulk","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # pseudobulk data from each cell type # is stored as its own assay  pb #> class: SingleCellExperiment  #> dim: 1267 4  #> metadata(2): experiment_info agg_pars #> assays(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ #>   Monocytes #> rownames(1267): HES4 ISG15 ... CSTB PRMT2 #> rowData names(2): ENSEMBL SYMBOL #> colnames(4): ctrl101 ctrl107 stim101 stim107 #> colData names(1): group_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):  # aggregate by cluster only,  # collapsing all samples into the same pseudobulk pb2 <- aggregateToPseudoBulk(example_sce, cluster_id = \"cluster_id\", verbose=FALSE)  pb2   #> class: SingleCellExperiment  #> dim: 1267 5  #> metadata(2): experiment_info agg_pars #> assays(1): '' #> rownames(1267): HES4 ISG15 ... CSTB PRMT2 #> rowData names(2): ENSEMBL SYMBOL #> colnames(5): B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ #>   Monocytes #> colData names(0): #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0):"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/assay-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assay — assay,dreamletResult,ANY-method","title":"Get assay — assay,dreamletResult,ANY-method","text":"Get assay Get assay Get assays name","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/assay-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assay — assay,dreamletResult,ANY-method","text":"","code":"# S4 method for dreamletResult,ANY assay(x, i, withDimnames = TRUE, ...)  # S4 method for dreamletProcessedData,ANY assay(x, i, withDimnames = TRUE, ...)  # S4 method for vpDF,ANY assay(x, i, withDimnames = TRUE, ...)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/assay-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assay — assay,dreamletResult,ANY-method","text":"x vpDF object number indicating index, string indicating assay withDimnames used ... arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/assay-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get assay — assay,dreamletResult,ANY-method","text":"return ith assay","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/assayNames-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assayNames — assayNames,dreamletResult-method","title":"Get assayNames — assayNames,dreamletResult-method","text":"Get assayNames Get assayNames Get aassayNames","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/assayNames-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assayNames — assayNames,dreamletResult-method","text":"","code":"# S4 method for dreamletResult assayNames(x, ...)  # S4 method for dreamletProcessedData assayNames(x, ...)  # S4 method for vpDF assayNames(x, ...)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/assayNames-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assayNames — assayNames,dreamletResult-method","text":"x vpDF object ... additional arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cell counts — cellCounts","title":"Extract cell counts — cellCounts","text":"Extract matrix cell counts SingleCellExperiment","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cell counts — cellCounts","text":"","code":"cellCounts(x)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cell counts — cellCounts","text":"x SingleCellExperiment","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cell counts — cellCounts","text":"matrix cell counts samples rows cell types columns","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract cell counts — cellCounts","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # get matrix of cell counts for each sample cellCounts(pb) #>         B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ Monocytes #> ctrl101     100             100         100          74                80 #> ctrl107      44             100         100          20                32 #> stim101     100             100         100         100               100 #> stim107      54             100         100          15                37"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellSpecificityValues-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class cellSpecificityValues — cellSpecificityValues-class","title":"Class cellSpecificityValues — cellSpecificityValues-class","text":"Class cellSpecificityValues cell type specificity valupes gene cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellTypeSpecificity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cell type specificity of gene expression — cellTypeSpecificity","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"gene, compute fraction overall expression attributable cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"","code":"cellTypeSpecificity(pb, ...)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"pb SingleCellExperiment pseudobulk data easy assay cell type. ... arguments passed edgeR::calcNormFactors()","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"matrix fraction expression attributable cell type gene.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"Sum counts cell type, compute fraction counts-per-million attributable cell type gene","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/cellTypeSpecificity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cell type specificity of gene expression — cellTypeSpecificity","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,    assay = \"counts\",       cluster_id = 'cluster_id',    sample_id = 'sample_id',   verbose=FALSE)  # Compute cell type specificity of each gene df = cellTypeSpecificity( pb)  # Violin plot of specificity scores for each cell type plotViolin(df)   # Compute the maximum specificity score for each gene scoreMax = apply(df, 1, max) head(scoreMax) #>      HES4     ISG15  AURKAIP1    MRPL20     SSU72      RER1  #> 0.4642496 0.4958420 0.2204701 0.3240954 0.2995513 0.2563389   # For each cell type, get most specific gene genes = rownames(df)[apply(df, 2, which.max)]    # Barplot of 5 genes plotPercentBars( df, genes = genes)   # heatmap of 5 genes that are most cell type specific dreamlet::plotHeatmap( df, genes = genes)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/checkFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Check variables in a formula — checkFormula","title":"Check variables in a formula — checkFormula","text":"Check variables formula present data","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/checkFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check variables in a formula — checkFormula","text":"","code":"checkFormula(formula, data)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/checkFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check variables in a formula — checkFormula","text":"formula formula variables check data data.frame storing variables formula","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/checkFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check variables in a formula — checkFormula","text":"formula valid, return TRUE.  Else throw error","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/checkFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check variables in a formula — checkFormula","text":"","code":"# Valid formula dreamlet:::checkFormula( ~ speed, cars)  # Not valid formula # dreamlet:::checkFormula( ~ speed + a, cars)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/coefNames-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coefficient names — coefNames","title":"Get coefficient names — coefNames","text":"Get coefficient names","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/coefNames-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coefficient names — coefNames","text":"","code":"coefNames(obj)  # S4 method for dreamletResult coefNames(obj)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/coefNames-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coefficient names — coefNames","text":"obj dreamletResult object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/coefNames-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get coefficient names — coefNames","text":"array storing names coefficients","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/coefNames-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get coefficient names — coefNames","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.075 secs #>   CD14+ Monocytes... #> 0.12 secs #>   CD4 T cells... #> 0.025 secs #>   CD8 T cells... #> 0.023 secs #>   FCGR3A+ Monocytes... #> 0.025 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.05 secs #>   CD14+ Monocytes... #> 0.064 secs #>   CD4 T cells... #> 0.66 secs #>   CD8 T cells... #> 0.022 secs #>   FCGR3A+ Monocytes... #> 0.053 secs #>   # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/colData-dreamletProcessedData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","title":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","text":"Extract colData dreamletProcessedData","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/colData-dreamletProcessedData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","text":"","code":"# S4 method for dreamletProcessedData colData(x, ...)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/colData-dreamletProcessedData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract colData from dreamletProcessedData — colData,dreamletProcessedData-method","text":"x dreamletProcessedData object ... arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/details-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract details from dreamletProcessedData — details","title":"Extract details from dreamletProcessedData — details","text":"Extract details dreamletProcessedData","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/details-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract details from dreamletProcessedData — details","text":"","code":"details(object)  # S4 method for dreamletProcessedData details(object)  # S4 method for dreamletResult details(object)  # S4 method for vpDF details(object)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/details-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract details from dreamletProcessedData — details","text":"object dreamletProcessedData object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/details-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract details from dreamletProcessedData — details","text":"Extract detailed information classes","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential expression for each assay — dreamlet","title":"Differential expression for each assay — dreamlet","text":"Perform differential expression assay using linear (mixed) models","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential expression for each assay — dreamlet","text":"","code":"dreamlet(   x,   formula,   data = colData(x),   assays = assayNames(x),   contrasts = NULL,   min.cells = 10,   isCounts = TRUE,   robust = FALSE,   quiet = FALSE,   BPPARAM = SerialParam(),   use.eBayes = TRUE,   ... )  # S4 method for dreamletProcessedData dreamlet(   x,   formula,   data = colData(x),   assays = assayNames(x),   contrasts = NULL,   min.cells = 10,   isCounts = TRUE,   robust = FALSE,   quiet = FALSE,   BPPARAM = SerialParam(),   use.eBayes = TRUE,   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential expression for each assay — dreamlet","text":"x SingleCellExperiment dreamletProcessedData object formula regression formula differential expression analysis data metadata used regression formula assays array assay names include analysis. Defaults assayNames(x) contrasts character vector specifying contrasts specifying linear combinations fixed effects test.  fed makeContrastsDream( formula, data, contrasts=contrasts) min.cells minimum number observed cells sample included analysis isCounts logical, indicating data raw counts robust logical, use eBayes method robust outlier genes quiet show messages BPPARAM parameters parallel evaluation use.eBayes eBayes used result? (defualt: TRUE) ... arguments passed dream","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential expression for each assay — dreamlet","text":"Object class dreamletResult storing results cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential expression for each assay — dreamlet","text":"Fit linear (mixed) model cell type separately.  advanced use contrasts see variancePartition::makeContrastsDream() vignette https://gabrielhoffman.github.io/variancePartition/articles/dream.html#advanced-hypothesis-testing-1.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential expression for each assay — dreamlet","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.023 secs #>   CD14+ Monocytes... #> 0.032 secs #>   CD4 T cells... #> 0.03 secs #>   CD8 T cells... #> 0.025 secs #>   FCGR3A+ Monocytes... #> 0.031 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.054 secs #>   CD14+ Monocytes... #> 0.076 secs #>   CD4 T cells... #> 0.058 secs #>   CD8 T cells... #> 0.034 secs #>   FCGR3A+ Monocytes... #> 0.068 secs #>   # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR topTable(res.dl, coef=\"group_idstim\", number=3) #> DataFrame with 3 rows and 9 columns #>         assay          ID     logFC   AveExpr         t     P.Value   adj.P.Val #>   <character> <character> <numeric> <numeric> <numeric>   <numeric>   <numeric> #> 1     B cells       ISG20   3.59771   11.5794   15.5721 1.01377e-18 3.55733e-15 #> 2 CD4 T cells       ISG15   5.50055   10.1672   21.5266 1.38871e-15 2.43649e-12 #> 3 CD4 T cells       ISG20   3.07310   10.7918   17.0119 1.37235e-13 1.60520e-10 #>           B     z.std #>   <numeric> <numeric> #> 1   32.2930   15.5721 #> 2   24.9379   21.5266 #> 3   21.2155   17.0119"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamletCompareClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential expression between pair of assays — dreamletCompareClusters","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"Perform differential expression pair assays using linear (mixed) models","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"","code":"dreamletCompareClusters(   pb,   assays,   method = c(\"fixed\", \"random\", \"none\"),   formula = ~0,   collapse = TRUE,   min.cells = 10,   min.count = 10,   min.samples = 4,   isCounts = TRUE,   normalize.method = \"TMM\",   useCountsWeights = TRUE,   robust = FALSE,   quiet = FALSE,   contrasts = c(compare = paste(\"cellClustertest - cellClusterbaseline\")),   BPPARAM = SerialParam(),   errorsAsWarnings = FALSE,   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"pb pseudobulk data SingleCellExperiment object assays array two entries specifying assays (.e. cell clusters) compare, list two sets assays. method account repeated measures donors using \"random\" effect, \"fixed\" effect, \"none\" formula covariates include analysis. collapse TRUE (default), combine cell clusters within test set, separately baseline set. FALSE, estimate coefficient cell cluster identify differential expression using linear contrasts variancePartition::makeContrastsDream() min.cells minimum number observed cells sample included analysis min.count minimum number reads gene consider expressed sample.  Passed edgeR::filterByExpr min.samples minimum number samples passing cutoffs cell cluster retained isCounts logical, indicating data raw counts normalize.method normalization method used calcNormFactors useCountsWeights use cell count weights robust logical, use eBayes method robust outlier genes quiet show messages contrasts cell type encoded variable cellCluster levels test baseline. contrasts specifies contrasts passed variancePartition::makeContrastsDream().  Note, advanced users . BPPARAM parameters parallel evaluation errorsAsWarnings TRUE, convert error warning return NULL ... arguments passed dream","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"Analyze pseudobulk data identify differential gene expression two cell clusters sets clusters modeling cross-donor expression variation aspects study design. method indicates regression method used test differential expression sets cell clusters.  Since biosample usually represented sets cell clusters, method determines paired design modeled.   method = \"mixed\", sample modeled random effect: ~ (1|Sample) + .... method = \"fixed\", sample modeled fixed effect: ~ Sample + .... method = \"none\", pairing ignored. collapse=TRUE (default) combine cell clusters within test set, separately baseline set, estimate coefficient indicating differential expression sets given gene.  collapse=FALSE, estimate coefficient cell type identify differential expression using linear contrasts variancePartition::makeContrastsDream().","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamletCompareClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential expression between pair of assays — dreamletCompareClusters","text":"","code":"library(muscat) library(SingleCellExperiment)   data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,    assay = \"counts\",       cluster_id = 'cluster_id',    sample_id = 'sample_id',   verbose=FALSE)  # Evaluate the specificity of each gene for each cluster df_cts = cellTypeSpecificity( pb )  # compare first two assays (i.e. cell types) ct.pairs =  c(\"B cells\", \"CD14+ Monocytes\")  # run comparison # use method = 'fixed' here since it is faster fit = dreamletCompareClusters( pb, ct.pairs, method=\"fixed\") #> Fixed effect model, using limma directly... #> Initial filtering... #> Filtering for paired samples...  # Extract top 10 differentially expressed genes # The coefficient 'compare' is the value logFC between test and baseline: # compare = cellClustertest - cellClusterbaseline  res = topTable(fit, coef='compare', number=10)  # genes with highest logFC are most highly expressed in  # B cells compared to CD14+ Monocytes head(res) #>             logFC   AveExpr         t      P.Value    adj.P.Val        B #> LGALS3  -4.816806  9.879829 -23.63531 6.877513e-11 2.734301e-08 15.43980 #> FTL     -4.564199 14.265849 -23.14857 8.639180e-11 2.734301e-08 15.38182 #> S100A10 -4.554573  9.950588 -20.89339 2.649274e-10 5.235895e-08 14.20355 #> S100A11 -4.691552 10.362616 -20.47182 3.308623e-10 5.235895e-08 14.00639 #> CD63    -3.888883 10.337664 -19.45422 5.762971e-10 7.295921e-08 13.49395 #> ANXA5   -3.673970 10.097965 -18.67233 8.996651e-10 9.491467e-08 13.05493  dreamlet::plotHeatmap( df_cts, genes = rownames(res)[1:5])   # compare B cells versus the rest of the cell types # 'rest' is a keyword indicating all other assays   fit = dreamletCompareClusters( pb, c(\"B cells\", 'rest'), method=\"fixed\") #> Fixed effect model, using limma directly... #> Initial filtering... #> Filtering for paired samples...  res = topTable(fit, coef='compare', number=10)  # genes with highest logFC are most highly expressed in  # B cells compared to all others head(res) #>             logFC   AveExpr         t      P.Value    adj.P.Val        B #> FTL     -3.611668 13.872811 -33.50421 9.981991e-16 8.873990e-13 26.46896 #> FTH1    -2.488733 15.497594 -26.99381 2.576095e-14 1.145074e-11 23.03711 #> ANXA1   -5.767273  8.777334 -26.00994 4.492584e-14 1.331302e-11 22.22040 #> S100A11 -4.235512 10.182616 -21.67526 6.800058e-13 1.511313e-10 19.91233 #> LGALS3  -3.908627  9.492690 -20.76951 1.279724e-12 2.275350e-10 19.24959 #> S100A10 -3.759699  9.613494 -19.60603 2.997582e-12 4.441418e-10 18.44009  # Get genes upregulated in B cells idx = with(res, which(logFC > 0))[1:5] dreamlet::plotHeatmap( df_cts, genes = rownames(res)[idx])   lst = list( test = c(\"CD14+ Monocytes\", \"FCGR3A+ Monocytes\"),      baseline= c(\"CD4 T cells\", \"CD8 T cells\"))  # compare 2 monocyte clusters to two T cell clusters fit = dreamletCompareClusters( pb, lst, method=\"fixed\") #> Fixed effect model, using limma directly... #> Initial filtering... #> Filtering for paired samples...  res = topTable(fit, coef='compare', number=10)  # genes with highest logFC are most highly expressed in  # monocytes compared to T cells head(res) #>                            logFC   AveExpr        t      P.Value    adj.P.Val #> FTL                     5.198559 13.603905 50.01440 1.092326e-12 9.470466e-10 #> TIMP1                   6.210031 11.076844 40.65163 7.542168e-12 3.269530e-09 #> HLA-DRA_ENSG00000204287 5.675747  9.655697 30.70867 1.023387e-10 2.957589e-08 #> S100A4                  4.514048  9.249845 26.98984 3.384453e-10 6.042015e-08 #> PSAP                    3.947873  9.342828 26.51227 3.992245e-10 6.042015e-08 #> SOD2                    5.688725  9.919582 26.37995 4.181325e-10 6.042015e-08 #>                                B #> FTL                     19.78358 #> TIMP1                   17.76489 #> HLA-DRA_ENSG00000204287 15.13660 #> S100A4                  14.12368 #> PSAP                    13.98677 #> SOD2                    13.92513  # Get genes upregulated in monocytes idx = with(res, which(logFC > 0))[1:5] dreamlet::plotHeatmap( df_cts, genes = rownames(res)[idx])"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamletProcessedData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class dreamletProcessedData — dreamletProcessedData-class","title":"Class dreamletProcessedData — dreamletProcessedData-class","text":"Class dreamletProcessedData","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamletResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class dreamletResult — dreamletResult-class","title":"Class dreamletResult — dreamletResult-class","text":"Class dreamletResult stores results produced dreamlet() give standard interface downstream analysis","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dreamlet_mash_result-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class dreamlet_mash_result — dreamlet_mash_result-class","title":"Class dreamlet_mash_result — dreamlet_mash_result-class","text":"Class dreamlet_mash_result","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dropRedundantTerms.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop redundant terms from the model — dropRedundantTerms","title":"Drop redundant terms from the model — dropRedundantTerms","text":"Detect co-linear fixed effects drop last one","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dropRedundantTerms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop redundant terms from the model — dropRedundantTerms","text":"","code":"dropRedundantTerms(formula, data, tol = 0.001)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dropRedundantTerms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop redundant terms from the model — dropRedundantTerms","text":"formula original formula data data.frame tol tolerance test difference correlation 1 -1","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dropRedundantTerms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop redundant terms from the model — dropRedundantTerms","text":"formula, possibly terms omitted.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/dropRedundantTerms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop redundant terms from the model — dropRedundantTerms","text":"","code":"# Valid formula dropRedundantTerms(~ group + extra, sleep) #> ~group + extra #> <environment: 0x7f88581619c0>"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/equalFormulas.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if two formulas are equal — equalFormulas","title":"Check if two formulas are equal — equalFormulas","text":"Check two formulas equal evaluating formulas extracting terms","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/equalFormulas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if two formulas are equal — equalFormulas","text":"","code":"equalFormulas(formula1, formula2)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/equalFormulas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if two formulas are equal — equalFormulas","text":"formula1 first formula formula2 second formula","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/equalFormulas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if two formulas are equal — equalFormulas","text":"boolean value indciating formulas equivalent","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/equalFormulas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if two formulas are equal — equalFormulas","text":"","code":"# These formulas are equivalent formula1 = ~ Size + 1 formula2 = ~ 1 + Size   dreamlet:::equalFormulas( formula1, formula2) #> [1] TRUE"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/extract-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","title":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","text":"Subset brackets Subset brackets","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/extract-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","text":"","code":"# S4 method for dreamletResult,ANY,ANY,ANY [(x, i)  # S4 method for dreamletProcessedData,ANY,ANY,ANY [(x, i)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/extract-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset with brackets — [,dreamletResult,ANY,ANY,ANY-method","text":"x dreamletProcessedData object indeces extract","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/fitVarPart.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance Partition analysis for each assay — fitVarPart","title":"Variance Partition analysis for each assay — fitVarPart","text":"Perform Variance Partition analysis  assay","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/fitVarPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance Partition analysis for each assay — fitVarPart","text":"","code":"fitVarPart(   x,   formula,   data = colData(x),   assays = assayNames(x),   quiet = FALSE,   BPPARAM = SerialParam(),   ... )  # S4 method for dreamletProcessedData fitVarPart(   x,   formula,   data = colData(x),   assays = assayNames(x),   quiet = FALSE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/fitVarPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance Partition analysis for each assay — fitVarPart","text":"x SingleCellExperiment dreamletProcessedData object formula regression formula differential expression analysis data metadata used regression formula assays array assay names include analysis. Defaults assayNames(x) quiet show messages BPPARAM parameters parallel evaluation ... arguments passed dream","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/fitVarPart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance Partition analysis for each assay — fitVarPart","text":"Object class vpDF inheriting DataFrame storing variance fractions gene cell type.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/fitVarPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance Partition analysis for each assay — fitVarPart","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.023 secs #>   CD14+ Monocytes... #> 0.022 secs #>   CD4 T cells... #> 0.024 secs #>   CD8 T cells... #> 0.021 secs #>   FCGR3A+ Monocytes... #> 0.026 secs  # variance partitioning analysis vp = fitVarPart( res.proc, ~ group_id) #>   B cells... #> Loading required package: Matrix #>  #> Attaching package: ‘Matrix’ #> The following object is masked from ‘package:S4Vectors’: #>  #>     expand #> 1.2 secs #>   CD14+ Monocytes... #> 1.8 secs #>   CD4 T cells... #> 1.3 secs #>   CD8 T cells... #> 0.56 secs #>   FCGR3A+ Monocytes... #> 1.6 secs #>   # Show variance fractions at the gene-level for each cell type genes = vp$gene[2:4] plotPercentBars(vp[vp$gene %in% genes,])   # Summarize variance fractions genome-wide for each cell type plotVarPart(vp)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/getTreat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"Test coefficient different specified value","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/getTreat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"","code":"# S4 method for dreamletResult getTreat(fit, lfc = log2(1.2), coef = NULL, number = 10, sort.by = \"p\")"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/getTreat-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"fit dreamletResult object lfc minimum log2-fold-change changes considered scientifically meaningful coef coefficient test number number genes return sort.column sort ","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/getTreat-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"DataFrame storing hypothesis test gene cell type","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/getTreat-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if coefficient is different from a specified value — getTreat,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.024 secs #>   CD14+ Monocytes... #> 0.02 secs #>   CD4 T cells... #> 0.023 secs #>   CD8 T cells... #> 0.02 secs #>   FCGR3A+ Monocytes... #> 0.023 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.039 secs #>   CD14+ Monocytes... #> 0.064 secs #>   CD4 T cells... #> 0.048 secs #>   CD8 T cells... #> 0.025 secs #>   FCGR3A+ Monocytes... #> 0.063 secs #>   # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR getTreat(res.dl, coef=\"group_idstim\", number=3) #> DataFrame with 3 rows and 7 columns #>         assay     logFC   AveExpr         t     P.Value   adj.P.Val         B #>   <character> <numeric> <numeric> <numeric>   <numeric>   <numeric> <numeric> #> 1     B cells   3.59771   11.5794   14.4336 7.01542e-18 2.46171e-14   32.2930 #> 2 CD4 T cells   5.50055   10.1672   20.4972 2.09821e-15 3.68131e-12   24.9379 #> 3 CD4 T cells   3.07310   10.7918   15.5558 3.94685e-13 4.61650e-10   21.2155"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/logitRatios.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute logit ratios and their precisions — logitRatios","title":"Compute logit ratios and their precisions — logitRatios","text":"Compute logit ratios precisions given matrix counts","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/logitRatios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute logit ratios and their precisions — logitRatios","text":"","code":"logitRatios(data, pc = 0.25)  # S4 method for matrix logitRatios(data, pc = 0.25)  # S4 method for SingleCellExperiment logitRatios(data, pc = 0.25)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/logitRatios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute logit ratios and their precisions — logitRatios","text":"data matrix counts rows samples columns categories, object information can extracted pc pseudocount","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/logitRatios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute logit ratios and their precisions — logitRatios","text":"EList defined limma storing logit ratio E precisions weights","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/logitRatios.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute logit ratios and their precisions — logitRatios","text":"Let \\(c1 \\sim \\Gamma(\\alpha, 1)\\), \\(c2 \\sim \\Gamma(\\beta, 1)\\) \\(x = \\frac{c1}{c2}\\), \\(x \\sim B(\\alpha, \\beta)\\), expected value \\(x\\) \\(E[x] = \\frac{\\alpha}{\\beta}\\).  expected log \\(E[\\log(x)] = \\psi(\\alpha) - \\psi(\\alpha - \\beta)\\), \\(\\psi()\\) digamma() function. variance logit transformed fraction \\(var[log(\\frac{x}{1-x})] = \\psi_1(\\alpha) + \\psi_1(\\beta)\\), \\(\\psi_1()\\) trigamma() function. sufficiently large values \\(\\alpha\\) \\(\\beta\\), well approximated \\(1/\\alpha + 1/\\beta\\). counts producing ratios discrete.  approximating counts \\(\\Gamma(\\lambda, 1)\\) instead \\(Pois(\\lambda)\\) matches first two moments exactly. See https://en.wikipedia.org/wiki/Beta_distribution#Moments_of_logarithmically_transformed_random_variables Since log() trigamma() defined zero, add pseudocount 0.25.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/metadata-dreamletProcessedData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","title":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","text":"Extract metadata dreamletProcessedData","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/metadata-dreamletProcessedData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","text":"","code":"# S4 method for dreamletProcessedData metadata(x)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/metadata-dreamletProcessedData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract metadata from dreamletProcessedData — metadata,dreamletProcessedData-method","text":"x dreamletProcessedData object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotCellComposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of cell compositions — plotCellComposition","title":"Bar plot of cell compositions — plotCellComposition","text":"Bar plot cell compositions","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotCellComposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of cell compositions — plotCellComposition","text":"","code":"plotCellComposition(obj, col, width = NULL)  # S4 method for SingleCellExperiment plotCellComposition(obj, col, width = NULL)  # S4 method for matrix plotCellComposition(obj, col, width = NULL)  # S4 method for data.frame plotCellComposition(obj, col, width = NULL)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotCellComposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of cell compositions — plotCellComposition","text":"obj matrix [cells] x [samples] SingleCellExperiment aggregateToPseudoBulk col array colors.  missing, use default colors.  names(col) arrayNames(obj), colors assigned assay name#' width specify width bars","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotCellComposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot of cell compositions — plotCellComposition","text":"Barplot showing cell fractions","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotCellComposition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar plot of cell compositions — plotCellComposition","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # show cell composition bar plots plotCellComposition(pb)   # extract cell counts df_cellCounts = cellCounts(pb)  # show cell composition bar plots plotCellComposition(df_cellCounts)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotForest-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest plot — plotForest","title":"Forest plot — plotForest","text":"Forest plot","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotForest-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest plot — plotForest","text":"","code":"plotForest(x, gene, coef)  # S4 method for dreamletResult plotForest(x, gene, coef)  # S4 method for dreamlet_mash_result plotForest(x, gene, coef)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotForest-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest plot — plotForest","text":"x result dreamlet gene gene show results coef coefficient test topTable","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotForest-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest plot — plotForest","text":"Plot showing effect sizes","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotForest-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest plot — plotForest","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.021 secs #>   CD14+ Monocytes... #> 0.022 secs #>   CD4 T cells... #> 0.024 secs #>   CD8 T cells... #> 0.02 secs #>   FCGR3A+ Monocytes... #> 0.022 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.057 secs #>   CD14+ Monocytes... #> 0.059 secs #>   CD4 T cells... #> 0.044 secs #>   CD8 T cells... #> 0.021 secs #>   FCGR3A+ Monocytes... #> 0.054 secs #>   # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # Show estimated log fold change with in each cell type plotForest(res.dl, gene = \"ISG20\", coef = \"group_idstim\")"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotHeatmap-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap — plotHeatmap","title":"Plot heatmap — plotHeatmap","text":"Plot heatmap","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotHeatmap-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap — plotHeatmap","text":"","code":"plotHeatmap(x, genes = rownames(x), color = \"darkblue\")  # S4 method for cellSpecificityValues plotHeatmap(x, genes = rownames(x), color = \"darkblue\")  # S4 method for matrix plotHeatmap(x, genes = rownames(x), color = \"darkblue\")"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotHeatmap-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap — plotHeatmap","text":"x fractions gene genes name genes plot color color heatmap","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotHeatmap-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap — plotHeatmap","text":"heatmap","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotPercentBars-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of variance fractions — plotPercentBars,vpDF-method","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"Bar plot variance fractions subset genes","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"","code":"# S4 method for vpDF plotPercentBars(   x,   col = c(ggColorHue(ncol(x) - 3), \"grey85\"),   genes = unique(x$gene),   width = NULL,   ncol = 3 )  # S4 method for cellSpecificityValues plotPercentBars(   x,   col = ggColorHue(ncol(x)),   genes = rownames(x),   width = NULL )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"x object returned extractVarPart() fitExtractVarPartModel() col color bars variable genes name genes plot width specify width bars ncol number columns plot","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"Bar plot showing variance fractions gene","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotPercentBars-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar plot of variance fractions — plotPercentBars,vpDF-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.022 secs #>   CD14+ Monocytes... #> 0.021 secs #>   CD4 T cells... #> 0.023 secs #>   CD8 T cells... #> 0.023 secs #>   FCGR3A+ Monocytes... #> 0.03 secs  # variance partitioning analysis vp = fitVarPart( res.proc, ~ group_id) #>   B cells... #> 1.3 secs #>   CD14+ Monocytes... #> 1.9 secs #>   CD4 T cells... #> 1.4 secs #>   CD8 T cells... #> 0.51 secs #>   FCGR3A+ Monocytes... #> 1.6 secs #>   # Show variance fractions at the gene-level for each cell type plotPercentBars(vp, genes = vp$gene[2:4], ncol=2)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVarPart-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Violin plot of variance fractions — plotVarPart,DataFrame-method","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"Violin plot variance fraction gene variable","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVarPart-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"","code":"# S4 method for DataFrame plotVarPart(   obj,   col = c(ggColorHue(base::ncol(obj) - 3), \"grey85\"),   label.angle = 20,   main = \"\",   ylab = \"\",   convertToPercent = TRUE,   ncol = 3,   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVarPart-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"obj varParFrac object returned fitExtractVarPart extractVarPart col vector colors label.angle angle labels x-axis main title plot ylab text y-axis convertToPercent multiply fractions 100 convert percent values ncol number columns plot ... additional arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVarPart-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"Violin plot showing variance fractions","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVarPart-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Violin plot of variance fractions — plotVarPart,DataFrame-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.022 secs #>   CD14+ Monocytes... #> 0.021 secs #>   CD4 T cells... #> 0.025 secs #>   CD8 T cells... #> 0.021 secs #>   FCGR3A+ Monocytes... #> 0.024 secs  # variance partitioning analysis vp = fitVarPart( res.proc, ~ group_id) #>   B cells... #> 1.1 secs #>   CD14+ Monocytes... #> 1.8 secs #>   CD4 T cells... #> 1.4 secs #>   CD8 T cells... #> 0.59 secs #>   FCGR3A+ Monocytes... #> 1.7 secs #>   # Summarize variance fractions genome-wide for each cell type plotVarPart(vp)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotViolin-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Violins — plotViolin","title":"Plot Violins — plotViolin","text":"Plot Violins","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotViolin-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Violins — plotViolin","text":"","code":"plotViolin(x)  # S4 method for cellSpecificityValues plotViolin(x)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotViolin-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Violins — plotViolin","text":"x fractions gene","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotViolin-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Violins — plotViolin","text":"Violin plot","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVolcano-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano plot for each cell type — plotVolcano","title":"Volcano plot for each cell type — plotVolcano","text":"Volcano plot cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVolcano-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano plot for each cell type — plotVolcano","text":"","code":"plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 9.99999999999997e-311,   cutoff = 0.05,   ncol = 3 )  # S4 method for list plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 9.99999999999997e-311,   cutoff = 0.05,   ncol = 3 )  # S4 method for MArrayLM plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 9.99999999999997e-311,   cutoff = 0.05,   ncol = 3 )  # S4 method for dreamlet_mash_result plotVolcano(   x,   coef,   nGenes = 5,   size = 12,   minp = 1e-16,   cutoff = 0.05,   ncol = 3 )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVolcano-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano plot for each cell type — plotVolcano","text":"x result dreamlet coef coefficient test topTable nGenes number genes highlight volcano plot size text size minp minimum p-value show y-axis cutoff adj.P.Val cutoff distinguish significant non-significant genes ncol number columns plot","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVolcano-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano plot for each cell type — plotVolcano","text":"Volcano plot cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVolcano-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano plot for each cell type — plotVolcano","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.021 secs #>   CD14+ Monocytes... #> 0.023 secs #>   CD4 T cells... #> 0.023 secs #>   CD8 T cells... #> 0.021 secs #>   FCGR3A+ Monocytes... #> 0.023 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.041 secs #>   CD14+ Monocytes... #> 0.081 secs #>   CD4 T cells... #> 0.056 secs #>   CD8 T cells... #> 0.023 secs #>   FCGR3A+ Monocytes... #> 0.052 secs #>   # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # volcano plot for each cell type plotVolcano(res.dl, coef=\"group_idstim\")   # volcano plot for first two cell types plotVolcano(res.dl[1:2], coef=\"group_idstim\")"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVoom-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot voom curves from each cell type — plotVoom","title":"Plot voom curves from each cell type — plotVoom","text":"Plot voom curves cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVoom-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot voom curves from each cell type — plotVoom","text":"","code":"plotVoom(x, ncol = 3)  # S4 method for dreamletProcessedData plotVoom(x, ncol = 3)  # S4 method for EList plotVoom(x, ncol = 3)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVoom-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot voom curves from each cell type — plotVoom","text":"x dreamletProcessedData ncol number columns plot","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVoom-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot voom curves from each cell type — plotVoom","text":"Plot mean-variance trend","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/plotVoom-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot voom curves from each cell type — plotVoom","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.024 secs #>   CD14+ Monocytes... #> 0.035 secs #>   CD4 T cells... #> 0.027 secs #>   CD8 T cells... #> 0.022 secs #>   FCGR3A+ Monocytes... #> 0.024 secs  # Show mean-variance trend from voom plotVoom(res.proc)   # plot for first two cell types plotVoom(res.proc[1:2])"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/print-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print object — print,dreamletResult-method","title":"Print object — print,dreamletResult-method","text":"Print object Print object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/print-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print object — print,dreamletResult-method","text":"","code":"# S4 method for dreamletResult print(x, ...)  # S4 method for dreamletProcessedData print(x, ...)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/print-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print object — print,dreamletResult-method","text":"x dreamletProcessedData object ... arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/print-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print object — print,dreamletResult-method","text":"print data stored object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processAssays.html","id":null,"dir":"Reference","previous_headings":"","what":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"raw counts, estimate precision weights using linear mixed model weighting number cells observed sample.  normalized data, weight number cells","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processAssays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"","code":"processAssays(   sceObj,   formula,   assays = assayNames(sceObj),   min.cells = 10,   min.count = 10,   min.samples = 4,   isCounts = TRUE,   normalize.method = \"TMM\",   useCountsWeights = TRUE,   pmetadata = NULL,   pkeys = NULL,   quiet = FALSE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processAssays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"sceObj SingleCellExperiment object formula regression formula differential expression analysis assays array assay names include analysis. Defaults assayNames(sceObj) min.cells minimum number observed cells sample included analysis min.count minimum number reads gene considered expressed sample.  Passed edgeR::filterByExpr min.samples minimum number samples passing cutoffs cell cluster retained isCounts logical, indicating data raw counts normalize.method normalization method used calcNormFactors useCountsWeights use cell count weights pmetadata sample-specific metadata varies across cell types.  merged colData(sceObj) assay make variables accessable formula pkeys array two strings indicating sample identifier cell type identifier columns pmetadata quiet show messages BPPARAM parameters parallel evaluation ... arguments passed dream","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processAssays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"Object class dreamletProcessedData storing voom-style normalized expression data","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processAssays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Processing SingleCellExperiment to dreamletProcessedData — processAssays","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.021 secs #>   CD14+ Monocytes... #> 0.02 secs #>   CD4 T cells... #> 0.022 secs #>   CD8 T cells... #> 0.02 secs #>   FCGR3A+ Monocytes... #> 0.022 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.037 secs #>   CD14+ Monocytes... #> 0.055 secs #>   CD4 T cells... #> 0.047 secs #>   CD8 T cells... #> 0.023 secs #>   FCGR3A+ Monocytes... #> 0.055 secs #>"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processOneAssay.html","id":null,"dir":"Reference","previous_headings":"","what":"Processing expression data from assay — processOneAssay","title":"Processing expression data from assay — processOneAssay","text":"raw counts, estimate precision weights using linear mixed model weighting number cells observed sample.  normalized data, weight number cells","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processOneAssay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processing expression data from assay — processOneAssay","text":"","code":"processOneAssay(   y,   formula,   data,   n.cells,   min.cells = 10,   min.count = 10,   min.samples = 4,   isCounts = TRUE,   normalize.method = \"TMM\",   useCountsWeights = TRUE,   quiet = TRUE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/processOneAssay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processing expression data from assay — processOneAssay","text":"y matrix counts log2 CPM formula regression formula differential expression analysis data metadata used regression formula n.cells array cell count sample min.cells minimum number observed cells sample included analysis min.count minimum number reads gene considered expressed sample.  Passed edgeR::filterByExpr min.samples minimum number samples passing cutoffs cell cluster retained isCounts logical, indicating data raw counts normalize.method normalization method used calcNormFactors useCountsWeights use cell count weights quiet show messages BPPARAM parameters parallel evaluation ... arguments passed dream","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/removeConstantTerms.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove constant terms from formula — removeConstantTerms","title":"Remove constant terms from formula — removeConstantTerms","text":"Remove constant terms formula.  Also remove categorical variables max one example per category","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/removeConstantTerms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove constant terms from formula — removeConstantTerms","text":"","code":"removeConstantTerms(formula, data)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/removeConstantTerms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove constant terms from formula — removeConstantTerms","text":"formula original formula data data.frame","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/removeConstantTerms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove constant terms from formula — removeConstantTerms","text":"formula, possibly terms omitted.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/removeConstantTerms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove constant terms from formula — removeConstantTerms","text":"Adapted MoEClust::drop_constants","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/removeConstantTerms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove constant terms from formula — removeConstantTerms","text":"","code":"# Valid formula removeConstantTerms(~ group + extra, sleep) #> ~group + extra #> <environment: 0x7f8859c14498>  # there is no variation in 'group' in this dataset removeConstantTerms(~ group + extra, sleep[1:3,]) #> ~1 + extra #> <environment: 0x7f8859c14498>"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/residuals-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract residuls from dreamletResult — residuals,dreamletResult-method","title":"Extract residuls from dreamletResult — residuals,dreamletResult-method","text":"Extract residuls dreamletResult","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/residuals-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract residuls from dreamletResult — residuals,dreamletResult-method","text":"","code":"# S4 method for dreamletResult residuals(object, ...)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/residuals-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract residuls from dreamletResult — residuals,dreamletResult-method","text":"object dreamletResult object ... arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/residuals-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract residuls from dreamletResult — residuals,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.023 secs #>   CD14+ Monocytes... #> 0.022 secs #>   CD4 T cells... #> 0.022 secs #>   CD8 T cells... #> 0.02 secs #>   FCGR3A+ Monocytes... #> 0.026 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.038 secs #>   CD14+ Monocytes... #> 0.059 secs #>   CD4 T cells... #> 0.044 secs #>   CD8 T cells... #> 0.022 secs #>   FCGR3A+ Monocytes... #> 0.054 secs #>   # extract residuals for each assay (i.e. cell type) # Return list with entry for each assay with for retained samples and genes resid.lst = residuals(res.dl)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/run_mash.html","id":null,"dir":"Reference","previous_headings":"","what":"Run mash analysis on dreamlet results — run_mash","title":"Run mash analysis on dreamlet results — run_mash","text":"Run mash analysis dreamlet results","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/run_mash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run mash analysis on dreamlet results — run_mash","text":"","code":"run_mash(fit, coefList)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/run_mash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run mash analysis on dreamlet results — run_mash","text":"fit result dreamlet() coefList coefficient analyzed","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/run_mash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run mash analysis on dreamlet results — run_mash","text":"list storing mashr model model original coefficients logFC.original","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/run_mash.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run mash analysis on dreamlet results — run_mash","text":"Apply mashr analysis (Urbut et al. 2019)  joint set coefficients gene cell type.  mashr Bayesian statistical method borrows strength across tests (.e. genes cell types) learning distribution non-zero effects based obesrved logFC standard errors.  method estimates posterior distributions coefficient based observed value genome-wide emprical distribution. mashr previously applied differential expression GTEx data using multiple tissues set donors (Oliva et al. 2020) . single cell data, given gene often sufficiently expressed cell types.  evaluated subsets cell types, coefficient value NA. Since mashr assumes coefficients standard errors every gene cell type pair, entries missing values set coef = 0, se = 1e6.  output mashr modified set corresponding values NA, avoid nonsensical results downstream.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/run_mash.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run mash analysis on dreamlet results — run_mash","text":"Oliva M, Munoz-Aguirre M, Kim-Hellmuth S, Wucher V, Gewirtz AD, Cotter DJ, Parsana P, Kasela S, Balliu B, Vinuela , others (2020). “impact sex gene expression across human tissues.” Science, 369(6509), eaba3066. https://doi.org/10.1126/science.aba3066. Urbut SM, Wang G, Carbonetto P, Stephens M (2019). “Flexible statistical methods estimating testing effects genomic studies multiple conditions.” Nature genetics, 51(1), 187--195. https://doi.org/10.1038/s41588-018-0268-8.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/run_mash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run mash analysis on dreamlet results — run_mash","text":"","code":"library(muscat) library(mashr) #> Loading required package: ashr library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,    assay = \"counts\",       cluster_id = 'cluster_id',    sample_id = 'sample_id',   verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.023 secs #>   CD14+ Monocytes... #> 0.021 secs #>   CD4 T cells... #> 0.023 secs #>   CD8 T cells... #> 0.022 secs #>   FCGR3A+ Monocytes... #> 0.025 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.039 secs #>   CD14+ Monocytes... #> 0.059 secs #>   CD4 T cells... #> 0.044 secs #>   CD8 T cells... #> 0.022 secs #>   FCGR3A+ Monocytes... #> 0.063 secs #>   # run MASH model # This can take 10s of minutes on real data # This small datasets should take ~30s res_mash = run_mash( res.dl, 'group_idstim')  # extract statistics from mashr model # NA values indicate genes not sufficiently expressed # in a given cell type  # original logFC head(res_mash$logFC.original) #>          B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ Monocytes #> ISG20  3.5977107       6.1228165   3.0731003   3.7280605         4.9675542 #> ISG15         NA       8.1862294   5.5005509          NA         7.5386815 #> IRF8   2.8610495              NA          NA          NA                NA #> CXCL10        NA              NA          NA          NA         5.2692770 #> UBE2L6 2.6902060       3.0387733   2.2976869          NA         1.9672296 #> B2M    0.7765687       0.9465299   0.7490134   0.5667585         0.4578611  # posterior mean for logFC head(get_pm(res_mash$model)) #>          B cells CD14+ Monocytes CD4 T cells CD8 T cells FCGR3A+ Monocytes #> ISG20  3.6201965       5.9543024   3.0940579   3.7474017         4.8601198 #> ISG15         NA       7.9791899   5.5248155          NA         7.4170174 #> IRF8   2.7637566              NA          NA          NA                NA #> CXCL10        NA              NA          NA          NA         5.2524025 #> UBE2L6 2.6253831       2.9768342   2.2885609          NA         1.9513343 #> B2M    0.7662939       0.9141552   0.7442989   0.5792546         0.4655056  # how many gene-by-celltype tests are significant # i.e.  if a gene is significant in 2 celltypes, it is counted twice table(get_lfsr(res_mash$model) < 0.05, useNA=\"ifany\") #>  #> FALSE  TRUE  <NA>  #>  2407  1102  2346   # how many genes are significant in at least one cell type table( apply(get_lfsr(res_mash$model), 1, min, na.rm=TRUE) < 0.05) #>  #> FALSE  TRUE  #>   593   578   # how many genes are significant in each cell type apply(get_lfsr(res_mash$model), 2, function(x) sum(x < 0.05, na.rm=TRUE)) #>           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  #>               143               488               144                77  #> FCGR3A+ Monocytes  #>               250   # examine top set of genes # which genes are significant in at least 1 cell type sort(names(get_significant_results(res_mash$model)))[1:10] #>  [1] \"ACTB\"                  \"ACTG1_ENSG00000184009\" \"ARHGDIB\"               #>  [4] \"ATP5L_ENSG00000167283\" \"ATP6V1G1\"              \"B2M\"                   #>  [7] \"BRK1\"                  \"BTF3\"                  \"BTG1\"                  #> [10] \"CALM1\"                  # Lets examine CXCL3 # There is a lot of variation in the raw logFC res_mash$logFC.original[\"ISG20\",] #>           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  #>          3.597711          6.122816          3.073100          3.728061  #> FCGR3A+ Monocytes  #>          4.967554   # posterior mean after borrowing across cell type and genes get_pm(res_mash$model)[\"ISG20\",] #>           B cells   CD14+ Monocytes       CD4 T cells       CD8 T cells  #>          3.620196          5.954302          3.094058          3.747402  #> FCGR3A+ Monocytes  #>          4.860120   # gene set analysis using mashr results library(zenith) go.gs = get_GeneOntology(\"CC\", to=\"SYMBOL\") #> Using cached version from 2022-05-20 22:52:52 # valid values for statistic:  # \"tstatistic\", \"abs(tstatistic)\", \"logFC\", \"abs(logFC)\" df_gs = zenith_gsa(res_mash, go.gs)  # Heatmap of results plotZenithResults(df_gs, 2, 1)   # forest plot based on mashr results plotForest(res_mash, \"ISG20\")   # volcano plot based on mashr results # yaxis uses local false sign rate (lfsr) plotVolcano(res_mash)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show object — show,dreamletResult-method","title":"Show object — show,dreamletResult-method","text":"Show object Show object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show object — show,dreamletResult-method","text":"","code":"# S4 method for dreamletResult show(object)  # S4 method for dreamletProcessedData show(object)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/show-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show object — show,dreamletResult-method","text":"object dreamletProcessedData object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/show-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show object — show,dreamletResult-method","text":"show data stored object","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/sortCols-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort variance partition statistics — sortCols,vpDF-method","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"Sort variance partition statistics","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/sortCols-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"","code":"# S4 method for vpDF sortCols(   x,   FUN = median,   decreasing = TRUE,   last = c(\"Residuals\", \"Measurement.error\"),   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/sortCols-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"x object returned fitVarPart() FUN function giving summary statistic sort .  Defaults median decreasing logical.  sorting increasing decreasing? last columns placed right, regardless values columns ... arguments sort","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/sortCols-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort variance partition statistics — sortCols,vpDF-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.035 secs #>   CD14+ Monocytes... #> 0.026 secs #>   CD4 T cells... #> 0.027 secs #>   CD8 T cells... #> 0.027 secs #>   FCGR3A+ Monocytes... #> 0.029 secs  # variance partitioning analysis vp = fitVarPart( res.proc, ~ group_id) #>   B cells... #> 1.3 secs #>   CD14+ Monocytes... #> 1.9 secs #>   CD4 T cells... #> 1.5 secs #>   CD8 T cells... #> 0.53 secs #>   FCGR3A+ Monocytes... #> 1.7 secs #>   # Summarize variance fractions genome-wide for each cell type plotVarPart( sortCols(vp) )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/tabToMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert results table to matrix — tabToMatrix","title":"Convert results table to matrix — tabToMatrix","text":"Convert results table matrix","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/tabToMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert results table to matrix — tabToMatrix","text":"","code":"tabToMatrix(tab, col, rn, cn)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/tabToMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert results table to matrix — tabToMatrix","text":"tab results table topTable() col column extract rn rownames cn colnames","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/topTable-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"Extract table top-ranked genes dreamlet fit.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/topTable-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"","code":"# S4 method for dreamletResult topTable(   fit,   coef = NULL,   number = 10,   genelist = NULL,   adjust.method = \"BH\",   sort.by = \"P\",   resort.by = NULL,   p.value = 1,   lfc = 0,   confint = FALSE )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/topTable-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"fit dreamletResult object coef coef number number genelist genelist adjust.method adjust.method sort.sort.resort.resort.p.value p.value lfc lfc confint confint","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/topTable-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"data.frame storing hypothesis test gene cell type","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/topTable-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of Top Genes from dreamlet fit — topTable,dreamletResult-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.022 secs #>   CD14+ Monocytes... #> 0.021 secs #>   CD4 T cells... #> 0.024 secs #>   CD8 T cells... #> 0.021 secs #>   FCGR3A+ Monocytes... #> 0.025 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.039 secs #>   CD14+ Monocytes... #> 0.061 secs #>   CD4 T cells... #> 0.1 secs #>   CD8 T cells... #> 0.023 secs #>   FCGR3A+ Monocytes... #> 0.052 secs #>   # show coefficients estimated for each cell type coefNames(res.dl) #> [1] \"(Intercept)\"  \"group_idstim\"  # extract results using limma-style syntax # combines all cell types together # adj.P.Val gives study-wide FDR topTable(res.dl, coef=\"group_idstim\", number=3) #> DataFrame with 3 rows and 9 columns #>         assay          ID     logFC   AveExpr         t     P.Value   adj.P.Val #>   <character> <character> <numeric> <numeric> <numeric>   <numeric>   <numeric> #> 1     B cells       ISG20   3.59771   11.5794   15.5721 1.01377e-18 3.55733e-15 #> 2 CD4 T cells       ISG15   5.50055   10.1672   21.5266 1.38871e-15 2.43649e-12 #> 3 CD4 T cells       ISG20   3.07310   10.7918   17.0119 1.37235e-13 1.60520e-10 #>           B     z.std #>   <numeric> <numeric> #> 1   32.2930   15.5721 #> 2   24.9379   21.5266 #> 3   21.2155   17.0119"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/vpDF-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class vpDF — vpDF-class","title":"Class vpDF — vpDF-class","text":"Class vpDF stores results gene assay","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"Perform competitive gene set analysis accounting correlation genes.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"","code":"# S4 method for dreamletResult,GeneSetCollection zenith_gsa(   fit,   geneSets,   coefs,   use.ranks = FALSE,   n_genes_min = 10,   inter.gene.cor = 0.01,   progressbar = TRUE,   ... )  # S4 method for dreamlet_mash_result,GeneSetCollection zenith_gsa(   fit,   geneSets,   coefs,   use.ranks = FALSE,   n_genes_min = 10,   inter.gene.cor = 0.01,   progressbar = TRUE,   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"fit results dreamlet() geneSets GeneSetCollection coefs coefficients test using topTable(fit, coef=coefs[]) use.ranks rank-based test TRUE parametric test FALSE? default: FALSE n_genes_min minumum number genes geneset inter.gene.cor NA, estimate correlation data.  Otherwise, use specified value progressbar TRUE, show progress bar ... arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"data.frame results gene set cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"code adapts widely used camera() analysis (Wu Smyth 2012)  limma package (Ritchie et al. 2015)  case linear (mixed) models used variancePartition::dream().","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform gene set analysis using zenith — zenith_gsa,dreamletResult,GeneSetCollection-method","text":"","code":"library(muscat) library(SingleCellExperiment)  data(example_sce)  # create pseudobulk for each sample and cell cluster pb <- aggregateToPseudoBulk(example_sce,     assay = \"counts\",        cluster_id = 'cluster_id',     sample_id = 'sample_id',    verbose=FALSE)  # voom-style normalization res.proc = processAssays( pb, ~ group_id) #>   B cells... #> 0.028 secs #>   CD14+ Monocytes... #> 0.025 secs #>   CD4 T cells... #> 0.029 secs #>   CD8 T cells... #> 0.021 secs #>   FCGR3A+ Monocytes... #> 0.028 secs  # Differential expression analysis within each assay, # evaluated on the voom normalized data  res.dl = dreamlet( res.proc, ~ group_id) #>   B cells... #> 0.044 secs #>   CD14+ Monocytes... #> 0.063 secs #>   CD4 T cells... #> 0.044 secs #>   CD8 T cells... #> 0.022 secs #>   FCGR3A+ Monocytes... #> 0.054 secs #>   # Load Gene Ontology database  # use gene 'SYMBOL', or 'ENSEMBL' id # use get_MSigDB() to load MSigDB library(zenith) go.gs = get_GeneOntology(\"CC\", to=\"SYMBOL\") #> Using cached version from 2022-05-20 22:52:52     # Run zenith gene set analysis on result of dreamlet res_zenith = zenith_gsa(res.dl, go.gs, 'group_idstim', progressbar=FALSE )  # for each cell type select 3 genesets with largest t-statistic # and 1 geneset with the lowest # Grey boxes indicate the gene set could not be evaluted because #    to few genes were represented plotZenithResults(res_zenith, 3, 1)"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform gene set analysis using zenith — zenith_gsa","title":"Perform gene set analysis using zenith — zenith_gsa","text":"Perform competitive gene set analysis accounting correlation genes.","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform gene set analysis using zenith — zenith_gsa","text":"","code":"zenith_gsa(   fit,   geneSets,   coefs,   use.ranks = FALSE,   n_genes_min = 10,   inter.gene.cor = 0.01,   progressbar = TRUE,   ... )"},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform gene set analysis using zenith — zenith_gsa","text":"fit results dream() geneSets GeneSetCollection coefs coefficients test using topTable(fit, coef=coefs[]) use.ranks rank-based test TRUE parametric test FALSE? default: FALSE n_genes_min minumum number genes geneset inter.gene.cor NA, estimate correlation data.  Otherwise, use specified value progressbar TRUE, show progress bar ... arguments","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform gene set analysis using zenith — zenith_gsa","text":"data.frame results gene set cell type","code":""},{"path":"http://gabrielhoffman.github.io/dreamlet/reference/zenith_gsa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform gene set analysis using zenith — zenith_gsa","text":"code adapts widely used camera() analysis (Wu Smyth 2012)  limma package (Ritchie et al. 2015)  case linear (mixed) models used variancePartition::dream().","code":""}]
